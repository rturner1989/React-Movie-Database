{"version":3,"sources":["components/Watchlist/WatchlistCard/watchlistcard.js","components/Watchlist/watchlist.js","hooks/useLocalStorage.js","context.js","components/Navbar/navbar.js","hooks/useHorizontalScroll.js","components/Homepage/ToggleButton/toggleButton.js","components/Homepage/RenderedCard/renderedCard.js","components/Homepage/homepage.js","components/Searchbar/searchbar.js","components/SearchResults/SearchResultsCard/movietvresultdata.js","components/SearchResults/SearchResultsCard/peopleresultdata.js","components/SearchResults/SearchTrending/trendingdata.js","components/SearchResults/searchresults.js","components/FullScreenResult/fullscreenreview/fullscreenreview.js","components/FullScreenResult/moviefullscreenresult.js","components/FullScreenResult/tvfullscreenresult.js","components/FullScreenResult/peoplefullscreenresults.js","App.js","index.js"],"names":["WatchlistCard","found","imgSrc","linkTo","title","vote","removeCat","removeID","addCat","addID","useGlobalContext","addToWatchList","removeFromWatchList","className","src","alt","to","onClick","focusable","Watchlist","watchList","isMovieInWatchlist","movieCount","tvCount","id","movie","length","map","item","poster_path","vote_average","useLocalStorage","key","initialState","useState","retrieve","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","AppContext","React","createContext","AppProvider","children","category","tv","people","searchResults","setSearchResults","setWatchList","type","person","trendingData","setTrendingData","isAdded","isRemoved","watchListAlert","setWatchListAlert","setMovieCount","setTvCount","searchMovies","query","a","fetch","response","json","data","console","log","results","searchTVShows","searchPeople","search","timer","setTimeout","clearTimeout","Provider","value","find","w","obj","name","filter","isTvShowInWatchlist","convertDate","info","Date","toLocaleString","day","month","year","useContext","Navbar","useHorizontalScroll","preventParentScrolling","elRef","useRef","el","current","onWheel","e","deltaY","preventDefault","scrollLeft","scrollWidth","clientWidth","Math","round","scrollTo","left","addEventListener","removeEventListener","ToggleButton","handleClick","active","disabled","RenderedCard","Homepage","popularData","setPopularData","topRatedData","setTopRatedData","popScrollRef","topScrollRef","watchScrollRef","getPopularMovieData","prev","getPopularTVData","getTopRatedMovieData","getTopRatedTVData","ref","Searchbar","searchTitle","setSearchTitle","setCategory","placeholder","onChange","target","alert","MovieTVResultData","img","release","overview","PeopleResultData","profile_path","known_for_department","known_for","role","release_date","TrendingData","link","SearchResults","movieTrendingRef","tvTrendingRef","peopleTrendingRef","getTrendingMovieData","getTrendingTVData","getTrendingPeopleData","getAllTrending","film","show","tvshow","first_air_date","peep","index","FullScreenReview","author","written","review","MovieFullScreenResult","useParams","movieData","setMovieData","movieReviewData","setMovieReviewData","movieCreditData","setMovieCreditData","toggle","setToggle","getMovieData","getMovieReview","getMovieCredit","undefined","genres","runtime","production_companies","company","tagline","result","created_at","content","cast","character","TvFullScreenResult","tvData","setTvData","tvResultData","setTvResultData","tvCreditData","setTvCreditData","getTvData","getTvReview","PeopleFullScreenResult","peopleData","setPeopleData","peopleCreditData","setPeopleCreditData","peopleImageData","setPeopleImageData","getPeopleData","getPeopleCreditData","getPeopleImageData","birthday","place_of_birth","biography","profiles","file_path","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2f8a659.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar } from \"react-icons/ai\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst WatchlistCard = ({\r\n    found,\r\n    imgSrc,\r\n    linkTo,\r\n    title,\r\n    vote,\r\n    removeCat,\r\n    removeID,\r\n    addCat,\r\n    addID,\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList } = useGlobalContext();\r\n\r\n    return (\r\n        <div className=\"render-card\">\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${imgSrc}`}\r\n                alt=\"\"\r\n                className=\"render-img\"\r\n            />\r\n            <Link to={linkTo} className=\"render-card-link\">\r\n                <h3>{title}</h3>\r\n            </Link>\r\n            <p className=\"render-vote\">\r\n                <AiFillStar className=\"render-icon\" />\r\n                {vote}\r\n            </p>\r\n            <button\r\n                className=\"remove-from-wishlist\"\r\n                onClick={() => {\r\n                    found\r\n                        ? removeFromWatchList(removeCat, removeID)\r\n                        : addToWatchList(addCat, addID);\r\n                }}\r\n            >\r\n                {found ? (\r\n                    <IoMdRemoveCircleOutline\r\n                        className=\"remove-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <IoMdAddCircleOutline\r\n                        className=\"add-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WatchlistCard;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport WatchlistCard from \"./WatchlistCard/watchlistcard\";\r\n\r\nconst Watchlist = () => {\r\n    const { watchList, isMovieInWatchlist, movieCount, tvCount } =\r\n        useGlobalContext();\r\n\r\n    return (\r\n        <div id=\"watchlist-container\">\r\n            <div id=\"watchlist-header\">\r\n                <h2>Your Watchlist</h2>\r\n                <p>movie count {movieCount}</p>\r\n                <p>tv count {tvCount}</p>\r\n            </div>\r\n            <div id=\"watchlist\">\r\n                {watchList.movie.length !== 0 ? (\r\n                    watchList.movie.map((item) => {\r\n                        return (\r\n                            <WatchlistCard\r\n                                key={item.id}\r\n                                id={item.id}\r\n                                found={isMovieInWatchlist(item.id)}\r\n                                imgSrc={item.poster_path}\r\n                                linkTo={`/result/movie/${item.id}`}\r\n                                title={item.title}\r\n                                vote={item.vote_average}\r\n                                removeCat={\"movie\"}\r\n                                removeID={item.id}\r\n                                addCat={\"movie\"}\r\n                                addID={item}\r\n                            />\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Watchlist;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useLocalStorage = (key, initialState) => {\r\n    const [state, setState] = useState(() => {\r\n        const retrieve = localStorage.getItem(key);\r\n        return retrieve ? JSON.parse(retrieve) : initialState;\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (state) {\r\n            localStorage.setItem(key, JSON.stringify(state));\r\n        }\r\n    }, [state]);\r\n\r\n    return [state, setState];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport Watchlist from \"./components/Watchlist/watchlist\";\r\nimport useLocalStorage from \"./hooks/useLocalStorage\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n    const [searchResults, setSearchResults] = useState({\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n        people: [],\r\n    });\r\n    const [watchList, setWatchList] = useLocalStorage(\"Watchlist\", {\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n    });\r\n    const [trendingData, setTrendingData] = useState({\r\n        type: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n        person: [],\r\n    });\r\n    const [watchListAlert, setWatchListAlert] = useState({\r\n        isAdded: false,\r\n        isRemoved: false,\r\n        title: \"\",\r\n    });\r\n    const [movieCount, setMovieCount] = useState(0);\r\n    const [tvCount, setTvCount] = useState(0);\r\n\r\n    const searchMovies = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/movie?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        console.log(data);\r\n        setSearchResults({\r\n            ...searchResults,\r\n            category: \"movie\",\r\n            movie: data.results,\r\n        });\r\n    };\r\n\r\n    const searchTVShows = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/tv?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        console.log(data);\r\n        setSearchResults({\r\n            ...searchResults,\r\n            category: \"tv\",\r\n            tv: data.results,\r\n        });\r\n    };\r\n\r\n    const searchPeople = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/person?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        console.log(data);\r\n        setSearchResults({\r\n            ...searchResults,\r\n            category: \"people\",\r\n            people: data.results,\r\n        });\r\n    };\r\n\r\n    const search = async (category, query) => {\r\n        switch (category) {\r\n            case \"movie\":\r\n                searchMovies(query);\r\n                break;\r\n            case \"tv\":\r\n                searchTVShows(query);\r\n                break;\r\n            case \"people\":\r\n                searchPeople(query);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const convertDate = (info) => {\r\n        const date = new Date(info);\r\n        const string = date.toLocaleString(\"default\", {\r\n            day: \"numeric\",\r\n            month: \"long\",\r\n            year: \"numeric\",\r\n        });\r\n        return string;\r\n    };\r\n\r\n    const addToWatchList = (category, item) => {\r\n        if ([...watchList.movie, ...watchList.tv].find((w) => w.id === item.id))\r\n            return;\r\n        if (category === \"movie\") {\r\n            const obj = {\r\n                id: item.id,\r\n                title: item.title,\r\n                poster_path: item.poster_path,\r\n                vote_average: item.vote_average,\r\n            };\r\n            setWatchList({\r\n                ...watchList,\r\n                movie: [...watchList.movie, obj],\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: true,\r\n                isRemoved: false,\r\n                title: item.title,\r\n            });\r\n        } else if (category === \"tv\") {\r\n            const obj = {\r\n                id: item.id,\r\n                name: item.name,\r\n                poster_path: item.poster_path,\r\n                vote_average: item.vote_average,\r\n            };\r\n            setWatchList({\r\n                ...watchList,\r\n                tv: [...watchList.tv, obj],\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: true,\r\n                isRemoved: false,\r\n                title: item.name,\r\n            });\r\n        }\r\n    };\r\n\r\n    const removeFromWatchList = (category, id) => {\r\n        if (category === \"movie\") {\r\n            setWatchList({\r\n                ...watchList,\r\n                movie: watchList.movie.filter((item) => item.id !== id),\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: false,\r\n                isRemoved: true,\r\n                title: watchList.movie.find((item) => item.id === id).title,\r\n            });\r\n        } else if (category === \"tv\") {\r\n            setWatchList({\r\n                ...watchList,\r\n                tv: watchList.tv.filter((item) => item.id !== id),\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: false,\r\n                isRemoved: true,\r\n                title: watchList.tv.find((item) => item.id === id).name,\r\n            });\r\n        }\r\n    };\r\n\r\n    const isMovieInWatchlist = (id) => {\r\n        return watchList.movie.find((item) => item.id === id);\r\n    };\r\n    const isTvShowInWatchlist = (id) => {\r\n        return watchList.tv.find((item) => item.id === id);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setWatchListAlert({ isAdded: false, isRemoved: false, title: \"\" });\r\n        }, 3000);\r\n        return () => {\r\n            clearTimeout(timer);\r\n        };\r\n    }, [watchListAlert]);\r\n\r\n    useEffect(() => {\r\n        setMovieCount(watchList.movie.length);\r\n        setTvCount(watchList.tv.length);\r\n    }, [watchList]);\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                trendingData,\r\n                setTrendingData,\r\n                setSearchResults,\r\n                search,\r\n                searchResults,\r\n                watchList,\r\n                setWatchList,\r\n                addToWatchList,\r\n                removeFromWatchList,\r\n                isMovieInWatchlist,\r\n                isTvShowInWatchlist,\r\n                convertDate,\r\n                watchListAlert,\r\n                movieCount,\r\n                tvCount,\r\n            }}\r\n        >\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GoSearch } from \"react-icons/go\";\r\nimport { useGlobalContext } from \"../../context\";\r\n\r\nconst Navbar = () => {\r\n    const { watchListAlert, setSearchResults } = useGlobalContext();\r\n    return (\r\n        <div>\r\n            <nav id=\"navbar\">\r\n                <ul id=\"navbar-list\">\r\n                    <li>\r\n                        <Link\r\n                            className=\"nav-link\"\r\n                            to=\"/\"\r\n                            onClick={() => {\r\n                                setSearchResults({\r\n                                    category: \"movie\",\r\n                                    movie: [],\r\n                                    tv: [],\r\n                                    people: [],\r\n                                });\r\n                            }}\r\n                        >\r\n                            Home\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link className=\"nav-link\" to=\"/watchlist\">\r\n                            Watchlist\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link className=\"nav-link\" to=\"/search\">\r\n                            <GoSearch className=\"link-icon\" />\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n            <div id=\"display\">\r\n                <div\r\n                    id=\"watchlist-alert\"\r\n                    className={\r\n                        watchListAlert.isAdded\r\n                            ? \"added\"\r\n                            : watchListAlert.isRemoved\r\n                            ? \"removed\"\r\n                            : \"\"\r\n                    }\r\n                >\r\n                    {watchListAlert.isAdded ? (\r\n                        <p>Added to Watchlist - {watchListAlert.title}</p>\r\n                    ) : watchListAlert.isRemoved ? (\r\n                        <p>Removed from Watchlist - {watchListAlert.title}</p>\r\n                    ) : (\r\n                        <p></p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nconst useHorizontalScroll = (preventParentScrolling = true) => {\r\n    const elRef = useRef();\r\n    useEffect(() => {\r\n        const el = elRef.current;\r\n        if (el) {\r\n            const onWheel = (e) => {\r\n                if (e.deltaY === 0) return;\r\n                if (preventParentScrolling === true) {\r\n                    e.preventDefault();\r\n                } else if (\r\n                    !(el.scrollLeft === 0 && e.deltaY < 0) &&\r\n                    !(\r\n                        el.scrollWidth -\r\n                            el.clientWidth -\r\n                            Math.round(el.scrollLeft) ===\r\n                            0 && e.deltaY > 0\r\n                    )\r\n                ) {\r\n                    e.preventDefault();\r\n                }\r\n                el.scrollTo({\r\n                    left: el.scrollLeft + e.deltaY,\r\n                });\r\n            };\r\n            el.addEventListener(\"wheel\", onWheel);\r\n            return () => el.removeEventListener(\"wheel\", onWheel);\r\n        }\r\n    }, []);\r\n    return elRef;\r\n};\r\n\r\nexport default useHorizontalScroll;\r\n","import React from \"react\";\r\n\r\nconst ToggleButton = ({ handleClick, active }) => {\r\n    return (\r\n        <div className=\"toggle-button-group\">\r\n            <button\r\n                className={`toggle-btn movie-toggle ${\r\n                    active === \"movie\" ? \"active\" : \"\"\r\n                }`}\r\n                onClick={handleClick}\r\n                disabled={active === \"movie\"}\r\n            >\r\n                Movie\r\n            </button>\r\n            <button\r\n                className={`toggle-btn tv-toggle ${\r\n                    active === \"tv\" ? \"active\" : \"\"\r\n                }`}\r\n                onClick={handleClick}\r\n                disabled={active === \"tv\"}\r\n            >\r\n                TV\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToggleButton;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar } from \"react-icons/ai\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst RenderedCard = ({\r\n    found,\r\n    imgSrc,\r\n    linkTo,\r\n    title,\r\n    vote,\r\n    removeCat,\r\n    removeID,\r\n    addCat,\r\n    addID,\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList } = useGlobalContext();\r\n\r\n    return (\r\n        <div className=\"render-card\">\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${imgSrc}`}\r\n                alt=\"\"\r\n                className=\"render-img\"\r\n            />\r\n            <Link to={linkTo} className=\"render-card-link\">\r\n                <h3>{title}</h3>\r\n            </Link>\r\n            <p className=\"render-vote\">\r\n                <AiFillStar className=\"render-icon\" />\r\n                {vote}\r\n            </p>\r\n            <button\r\n                className=\"remove-from-wishlist\"\r\n                onClick={() => {\r\n                    found\r\n                        ? removeFromWatchList(removeCat, removeID)\r\n                        : addToWatchList(addCat, addID);\r\n                }}\r\n            >\r\n                {found ? (\r\n                    <IoMdRemoveCircleOutline\r\n                        className=\"remove-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <IoMdAddCircleOutline\r\n                        className=\"add-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RenderedCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport useHorizontalScroll from \"../../hooks/useHorizontalScroll\";\r\nimport ToggleButton from \"./ToggleButton/toggleButton\";\r\nimport RenderedCard from \"./RenderedCard/renderedCard\";\r\n\r\nconst Homepage = () => {\r\n    const { watchList, setWatchList, isMovieInWatchlist, isTvShowInWatchlist } =\r\n        useGlobalContext();\r\n    const [popularData, setPopularData] = useState({\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n    });\r\n    const [topRatedData, setTopRatedData] = useState({\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n    });\r\n\r\n    const popScrollRef = useHorizontalScroll(false);\r\n    const topScrollRef = useHorizontalScroll(false);\r\n    const watchScrollRef = useHorizontalScroll(false);\r\n\r\n    const getPopularMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/popular?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPopularData((prev) => {\r\n            return { ...prev, movie: data.results };\r\n        });\r\n    };\r\n\r\n    const getPopularTVData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/popular?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPopularData((prev) => {\r\n            return { ...prev, tv: data.results };\r\n        });\r\n    };\r\n\r\n    const getTopRatedMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/top_rated?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTopRatedData((prev) => {\r\n            return { ...prev, movie: data.results };\r\n        });\r\n    };\r\n\r\n    const getTopRatedTVData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/top_rated?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTopRatedData((prev) => {\r\n            return { ...prev, tv: data.results };\r\n        });\r\n    };\r\n\r\n    const togglePopularCategory = () => {\r\n        setPopularData({\r\n            ...popularData,\r\n            category: popularData.category === \"movie\" ? \"tv\" : \"movie\",\r\n        });\r\n    };\r\n\r\n    const toggleTopRatedCategory = () => {\r\n        setTopRatedData({\r\n            ...topRatedData,\r\n            category: topRatedData.category === \"movie\" ? \"tv\" : \"movie\",\r\n        });\r\n    };\r\n\r\n    const toggleWatchlistCategory = () => {\r\n        setWatchList({\r\n            ...watchList,\r\n            category: watchList.category === \"movie\" ? \"tv\" : \"movie\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPopularMovieData();\r\n        getPopularTVData();\r\n        getTopRatedMovieData();\r\n        getTopRatedTVData();\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"homepage\">\r\n            <section id=\"popular\" className=\"section\">\r\n                <h2>What's Popular</h2>\r\n                <ToggleButton\r\n                    handleClick={togglePopularCategory}\r\n                    active={popularData.category}\r\n                />\r\n                <div\r\n                    id=\"popular-container\"\r\n                    className=\"homepage-render-container\"\r\n                    ref={popScrollRef}\r\n                >\r\n                    {popularData.category === \"movie\" ? (\r\n                        popularData.movie.map((movie) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    found={isMovieInWatchlist(movie.id)}\r\n                                    imgSrc={movie.poster_path}\r\n                                    linkTo={`/result/movie/${movie.id}`}\r\n                                    title={movie.title}\r\n                                    vote={movie.vote_average}\r\n                                    removeCat={\"movie\"}\r\n                                    removeID={movie.id}\r\n                                    addCat={\"movie\"}\r\n                                    addID={movie}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : popularData.category === \"tv\" ? (\r\n                        popularData.tv.map((tv) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={tv.id}\r\n                                    id={tv.id}\r\n                                    found={isTvShowInWatchlist(tv.id)}\r\n                                    imgSrc={tv.poster_path}\r\n                                    linkTo={`/result/tv/${tv.id}`}\r\n                                    title={tv.name}\r\n                                    vote={tv.vote_average}\r\n                                    removeCat={\"tv\"}\r\n                                    removeID={tv.id}\r\n                                    addCat={\"tv\"}\r\n                                    addID={tv}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n            </section>\r\n            <section id=\"rated\" className=\"section\">\r\n                <h2>Top Rated</h2>\r\n                <ToggleButton\r\n                    handleClick={toggleTopRatedCategory}\r\n                    active={topRatedData.category}\r\n                />\r\n                <div\r\n                    id=\"top-rated-container\"\r\n                    className=\"homepage-render-container\"\r\n                    ref={topScrollRef}\r\n                >\r\n                    {topRatedData.category === \"movie\" ? (\r\n                        topRatedData.movie.map((movie) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    found={isMovieInWatchlist(movie.id)}\r\n                                    imgSrc={movie.poster_path}\r\n                                    linkTo={`/result/movie/${movie.id}`}\r\n                                    title={movie.title}\r\n                                    vote={movie.vote_average}\r\n                                    removeCat={\"movie\"}\r\n                                    removeID={movie.id}\r\n                                    addCat={\"movie\"}\r\n                                    addID={movie}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : topRatedData.category === \"tv\" ? (\r\n                        topRatedData.tv.map((tv) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={tv.id}\r\n                                    id={tv.id}\r\n                                    found={isTvShowInWatchlist(tv.id)}\r\n                                    imgSrc={tv.poster_path}\r\n                                    linkTo={`/result/tv/${tv.id}`}\r\n                                    title={tv.name}\r\n                                    vote={tv.vote_average}\r\n                                    removeCat={\"tv\"}\r\n                                    removeID={tv.id}\r\n                                    addCat={\"tv\"}\r\n                                    addID={tv}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n            </section>\r\n            <section id=\"watchlist\" className=\"section\">\r\n                <h2>Watchlist</h2>\r\n                <ToggleButton\r\n                    handleClick={toggleWatchlistCategory}\r\n                    active={watchList.category}\r\n                />\r\n                <div\r\n                    id=\"watchlist-container\"\r\n                    className=\"homepage-render-container\"\r\n                    ref={watchScrollRef}\r\n                >\r\n                    {(watchList.category === \"movie\" &&\r\n                        !watchList.movie.length) ||\r\n                    (watchList.category === \"tv\" && !watchList.tv.length) ? (\r\n                        <div id=\"watchlist-empty\">\r\n                            <h2>Your Watchlist is Empty...</h2>\r\n                        </div>\r\n                    ) : watchList.category === \"movie\" ? (\r\n                        watchList.movie.map((item) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={item.id}\r\n                                    id={item.id}\r\n                                    found={isMovieInWatchlist(item.id)}\r\n                                    imgSrc={item.poster_path}\r\n                                    linkTo={`/result/movie/${item.id}`}\r\n                                    title={item.title}\r\n                                    vote={item.vote_average}\r\n                                    removeCat={\"movie\"}\r\n                                    removeID={item.id}\r\n                                    addCat={\"movie\"}\r\n                                    addID={item}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : watchList.category === \"tv\" ? (\r\n                        watchList.tv.map((item) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={item.id}\r\n                                    id={item.id}\r\n                                    found={isTvShowInWatchlist(item.id)}\r\n                                    imgSrc={item.poster_path}\r\n                                    linkTo={`/result/tv/${item.id}`}\r\n                                    title={item.name}\r\n                                    vote={item.vote_average}\r\n                                    removeCat={\"tv\"}\r\n                                    removeID={item.id}\r\n                                    addCat={\"tv\"}\r\n                                    addID={item}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Homepage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport { GoSearch } from \"react-icons/go\";\r\n\r\nconst Searchbar = () => {\r\n    const [searchTitle, setSearchTitle] = useState(\"\");\r\n    const [category, setCategory] = useState(\"movie\");\r\n\r\n    const {\r\n        search,\r\n        trendingData,\r\n        setTrendingData,\r\n        setSearchResults,\r\n        searchResults,\r\n    } = useGlobalContext();\r\n\r\n    useEffect(() => {\r\n        setTrendingData({ ...trendingData, type: category });\r\n    }, [category]);\r\n\r\n    return (\r\n        <form id=\"title-searchbar\">\r\n            <div className=\"title-bar\">\r\n                <div className=\"search-input-container\">\r\n                    <input\r\n                        id=\"title-input\"\r\n                        type=\"text\"\r\n                        value={searchTitle}\r\n                        placeholder=\"Search for a Title\"\r\n                        onChange={(e) => {\r\n                            setSearchTitle(e.target.value);\r\n                        }}\r\n                    />\r\n                    <button\r\n                        id=\"search-btn\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => {\r\n                            if (searchTitle === \"\") {\r\n                                alert(\"Please Enter Title\");\r\n                            } else {\r\n                                e.preventDefault();\r\n                                search(category, searchTitle);\r\n                                setSearchTitle(\"\");\r\n                            }\r\n                        }}\r\n                    >\r\n                        <GoSearch className=\"search-btn-icon\" />\r\n                    </button>\r\n                </div>\r\n                <div className=\"category-btn-container\">\r\n                    <button\r\n                        id=\"category-movie-btn\"\r\n                        className={`category-btn category-movie-btn ${\r\n                            category === \"movie\" ? \"category-active\" : \"\"\r\n                        }`}\r\n                        onClick={() => {\r\n                            setCategory(\"movie\");\r\n                            setSearchResults({\r\n                                ...searchResults,\r\n                                category: \"movie\",\r\n                            });\r\n                        }}\r\n                    >\r\n                        Movie\r\n                    </button>\r\n                    <button\r\n                        id=\"category-tv-btn\"\r\n                        className={`category-btn category-tv-btn ${\r\n                            category === \"tv\" ? \"category-active\" : \"\"\r\n                        }`}\r\n                        onClick={() => {\r\n                            setCategory(\"tv\");\r\n                            setSearchResults({\r\n                                ...searchResults,\r\n                                category: \"tv\",\r\n                            });\r\n                        }}\r\n                    >\r\n                        TV\r\n                    </button>\r\n                    <button\r\n                        id=\"category-people-btn\"\r\n                        className={`category-btn category-people-btn ${\r\n                            category === \"people\" ? \"category-active\" : \"\"\r\n                        }`}\r\n                        onClick={() => {\r\n                            setCategory(\"people\");\r\n                            setSearchResults({\r\n                                ...searchResults,\r\n                                category: \"people\",\r\n                            });\r\n                        }}\r\n                    >\r\n                        Person\r\n                    </button>\r\n                </div>\r\n                <button\r\n                    id=\"clear-search-btn\"\r\n                    onClick={() => {\r\n                        setSearchResults({\r\n                            category: \"movie\",\r\n                            movie: [],\r\n                            tv: [],\r\n                            people: [],\r\n                        });\r\n                    }}\r\n                >\r\n                    Clear\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Searchbar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AiOutlineFileImage } from \"react-icons/ai\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst MovieTVResultData = ({\r\n    id,\r\n    linkTo,\r\n    img,\r\n    title,\r\n    release,\r\n    overview,\r\n    type,\r\n    found,\r\n    vote,\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList, convertDate } =\r\n        useGlobalContext();\r\n\r\n    const obj = {\r\n        id: id,\r\n        title: title,\r\n        poster_path: img,\r\n        vote_average: vote,\r\n    };\r\n\r\n    return (\r\n        <div className=\"search-results\">\r\n            <Link to={linkTo} className=\"image-link-container\">\r\n                {img === null ? (\r\n                    <div className=\"search-img\">\r\n                        <AiOutlineFileImage\r\n                            className=\"btn-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <img\r\n                        className=\"search-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${img}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n            </Link>\r\n            <div className=\"search-info\">\r\n                <Link to={linkTo} className=\"search-title\">\r\n                    {title}\r\n                </Link>\r\n                <div className=\"search-release-overview-container\">\r\n                    <p className=\"search-release-date\">\r\n                        {convertDate(release)}\r\n                    </p>\r\n                    <p className=\"search-overview\">{overview}</p>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button\r\n                    className=\"remove-from-wishlist\"\r\n                    onClick={() => {\r\n                        found\r\n                            ? removeFromWatchList(type, id)\r\n                            : addToWatchList(type, obj);\r\n                    }}\r\n                >\r\n                    {found ? (\r\n                        <IoMdRemoveCircleOutline\r\n                            className=\"remove-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    ) : (\r\n                        <IoMdAddCircleOutline\r\n                            className=\"add-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    )}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieTVResultData;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AiOutlineFileImage } from \"react-icons/ai\";\r\n\r\nconst PeopleResultData = ({ person }) => {\r\n    return (\r\n        <div className=\"person-search-results\">\r\n            <Link\r\n                to={`/result/people/${person.id}`}\r\n                className=\"person-image-container\"\r\n            >\r\n                {person.profile_path === null ? (\r\n                    <AiOutlineFileImage\r\n                        className=\"btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <img\r\n                        className=\"person-search-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${person.profile_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n            </Link>\r\n            <div className=\"person-search-info\">\r\n                <Link\r\n                    to={`/result/people/${person.id}`}\r\n                    className=\"person-name\"\r\n                >\r\n                    {person.name}\r\n                </Link>\r\n                <p className=\"person-known-for\">\r\n                    {person.known_for_department}\r\n                </p>\r\n                {person.known_for.map((role) => {\r\n                    return (\r\n                        <div key={role.id}>\r\n                            <p>{role.title}</p>\r\n                            <p>{role.release_date}</p>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PeopleResultData;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst TrendingData = ({ title, img, id, link }) => {\r\n    return (\r\n        <div className=\"trending-tile\">\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${img}`}\r\n                alt=\"\"\r\n                className=\"trending-img\"\r\n            />\r\n            <Link to={`/result/${link}/${id}`} className=\"trending-link\">\r\n                <h3 className=\"trending-title\">{title}</h3>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TrendingData;\r\n","import React, { useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport MovieTVResultData from \"./SearchResultsCard/movietvresultdata\";\r\nimport PeopleResultData from \"./SearchResultsCard/peopleresultdata\";\r\nimport useHorizontalScroll from \"../../hooks/useHorizontalScroll\";\r\nimport TrendingData from \"./SearchTrending/trendingdata\";\r\n\r\nconst SearchResults = () => {\r\n    const {\r\n        searchResults,\r\n        trendingData,\r\n        setTrendingData,\r\n        isMovieInWatchlist,\r\n        isTvShowInWatchlist,\r\n    } = useGlobalContext();\r\n\r\n    const movieTrendingRef = useHorizontalScroll(false);\r\n    const tvTrendingRef = useHorizontalScroll(false);\r\n    const peopleTrendingRef = useHorizontalScroll(false);\r\n\r\n    const getTrendingMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/movie/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n    const getTrendingTVData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/tv/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n    const getTrendingPeopleData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/person/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n\r\n    const getAllTrending = async () => {\r\n        const obj = {\r\n            type: \"movie\",\r\n            movie: await getTrendingMovieData(),\r\n            tv: await getTrendingTVData(),\r\n            person: await getTrendingPeopleData(),\r\n        };\r\n        setTrendingData(obj);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllTrending();\r\n    }, []);\r\n\r\n    switch (trendingData.type) {\r\n        case \"movie\":\r\n            if (searchResults.movie.length === 0) {\r\n                return (\r\n                    <div className=\"trending-movie-container\">\r\n                        <h2>Trending Movies</h2>\r\n                        <div\r\n                            className=\"trending-data-container\"\r\n                            ref={movieTrendingRef}\r\n                        >\r\n                            {trendingData.movie.map((film) => {\r\n                                return (\r\n                                    <TrendingData\r\n                                        key={film.id}\r\n                                        id={film.id}\r\n                                        title={film.title}\r\n                                        img={film.poster_path}\r\n                                        link={\"movie\"}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"search-results-container\">\r\n                        {searchResults.movie.map((movie) => {\r\n                            return (\r\n                                <MovieTVResultData\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    found={isMovieInWatchlist(movie.id)}\r\n                                    linkTo={`/result/movie/${movie.id}`}\r\n                                    img={movie.poster_path}\r\n                                    title={movie.title}\r\n                                    release={movie.release_date}\r\n                                    overview={movie.overview}\r\n                                    type={\"movie\"}\r\n                                    vote={movie.vote_average}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                );\r\n            }\r\n        case \"tv\":\r\n            if (searchResults.tv.length === 0) {\r\n                return (\r\n                    <div className=\"trending-movie-container\">\r\n                        <h2>Trending TV Shows</h2>\r\n                        <div\r\n                            className=\"trending-data-container\"\r\n                            ref={tvTrendingRef}\r\n                        >\r\n                            {trendingData.tv.map((show) => {\r\n                                return (\r\n                                    <TrendingData\r\n                                        key={show.id}\r\n                                        id={show.id}\r\n                                        title={show.name}\r\n                                        img={show.poster_path}\r\n                                        link={\"tv\"}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"search-results-container\">\r\n                        {searchResults.tv.map((tvshow) => {\r\n                            return (\r\n                                <MovieTVResultData\r\n                                    key={tvshow.id}\r\n                                    id={tvshow.id}\r\n                                    found={isTvShowInWatchlist(tvshow.id)}\r\n                                    linkTo={`/result/tv/${tvshow.id}`}\r\n                                    img={tvshow.poster_path}\r\n                                    title={tvshow.name}\r\n                                    release={tvshow.first_air_date}\r\n                                    overview={tvshow.overview}\r\n                                    type={\"tv\"}\r\n                                    vote={tvshow.vote_average}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                );\r\n            }\r\n        case \"people\":\r\n            if (searchResults.people.length === 0) {\r\n                return (\r\n                    <div className=\"trending-movie-container\">\r\n                        <h2>Trending People</h2>\r\n                        <div\r\n                            className=\"trending-data-container\"\r\n                            ref={peopleTrendingRef}\r\n                        >\r\n                            {trendingData.person.map((peep) => {\r\n                                return (\r\n                                    <TrendingData\r\n                                        key={peep.id}\r\n                                        id={peep.id}\r\n                                        title={peep.name}\r\n                                        img={peep.profile_path}\r\n                                        link={\"people\"}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"people-search-results-container\">\r\n                        {searchResults.people.map((item, index) => {\r\n                            return (\r\n                                <PeopleResultData\r\n                                    key={item.id}\r\n                                    index={index}\r\n                                    person={item}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                );\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n};\r\n\r\nexport default SearchResults;\r\n","import React from \"react\";\r\n\r\nconst FullScreenReview = ({ author, written, review }) => {\r\n    return (\r\n        <div className=\"fullscreen-review\">\r\n            <h4>A review by {author}</h4>\r\n            <h5>\r\n                <i>\r\n                    Written by {author} on {written}\r\n                </i>\r\n            </h5>\r\n            <p className=\"review-content\">{review}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FullScreenReview;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar, AiOutlineFileImage } from \"react-icons/ai\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport FullScreenReview from \"./fullscreenreview/fullscreenreview\";\r\n\r\nconst MovieFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [movieData, setMovieData] = useState({});\r\n    const [movieReviewData, setMovieReviewData] = useState({});\r\n    const [movieCreditData, setMovieCreditData] = useState({});\r\n    const [toggle, setToggle] = useState({ category: \"cast\" });\r\n    const {\r\n        addToWatchList,\r\n        removeFromWatchList,\r\n        isMovieInWatchlist,\r\n        convertDate,\r\n    } = useGlobalContext();\r\n\r\n    const getMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieData(data);\r\n    };\r\n\r\n    const getMovieReview = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieReviewData(data);\r\n    };\r\n\r\n    const getMovieCredit = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}/credits?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieCreditData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getMovieData();\r\n        getMovieReview();\r\n        getMovieCredit();\r\n    }, []);\r\n\r\n    const found = isMovieInWatchlist(movieData.id);\r\n\r\n    return (\r\n        <div\r\n            className=\"fullscreen\"\r\n            // style={{\r\n            //     backgroundImage:\r\n            //         \"url(\" +\r\n            //         `http://image.tmdb.org/t/p/w500/${movieData.backdrop_path}` +\r\n            //         \")\",\r\n            //     backgroundSize: \"cover\",\r\n            //     backgroundPosition: \"center\",\r\n            // }}\r\n        >\r\n            <div className=\"fullscreen-card\">\r\n                <img\r\n                    className=\"fullscreen-img\"\r\n                    src={`https://image.tmdb.org/t/p/w500/${movieData.poster_path}`}\r\n                    alt=\"\"\r\n                />\r\n                <section className=\"fullscreen-section\">\r\n                    <section className=\"fullscreen-info\">\r\n                        <h1 className=\"fullscreen-title\">{movieData.title}</h1>\r\n                        <div className=\"fullscreen-list-info\">\r\n                            <p className=\"fullscreen-release-date\">\r\n                                {convertDate(movieData.release_date)}\r\n                            </p>\r\n                            <div className=\"ball\"></div>\r\n                            <div className=\"fullscreen-genre\">\r\n                                {movieData.genres !== undefined ? (\r\n                                    movieData.genres.map((type) => {\r\n                                        return <p key={type.id}>{type.name}</p>;\r\n                                    })\r\n                                ) : (\r\n                                    <p></p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"ball\"></div>\r\n                            <p>{movieData.runtime} mins</p>\r\n                        </div>\r\n                        <div className=\"fullscreen-rating\">\r\n                            <h4 className=\"average-score-title\">\r\n                                Average Score:\r\n                            </h4>\r\n                            <p className=\"fullscreen-vote\">\r\n                                <AiFillStar className=\"render-icon\" />\r\n                                {movieData.vote_average}\r\n                            </p>\r\n                            <button\r\n                                className=\"add-remove-button\"\r\n                                onClick={() => {\r\n                                    found\r\n                                        ? removeFromWatchList(\r\n                                              \"movie\",\r\n                                              movieData.id\r\n                                          )\r\n                                        : addToWatchList(\"movie\", movieData);\r\n                                }}\r\n                            >\r\n                                {found ? (\r\n                                    <IoMdRemoveCircleOutline\r\n                                        className=\"remove-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                ) : (\r\n                                    <IoMdAddCircleOutline\r\n                                        className=\"add-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                )}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"fullscreen-production\">\r\n                            {movieData.production_companies !== undefined ? (\r\n                                movieData.production_companies.map(\r\n                                    (company) => {\r\n                                        return (\r\n                                            <p\r\n                                                key={company.id}\r\n                                                className=\"company-name\"\r\n                                            >\r\n                                                {company.name}\r\n                                            </p>\r\n                                        );\r\n                                    }\r\n                                )\r\n                            ) : (\r\n                                <p></p>\r\n                            )}\r\n                        </div>\r\n                        <h4 className=\"fullscreen-tagline\">\r\n                            <i>{movieData.tagline}</i>\r\n                        </h4>\r\n                        <div className=\"fullscreen-overview\">\r\n                            <h3>Overview</h3>\r\n                            <p>{movieData.overview}</p>\r\n                        </div>\r\n                    </section>\r\n                    <section className=\"review-cast-btn-container\">\r\n                        <div className=\"review-cast-toggle-button\">\r\n                            <button\r\n                                id=\"cast-btn\"\r\n                                className={`fullscreen-toggle-btn cast-btn ${\r\n                                    toggle.category === \"cast\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => setToggle({ category: \"cast\" })}\r\n                            >\r\n                                Cast\r\n                            </button>\r\n                            <button\r\n                                id=\"review-btn\"\r\n                                className={`fullscreen-toggle-btn review-btn ${\r\n                                    toggle.category === \"review\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() =>\r\n                                    setToggle({ category: \"review\" })\r\n                                }\r\n                            >\r\n                                Reviews\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    {toggle.category === \"review\" ? (\r\n                        movieReviewData.results !== undefined ? (\r\n                            <div className=\"fullscreen-reviews\">\r\n                                {movieReviewData.results.map(\r\n                                    (result, index) => {\r\n                                        return (\r\n                                            <FullScreenReview\r\n                                                key={index}\r\n                                                author={result.author}\r\n                                                written={convertDate(\r\n                                                    result.created_at\r\n                                                )}\r\n                                                review={result.content}\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                )}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : toggle.category === \"cast\" ? (\r\n                        movieCreditData.cast !== undefined ? (\r\n                            <div className=\"fullscreen-cast\">\r\n                                {movieCreditData.cast.map((cast) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={cast.id}\r\n                                            className=\"cast-credit\"\r\n                                        >\r\n                                            {cast.profile_path === null ? (\r\n                                                <div className=\"cast-btn-icon-container\">\r\n                                                    <AiOutlineFileImage\r\n                                                        className=\"cast-btn-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                <img\r\n                                                    className=\"cast-img\"\r\n                                                    src={`https://image.tmdb.org/t/p/w500/${cast.profile_path}`}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                            )}\r\n\r\n                                            <Link\r\n                                                to={`/result/people/${cast.id}`}\r\n                                                className=\"cast-name\"\r\n                                            >\r\n                                                {cast.character}\r\n                                            </Link>\r\n                                            <p className=\"cast-role\">\r\n                                                {cast.name}\r\n                                            </p>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </section>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieFullScreenResult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport FullScreenReview from \"./fullscreenreview/fullscreenreview\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar, AiOutlineFileImage } from \"react-icons/ai\";\r\n\r\nconst TvFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [tvData, setTvData] = useState({});\r\n    const [tvResultData, setTvResultData] = useState({});\r\n    const [tvCreditData, setTvCreditData] = useState({});\r\n    const [toggle, setToggle] = useState({ category: \"cast\" });\r\n    const {\r\n        addToWatchList,\r\n        removeFromWatchList,\r\n        isTvShowInWatchlist,\r\n        convertDate,\r\n    } = useGlobalContext();\r\n\r\n    const getTvData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvData(data);\r\n    };\r\n\r\n    const getTvReview = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}/reviews?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvResultData(data);\r\n    };\r\n\r\n    const getMovieCredit = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}/credits?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvCreditData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getTvData();\r\n        getTvReview();\r\n        getMovieCredit();\r\n    }, []);\r\n\r\n    const found = isTvShowInWatchlist(tvData.id);\r\n\r\n    return (\r\n        <div\r\n            className=\"fullscreen\"\r\n            // style={{\r\n            //     backgroundImage:\r\n            //         \"url(\" +\r\n            //         `http://image.tmdb.org/t/p/w500/${tvData.backdrop_path}` +\r\n            //         \")\",\r\n            //     backgroundSize: \"cover\",\r\n            //     backgroundPosition: \"center\",\r\n            // }}\r\n        >\r\n            <div className=\"fullscreen-card\">\r\n                <img\r\n                    className=\"fullscreen-img\"\r\n                    src={`https://image.tmdb.org/t/p/w500/${tvData.poster_path}`}\r\n                    alt=\"\"\r\n                />\r\n                <section className=\"fullscreen-section\">\r\n                    <section className=\"fullscreen-info\">\r\n                        <h1 className=\"fullscreen-title\">{tvData.name}</h1>\r\n                        <div className=\"fullscreen-list-info\">\r\n                            <p className=\"fullscreen-release-date\">\r\n                                {convertDate(tvData.release_date)}\r\n                            </p>\r\n                            <div className=\"ball\"></div>\r\n                            <div className=\"fullscreen-genre\">\r\n                                {tvData.genres !== undefined ? (\r\n                                    tvData.genres.map((type) => {\r\n                                        return <p key={type.id}>{type.name}</p>;\r\n                                    })\r\n                                ) : (\r\n                                    <p></p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"ball\"></div>\r\n                            <p>{tvData.runtime} mins</p>\r\n                        </div>\r\n                        <div className=\"fullscreen-rating\">\r\n                            <h4 className=\"average-score-title\">\r\n                                Average Score:\r\n                            </h4>\r\n                            <p className=\"fullscreen-vote\">\r\n                                <AiFillStar className=\"render-icon\" />\r\n                                {tvData.vote_average}\r\n                            </p>\r\n                            <button\r\n                                className=\"add-remove-button\"\r\n                                onClick={() => {\r\n                                    found\r\n                                        ? removeFromWatchList(\"tv\", tvData.id)\r\n                                        : addToWatchList(\"tv\", tvData);\r\n                                }}\r\n                            >\r\n                                {found ? (\r\n                                    <IoMdRemoveCircleOutline\r\n                                        className=\"remove-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                ) : (\r\n                                    <IoMdAddCircleOutline\r\n                                        className=\"add-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                )}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"fullscreen-production\">\r\n                            {tvData.production_companies !== undefined ? (\r\n                                tvData.production_companies.map((company) => {\r\n                                    return (\r\n                                        <p\r\n                                            key={company.id}\r\n                                            className=\"company-name\"\r\n                                        >\r\n                                            {company.name}\r\n                                        </p>\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <p></p>\r\n                            )}\r\n                        </div>\r\n                        <h4 className=\"fullscreen-tagline\">\r\n                            <i>{tvData.tagline}</i>\r\n                        </h4>\r\n                        <div className=\"fullscreen-overview\">\r\n                            <h3>Overview</h3>\r\n                            <p>{tvData.overview}</p>\r\n                        </div>\r\n                    </section>\r\n                    <section className=\"review-cast-btn-container\">\r\n                        <div className=\"review-cast-toggle-button\">\r\n                            <button\r\n                                id=\"cast-btn\"\r\n                                className={`fullscreen-toggle-btn cast-btn ${\r\n                                    toggle.category === \"cast\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => setToggle({ category: \"cast\" })}\r\n                            >\r\n                                Cast\r\n                            </button>\r\n                            <button\r\n                                id=\"review-btn\"\r\n                                className={`fullscreen-toggle-btn review-btn ${\r\n                                    toggle.category === \"review\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() =>\r\n                                    setToggle({ category: \"review\" })\r\n                                }\r\n                            >\r\n                                Reviews\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    {toggle.category === \"review\" ? (\r\n                        tvResultData.results !== undefined ? (\r\n                            <div className=\"fullscreen-reviews\">\r\n                                {tvResultData.results.map((result, index) => {\r\n                                    return (\r\n                                        <FullScreenReview\r\n                                            key={index}\r\n                                            author={result.author}\r\n                                            written={convertDate(\r\n                                                result.created_at\r\n                                            )}\r\n                                            review={result.content}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : toggle.category === \"cast\" ? (\r\n                        tvCreditData.cast !== undefined ? (\r\n                            <div className=\"fullscreen-cast\">\r\n                                {tvCreditData.cast.map((cast) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={cast.id}\r\n                                            className=\"cast-credit\"\r\n                                        >\r\n                                            {cast.profile_path === null ? (\r\n                                                <div className=\"cast-btn-icon-container\">\r\n                                                    <AiOutlineFileImage\r\n                                                        className=\"cast-btn-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                <img\r\n                                                    className=\"cast-img\"\r\n                                                    src={`https://image.tmdb.org/t/p/w500/${cast.profile_path}`}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                            )}\r\n\r\n                                            <Link\r\n                                                to={`/result/people/${cast.id}`}\r\n                                                className=\"cast-name\"\r\n                                            >\r\n                                                {cast.character}\r\n                                            </Link>\r\n                                            <p className=\"cast-role\">\r\n                                                {cast.name}\r\n                                            </p>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </section>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TvFullScreenResult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport { AiOutlineFileImage } from \"react-icons/ai\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst PeopleFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [peopleData, setPeopleData] = useState({});\r\n    const [peopleCreditData, setPeopleCreditData] = useState({});\r\n    const [peopleImageData, setPeopleImageData] = useState({});\r\n    const [toggle, setToggle] = useState({ category: \"credit\" });\r\n\r\n    const { convertDate } = useGlobalContext();\r\n\r\n    const getPeopleData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/person/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPeopleData(data);\r\n    };\r\n\r\n    const getPeopleCreditData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/person/${id}/combined_credits?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPeopleCreditData(data);\r\n    };\r\n\r\n    const getPeopleImageData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/person/${id}/images?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        setPeopleImageData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPeopleData();\r\n        getPeopleCreditData();\r\n        getPeopleImageData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"fullscreen\">\r\n            <div className=\"fullscreen-card\">\r\n                {peopleData.profile_path === null ? (\r\n                    <div className=\"fullscreen-img\">\r\n                        <AiOutlineFileImage\r\n                            className=\"cast-btn-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <img\r\n                        className=\"fullscreen-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${peopleData.profile_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n                <section className=\"person-fullscreen-section\">\r\n                    <section className=\"fullscreen-info\">\r\n                        <h1 className=\"fullscreen-title\">{peopleData.name}</h1>\r\n                        <section className=\"person-info\">\r\n                            <div className=\"person-info-div\">\r\n                                <h4 className=\"person-info-title\">\r\n                                    Birthdate:\r\n                                </h4>\r\n                                <p className=\"person-info-para\">\r\n                                    {convertDate(peopleData.birthday)}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"person-info-div\">\r\n                                <h4 className=\"person-info-title\">\r\n                                    Place of Birth:\r\n                                </h4>\r\n                                <p className=\"person-info-para\">\r\n                                    {peopleData.place_of_birth}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"person-info-div\">\r\n                                <h4 className=\"person-info-title\">\r\n                                    Known For:\r\n                                </h4>\r\n                                <p className=\"person-info-para\">\r\n                                    {peopleData.known_for_department}\r\n                                </p>\r\n                            </div>\r\n                        </section>\r\n                        <section className=\"person-biography\">\r\n                            <h3>Biography</h3>\r\n                            <p className=\"person-bio-content\">\r\n                                {peopleData.biography}\r\n                            </p>\r\n                        </section>\r\n                    </section>\r\n                    <section className=\"review-cast-btn-container\">\r\n                        <div className=\"review-cast-toggle-button\">\r\n                            <button\r\n                                id=\"cast-btn\"\r\n                                className={`fullscreen-toggle-btn cast-btn ${\r\n                                    toggle.category === \"credit\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() =>\r\n                                    setToggle({ category: \"credit\" })\r\n                                }\r\n                            >\r\n                                Movie\r\n                            </button>\r\n                            <button\r\n                                id=\"review-btn\"\r\n                                className={`fullscreen-toggle-btn review-btn ${\r\n                                    toggle.category === \"image\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => setToggle({ category: \"image\" })}\r\n                            >\r\n                                Images\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    {toggle.category === \"credit\" ? (\r\n                        <div className=\"person-fullscreen-cast\">\r\n                            {peopleCreditData.cast !== undefined ? (\r\n                                peopleCreditData.cast.map((cast, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={index}\r\n                                            className=\"person-credit\"\r\n                                        >\r\n                                            {cast.poster_path === null ? (\r\n                                                <div className=\"cast-btn-icon-container\">\r\n                                                    <AiOutlineFileImage\r\n                                                        className=\"cast-btn-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                <img\r\n                                                    className=\"person-credit-img\"\r\n                                                    src={`https://image.tmdb.org/t/p/w500/${cast.poster_path}`}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                            )}\r\n                                            <Link\r\n                                                to={`/result/movie/${cast.id}`}\r\n                                                className=\"cast-name\"\r\n                                            >\r\n                                                <p className=\"cast-name\">\r\n                                                    {cast.title}\r\n                                                </p>\r\n                                            </Link>\r\n                                            <p className=\"person-cast-role\">\r\n                                                {cast.character}\r\n                                            </p>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <div></div>\r\n                            )}\r\n                        </div>\r\n                    ) : toggle.category === \"image\" ? (\r\n                        <div className=\"person-fullscreen-images-container\">\r\n                            {peopleImageData.profiles !== null ? (\r\n                                peopleImageData.profiles.map((img, index) => {\r\n                                    return (\r\n                                        <img\r\n                                            className=\"person-img\"\r\n                                            src={`https://image.tmdb.org/t/p/w500/${img.file_path}`}\r\n                                            alt=\"\"\r\n                                        />\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <div></div>\r\n                            )}\r\n                        </div>\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </section>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PeopleFullScreenResult;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Navbar from \"./components/Navbar/navbar\";\r\nimport Homepage from \"./components/Homepage/homepage\";\r\nimport Searchbar from \"./components/Searchbar/searchbar\";\r\nimport SearchResults from \"./components/SearchResults/searchresults\";\r\nimport MovieFullScreenResult from \"./components/FullScreenResult/moviefullscreenresult\";\r\nimport TvFullScreenResult from \"./components/FullScreenResult/tvfullscreenresult\";\r\nimport PeopleFullScreenResult from \"./components/FullScreenResult/peoplefullscreenresults\";\r\nimport Watchlist from \"./components/Watchlist/watchlist\";\r\n// import Footer from \"./components/Navbar/footer\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <Router>\r\n            <div id=\"app-container\">\r\n                <Navbar />\r\n                <Switch>\r\n                    <Route path=\"/search\">\r\n                        <Searchbar />\r\n                        <SearchResults />\r\n                    </Route>\r\n                    <Route path=\"/result/movie/:id\">\r\n                        <MovieFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/result/tv/:id\">\r\n                        <TvFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/result/people/:id\">\r\n                        <PeopleFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/watchlist\">\r\n                        <Watchlist />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Homepage />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"./components/Navbar/navbar.css\";\r\nimport \"./components/Homepage/homepage.css\";\r\nimport \"./components/Searchbar/searchbar.css\";\r\nimport \"./components/FullScreenResult/fullscreenresults.css\";\r\nimport \"./components/SearchResults/searchresults.css\";\r\nimport \"./components/Watchlist/watchlist.css\";\r\nimport App from \"./App\";\r\nimport { AppProvider } from \"./context\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <AppProvider>\r\n            <App />\r\n        </AppProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}