{"version":3,"sources":["hooks/useLocalStorage.js","context.js","components/Navbar/navbar.js","hooks/useHorizontalScroll.js","components/Homepage/ToggleButton/toggleButton.js","components/Homepage/RenderedCard/renderedCard.js","components/Homepage/homepage.js","components/Searchbar/searchbar.js","components/SearchResults/SearchResultsCard/movietvresultdata.js","components/SearchResults/SearchResultsCard/peopleresultdata.js","components/SearchResults/SearchTrending/trendingdata.js","components/SearchResults/searchresults.js","components/FullScreenResult/fullscreenreview/fullscreenreview.js","components/FullScreenResult/moviefullscreenresult.js","components/FullScreenResult/tvfullscreenresult.js","components/FullScreenResult/peoplefullscreenresults.js","components/Watchlist/WatchlistCard/watchlistcard.js","components/Watchlist/watchlist.js","App.js","index.js"],"names":["useLocalStorage","key","initialState","useState","retrieve","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","AppContext","React","createContext","AppProvider","children","category","movie","tv","people","searchResults","setSearchResults","watchList","setWatchList","type","person","trendingData","setTrendingData","isAdded","isRemoved","title","watchListAlert","setWatchListAlert","expandBiography","setExpandBiography","modalContent","setModalContent","movieCount","setMovieCount","tvCount","setTvCount","searchMovies","query","a","fetch","response","json","data","results","searchTVShows","searchPeople","search","timer","setTimeout","clearTimeout","length","Provider","value","addToWatchList","item","find","w","id","obj","poster_path","vote_average","name","removeFromWatchList","filter","isMovieInWatchlist","isTvShowInWatchlist","convertDate","info","Date","toLocaleString","day","month","year","useGlobalContext","useContext","Navbar","className","to","onClick","useHorizontalScroll","preventParentScrolling","elRef","useRef","el","current","onWheel","e","deltaY","preventDefault","scrollLeft","scrollWidth","clientWidth","Math","round","scrollTo","left","addEventListener","removeEventListener","ToggleButton","handleClick","active","disabled","RenderedCard","found","imgSrc","linkTo","vote","removeCat","removeID","addCat","addID","src","alt","focusable","Homepage","popularData","setPopularData","topRatedData","setTopRatedData","popScrollRef","topScrollRef","watchScrollRef","getPopularMovieData","prev","getPopularTVData","getTopRatedMovieData","getTopRatedTVData","ref","map","Searchbar","searchTitle","setSearchTitle","setCategory","placeholder","onChange","target","alert","MovieTVResultData","img","release","overview","PeopleResultData","profile_path","known_for_department","known_for","role","release_date","TrendingData","link","SearchResults","movieTrendingRef","tvTrendingRef","peopleTrendingRef","getTrendingMovieData","getTrendingTVData","getTrendingPeopleData","getAllTrending","film","show","tvshow","first_air_date","peep","index","FullScreenReview","author","written","review","MovieFullScreenResult","useParams","movieData","setMovieData","movieReviewData","setMovieReviewData","movieCreditData","setMovieCreditData","toggle","setToggle","getMovieData","getMovieReview","getMovieCredit","undefined","genres","runtime","production_companies","company","tagline","result","created_at","content","cast","character","TvFullScreenResult","tvData","setTvData","tvResultData","setTvResultData","tvCreditData","setTvCreditData","getTvData","getTvReview","PeopleFullScreenResult","peopleData","setPeopleData","peopleCreditData","setPeopleCreditData","peopleImageData","setPeopleImageData","getPeopleData","getPeopleCreditData","getPeopleImageData","birthday","place_of_birth","biography","profiles","file_path","WatchlistCard","Watchlist","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b9d4cdc.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useLocalStorage = (key, initialState) => {\r\n    const [state, setState] = useState(() => {\r\n        const retrieve = localStorage.getItem(key);\r\n        return retrieve ? JSON.parse(retrieve) : initialState;\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (state) {\r\n            localStorage.setItem(key, JSON.stringify(state));\r\n        }\r\n    }, [state]);\r\n\r\n    return [state, setState];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport useLocalStorage from \"./hooks/useLocalStorage\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n    const [searchResults, setSearchResults] = useState({\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n        people: [],\r\n    });\r\n    const [watchList, setWatchList] = useLocalStorage(\"Watchlist\", {\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n    });\r\n    const [trendingData, setTrendingData] = useState({\r\n        type: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n        person: [],\r\n    });\r\n    const [watchListAlert, setWatchListAlert] = useState({\r\n        isAdded: false,\r\n        isRemoved: false,\r\n        title: \"\",\r\n    });\r\n    const [expandBiography, setExpandBiography] = useState(false);\r\n    const [modalContent, setModalContent] = useState(\"\");\r\n    const [movieCount, setMovieCount] = useState(0);\r\n    const [tvCount, setTvCount] = useState(0);\r\n\r\n    const searchMovies = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/movie?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        setSearchResults({\r\n            ...searchResults,\r\n            category: \"movie\",\r\n            movie: data.results,\r\n        });\r\n    };\r\n\r\n    const searchTVShows = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/tv?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        setSearchResults({\r\n            ...searchResults,\r\n            category: \"tv\",\r\n            tv: data.results,\r\n        });\r\n    };\r\n\r\n    const searchPeople = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/person?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        setSearchResults({\r\n            ...searchResults,\r\n            category: \"people\",\r\n            people: data.results,\r\n        });\r\n    };\r\n\r\n    const search = async (category, query) => {\r\n        switch (category) {\r\n            case \"movie\":\r\n                searchMovies(query);\r\n                break;\r\n            case \"tv\":\r\n                searchTVShows(query);\r\n                break;\r\n            case \"people\":\r\n                searchPeople(query);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const convertDate = (info) => {\r\n        const date = new Date(info);\r\n        const string = date.toLocaleString(\"default\", {\r\n            day: \"numeric\",\r\n            month: \"long\",\r\n            year: \"numeric\",\r\n        });\r\n        return string;\r\n    };\r\n\r\n    const addToWatchList = (category, item) => {\r\n        if ([...watchList.movie, ...watchList.tv].find((w) => w.id === item.id))\r\n            return;\r\n        if (category === \"movie\") {\r\n            const obj = {\r\n                id: item.id,\r\n                title: item.title,\r\n                poster_path: item.poster_path,\r\n                vote_average: item.vote_average,\r\n            };\r\n            setWatchList({\r\n                ...watchList,\r\n                movie: [...watchList.movie, obj],\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: true,\r\n                isRemoved: false,\r\n                title: item.title,\r\n            });\r\n        } else if (category === \"tv\") {\r\n            const obj = {\r\n                id: item.id,\r\n                name: item.name,\r\n                poster_path: item.poster_path,\r\n                vote_average: item.vote_average,\r\n            };\r\n            setWatchList({\r\n                ...watchList,\r\n                tv: [...watchList.tv, obj],\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: true,\r\n                isRemoved: false,\r\n                title: item.name,\r\n            });\r\n        }\r\n    };\r\n\r\n    const removeFromWatchList = (category, id) => {\r\n        if (category === \"movie\") {\r\n            setWatchList({\r\n                ...watchList,\r\n                movie: watchList.movie.filter((item) => item.id !== id),\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: false,\r\n                isRemoved: true,\r\n                title: watchList.movie.find((item) => item.id === id).title,\r\n            });\r\n        } else if (category === \"tv\") {\r\n            setWatchList({\r\n                ...watchList,\r\n                tv: watchList.tv.filter((item) => item.id !== id),\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: false,\r\n                isRemoved: true,\r\n                title: watchList.tv.find((item) => item.id === id).name,\r\n            });\r\n        }\r\n    };\r\n\r\n    const isMovieInWatchlist = (id) => {\r\n        return watchList.movie.find((item) => item.id === id);\r\n    };\r\n    const isTvShowInWatchlist = (id) => {\r\n        return watchList.tv.find((item) => item.id === id);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setWatchListAlert({ isAdded: false, isRemoved: false, title: \"\" });\r\n        }, 3000);\r\n        return () => {\r\n            clearTimeout(timer);\r\n        };\r\n    }, [watchListAlert]);\r\n\r\n    useEffect(() => {\r\n        setMovieCount(watchList.movie.length);\r\n        setTvCount(watchList.tv.length);\r\n    }, [watchList]);\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                trendingData,\r\n                setTrendingData,\r\n                setSearchResults,\r\n                search,\r\n                searchResults,\r\n                watchList,\r\n                setWatchList,\r\n                addToWatchList,\r\n                removeFromWatchList,\r\n                isMovieInWatchlist,\r\n                isTvShowInWatchlist,\r\n                convertDate,\r\n                watchListAlert,\r\n                movieCount,\r\n                tvCount,\r\n                expandBiography,\r\n                setExpandBiography,\r\n                modalContent,\r\n                setModalContent,\r\n            }}\r\n        >\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GoSearch } from \"react-icons/go\";\r\nimport { useGlobalContext } from \"../../context\";\r\n\r\nconst Navbar = () => {\r\n    const {\r\n        watchListAlert,\r\n        setSearchResults,\r\n        setExpandBiography,\r\n        setModalContent,\r\n    } = useGlobalContext();\r\n    return (\r\n        <div>\r\n            <nav id=\"navbar\">\r\n                <ul id=\"navbar-list\">\r\n                    <li>\r\n                        <Link\r\n                            className=\"nav-link\"\r\n                            to=\"/\"\r\n                            onClick={() => {\r\n                                setSearchResults({\r\n                                    category: \"movie\",\r\n                                    movie: [],\r\n                                    tv: [],\r\n                                    people: [],\r\n                                });\r\n                                setExpandBiography(false);\r\n                                setModalContent(\"\");\r\n                            }}\r\n                        >\r\n                            Home\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link\r\n                            className=\"nav-link\"\r\n                            to=\"/watchlist\"\r\n                            onClick={() => {\r\n                                setExpandBiography(false);\r\n                                setModalContent(\"\");\r\n                            }}\r\n                        >\r\n                            Watchlist\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link\r\n                            className=\"nav-link\"\r\n                            to=\"/search\"\r\n                            onClick={() => {\r\n                                setExpandBiography(false);\r\n                                setModalContent(\"\");\r\n                            }}\r\n                        >\r\n                            <GoSearch className=\"link-icon\" />\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n            <div id=\"display\">\r\n                <div\r\n                    id=\"watchlist-alert\"\r\n                    className={\r\n                        watchListAlert.isAdded\r\n                            ? \"added\"\r\n                            : watchListAlert.isRemoved\r\n                            ? \"removed\"\r\n                            : \"\"\r\n                    }\r\n                >\r\n                    {watchListAlert.isAdded ? (\r\n                        <p>Added to Watchlist - {watchListAlert.title}</p>\r\n                    ) : watchListAlert.isRemoved ? (\r\n                        <p>Removed from Watchlist - {watchListAlert.title}</p>\r\n                    ) : (\r\n                        <p></p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nconst useHorizontalScroll = (preventParentScrolling = true) => {\r\n    const elRef = useRef();\r\n    useEffect(() => {\r\n        const el = elRef.current;\r\n        if (el) {\r\n            const onWheel = (e) => {\r\n                if (e.deltaY === 0) return;\r\n                if (preventParentScrolling === true) {\r\n                    e.preventDefault();\r\n                } else if (\r\n                    !(el.scrollLeft === 0 && e.deltaY < 0) &&\r\n                    !(\r\n                        el.scrollWidth -\r\n                            el.clientWidth -\r\n                            Math.round(el.scrollLeft) ===\r\n                            0 && e.deltaY > 0\r\n                    )\r\n                ) {\r\n                    e.preventDefault();\r\n                }\r\n                el.scrollTo({\r\n                    left: el.scrollLeft + e.deltaY,\r\n                });\r\n            };\r\n            el.addEventListener(\"wheel\", onWheel);\r\n            return () => el.removeEventListener(\"wheel\", onWheel);\r\n        }\r\n    }, []);\r\n    return elRef;\r\n};\r\n\r\nexport default useHorizontalScroll;\r\n","import React from \"react\";\r\n\r\nconst ToggleButton = ({ handleClick, active }) => {\r\n    return (\r\n        <div className=\"toggle-button-group\">\r\n            <button\r\n                className={`toggle-btn movie-toggle ${\r\n                    active === \"movie\" ? \"active\" : \"\"\r\n                }`}\r\n                onClick={handleClick}\r\n                disabled={active === \"movie\"}\r\n            >\r\n                Movie\r\n            </button>\r\n            <button\r\n                className={`toggle-btn tv-toggle ${\r\n                    active === \"tv\" ? \"active\" : \"\"\r\n                }`}\r\n                onClick={handleClick}\r\n                disabled={active === \"tv\"}\r\n            >\r\n                TV\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToggleButton;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar } from \"react-icons/ai\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst RenderedCard = ({\r\n    found,\r\n    imgSrc,\r\n    linkTo,\r\n    title,\r\n    vote,\r\n    removeCat,\r\n    removeID,\r\n    addCat,\r\n    addID,\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList } = useGlobalContext();\r\n\r\n    return (\r\n        <div className=\"render-card\">\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${imgSrc}`}\r\n                alt=\"\"\r\n                className=\"render-img\"\r\n            />\r\n            <Link to={linkTo} className=\"render-card-link\">\r\n                <h3>{title}</h3>\r\n            </Link>\r\n            <p className=\"render-vote\">\r\n                <AiFillStar className=\"render-icon\" />\r\n                {vote}\r\n            </p>\r\n            <button\r\n                className=\"remove-from-wishlist\"\r\n                onClick={() => {\r\n                    found\r\n                        ? removeFromWatchList(removeCat, removeID)\r\n                        : addToWatchList(addCat, addID);\r\n                }}\r\n            >\r\n                {found ? (\r\n                    <IoMdRemoveCircleOutline\r\n                        className=\"remove-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <IoMdAddCircleOutline\r\n                        className=\"add-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RenderedCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport useHorizontalScroll from \"../../hooks/useHorizontalScroll\";\r\nimport ToggleButton from \"./ToggleButton/toggleButton\";\r\nimport RenderedCard from \"./RenderedCard/renderedCard\";\r\n\r\nconst Homepage = () => {\r\n    const { watchList, setWatchList, isMovieInWatchlist, isTvShowInWatchlist } =\r\n        useGlobalContext();\r\n    const [popularData, setPopularData] = useState({\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n    });\r\n    const [topRatedData, setTopRatedData] = useState({\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n    });\r\n\r\n    const popScrollRef = useHorizontalScroll(false);\r\n    const topScrollRef = useHorizontalScroll(false);\r\n    const watchScrollRef = useHorizontalScroll(false);\r\n\r\n    const getPopularMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/popular?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPopularData((prev) => {\r\n            return { ...prev, movie: data.results };\r\n        });\r\n    };\r\n\r\n    const getPopularTVData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/popular?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPopularData((prev) => {\r\n            return { ...prev, tv: data.results };\r\n        });\r\n    };\r\n\r\n    const getTopRatedMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/top_rated?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTopRatedData((prev) => {\r\n            return { ...prev, movie: data.results };\r\n        });\r\n    };\r\n\r\n    const getTopRatedTVData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/top_rated?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTopRatedData((prev) => {\r\n            return { ...prev, tv: data.results };\r\n        });\r\n    };\r\n\r\n    const togglePopularCategory = () => {\r\n        setPopularData({\r\n            ...popularData,\r\n            category: popularData.category === \"movie\" ? \"tv\" : \"movie\",\r\n        });\r\n    };\r\n\r\n    const toggleTopRatedCategory = () => {\r\n        setTopRatedData({\r\n            ...topRatedData,\r\n            category: topRatedData.category === \"movie\" ? \"tv\" : \"movie\",\r\n        });\r\n    };\r\n\r\n    const toggleWatchlistCategory = () => {\r\n        setWatchList({\r\n            ...watchList,\r\n            category: watchList.category === \"movie\" ? \"tv\" : \"movie\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPopularMovieData();\r\n        getPopularTVData();\r\n        getTopRatedMovieData();\r\n        getTopRatedTVData();\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"homepage\">\r\n            <section id=\"popular\" className=\"section\">\r\n                <h2>What's Popular</h2>\r\n                <ToggleButton\r\n                    handleClick={togglePopularCategory}\r\n                    active={popularData.category}\r\n                />\r\n                <div\r\n                    id=\"popular-container\"\r\n                    className=\"homepage-render-container\"\r\n                    ref={popScrollRef}\r\n                >\r\n                    {popularData.category === \"movie\" ? (\r\n                        popularData.movie.map((movie) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    found={isMovieInWatchlist(movie.id)}\r\n                                    imgSrc={movie.poster_path}\r\n                                    linkTo={`/result/movie/${movie.id}`}\r\n                                    title={movie.title}\r\n                                    vote={movie.vote_average}\r\n                                    removeCat={\"movie\"}\r\n                                    removeID={movie.id}\r\n                                    addCat={\"movie\"}\r\n                                    addID={movie}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : popularData.category === \"tv\" ? (\r\n                        popularData.tv.map((tv) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={tv.id}\r\n                                    id={tv.id}\r\n                                    found={isTvShowInWatchlist(tv.id)}\r\n                                    imgSrc={tv.poster_path}\r\n                                    linkTo={`/result/tv/${tv.id}`}\r\n                                    title={tv.name}\r\n                                    vote={tv.vote_average}\r\n                                    removeCat={\"tv\"}\r\n                                    removeID={tv.id}\r\n                                    addCat={\"tv\"}\r\n                                    addID={tv}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n            </section>\r\n            <section id=\"rated\" className=\"section\">\r\n                <h2>Top Rated</h2>\r\n                <ToggleButton\r\n                    handleClick={toggleTopRatedCategory}\r\n                    active={topRatedData.category}\r\n                />\r\n                <div\r\n                    id=\"top-rated-container\"\r\n                    className=\"homepage-render-container\"\r\n                    ref={topScrollRef}\r\n                >\r\n                    {topRatedData.category === \"movie\" ? (\r\n                        topRatedData.movie.map((movie) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    found={isMovieInWatchlist(movie.id)}\r\n                                    imgSrc={movie.poster_path}\r\n                                    linkTo={`/result/movie/${movie.id}`}\r\n                                    title={movie.title}\r\n                                    vote={movie.vote_average}\r\n                                    removeCat={\"movie\"}\r\n                                    removeID={movie.id}\r\n                                    addCat={\"movie\"}\r\n                                    addID={movie}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : topRatedData.category === \"tv\" ? (\r\n                        topRatedData.tv.map((tv) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={tv.id}\r\n                                    id={tv.id}\r\n                                    found={isTvShowInWatchlist(tv.id)}\r\n                                    imgSrc={tv.poster_path}\r\n                                    linkTo={`/result/tv/${tv.id}`}\r\n                                    title={tv.name}\r\n                                    vote={tv.vote_average}\r\n                                    removeCat={\"tv\"}\r\n                                    removeID={tv.id}\r\n                                    addCat={\"tv\"}\r\n                                    addID={tv}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n            </section>\r\n            <section id=\"watchlist\" className=\"section\">\r\n                <h2>Watchlist</h2>\r\n                <ToggleButton\r\n                    handleClick={toggleWatchlistCategory}\r\n                    active={watchList.category}\r\n                />\r\n                <div\r\n                    id=\"watchlist-container\"\r\n                    className=\"homepage-render-container\"\r\n                    ref={watchScrollRef}\r\n                >\r\n                    {(watchList.category === \"movie\" &&\r\n                        !watchList.movie.length) ||\r\n                    (watchList.category === \"tv\" && !watchList.tv.length) ? (\r\n                        <div id=\"watchlist-empty\">\r\n                            <h2>Your Watchlist is Empty...</h2>\r\n                        </div>\r\n                    ) : watchList.category === \"movie\" ? (\r\n                        watchList.movie.map((item) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={item.id}\r\n                                    id={item.id}\r\n                                    found={isMovieInWatchlist(item.id)}\r\n                                    imgSrc={item.poster_path}\r\n                                    linkTo={`/result/movie/${item.id}`}\r\n                                    title={item.title}\r\n                                    vote={item.vote_average}\r\n                                    removeCat={\"movie\"}\r\n                                    removeID={item.id}\r\n                                    addCat={\"movie\"}\r\n                                    addID={item}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : watchList.category === \"tv\" ? (\r\n                        watchList.tv.map((item) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={item.id}\r\n                                    id={item.id}\r\n                                    found={isTvShowInWatchlist(item.id)}\r\n                                    imgSrc={item.poster_path}\r\n                                    linkTo={`/result/tv/${item.id}`}\r\n                                    title={item.name}\r\n                                    vote={item.vote_average}\r\n                                    removeCat={\"tv\"}\r\n                                    removeID={item.id}\r\n                                    addCat={\"tv\"}\r\n                                    addID={item}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Homepage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport { GoSearch } from \"react-icons/go\";\r\n\r\nconst Searchbar = () => {\r\n    const [searchTitle, setSearchTitle] = useState(\"\");\r\n    const [category, setCategory] = useState(\"movie\");\r\n\r\n    const {\r\n        search,\r\n        trendingData,\r\n        setTrendingData,\r\n        setSearchResults,\r\n        searchResults,\r\n    } = useGlobalContext();\r\n\r\n    useEffect(() => {\r\n        setTrendingData({ ...trendingData, type: category });\r\n    }, [category]);\r\n\r\n    return (\r\n        <form id=\"title-searchbar\">\r\n            <div className=\"title-bar\">\r\n                <div className=\"search-input-container\">\r\n                    <input\r\n                        id=\"title-input\"\r\n                        type=\"text\"\r\n                        value={searchTitle}\r\n                        placeholder=\"Search for a Title\"\r\n                        onChange={(e) => {\r\n                            setSearchTitle(e.target.value);\r\n                        }}\r\n                    />\r\n                    <button\r\n                        id=\"search-btn\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => {\r\n                            if (searchTitle === \"\") {\r\n                                alert(\"Please Enter Title\");\r\n                            } else {\r\n                                e.preventDefault();\r\n                                search(category, searchTitle);\r\n                                // setSearchTitle(\"\");\r\n                            }\r\n                        }}\r\n                    >\r\n                        <GoSearch className=\"search-btn-icon\" />\r\n                    </button>\r\n                </div>\r\n                <div className=\"category-btn-container\">\r\n                    <button\r\n                        id=\"category-movie-btn\"\r\n                        className={`category-btn category-movie-btn ${\r\n                            category === \"movie\" ? \"category-active\" : \"\"\r\n                        }`}\r\n                        onClick={() => {\r\n                            setCategory(\"movie\");\r\n                            setSearchResults({\r\n                                ...searchResults,\r\n                                category: \"movie\",\r\n                            });\r\n                        }}\r\n                    >\r\n                        Movie\r\n                    </button>\r\n                    <button\r\n                        id=\"category-tv-btn\"\r\n                        className={`category-btn category-tv-btn ${\r\n                            category === \"tv\" ? \"category-active\" : \"\"\r\n                        }`}\r\n                        onClick={() => {\r\n                            setCategory(\"tv\");\r\n                            setSearchResults({\r\n                                ...searchResults,\r\n                                category: \"tv\",\r\n                            });\r\n                        }}\r\n                    >\r\n                        TV\r\n                    </button>\r\n                    <button\r\n                        id=\"category-people-btn\"\r\n                        className={`category-btn category-people-btn ${\r\n                            category === \"people\" ? \"category-active\" : \"\"\r\n                        }`}\r\n                        onClick={() => {\r\n                            setCategory(\"people\");\r\n                            setSearchResults({\r\n                                ...searchResults,\r\n                                category: \"people\",\r\n                            });\r\n                        }}\r\n                    >\r\n                        Person\r\n                    </button>\r\n                </div>\r\n                <button\r\n                    id=\"clear-search-btn\"\r\n                    onClick={() => {\r\n                        setSearchResults({\r\n                            category: \"movie\",\r\n                            movie: [],\r\n                            tv: [],\r\n                            people: [],\r\n                        });\r\n                    }}\r\n                >\r\n                    Clear\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Searchbar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AiOutlineFileImage } from \"react-icons/ai\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst MovieTVResultData = ({\r\n    id,\r\n    linkTo,\r\n    img,\r\n    title,\r\n    release,\r\n    overview,\r\n    type,\r\n    found,\r\n    vote,\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList, convertDate } =\r\n        useGlobalContext();\r\n\r\n    const obj = {\r\n        id: id,\r\n        title: title,\r\n        poster_path: img,\r\n        vote_average: vote,\r\n    };\r\n\r\n    return (\r\n        <div className=\"search-results\">\r\n            <Link to={linkTo} className=\"image-link-container\">\r\n                {img === null ? (\r\n                    <div className=\"search-img\">\r\n                        <AiOutlineFileImage\r\n                            className=\"btn-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <img\r\n                        className=\"search-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${img}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n            </Link>\r\n            <div className=\"search-info\">\r\n                <Link to={linkTo} className=\"search-title\">\r\n                    {title}\r\n                </Link>\r\n                <div className=\"search-release-overview-container\">\r\n                    <p className=\"search-release-date\">\r\n                        {convertDate(release)}\r\n                    </p>\r\n                    <p className=\"search-overview\">{overview}</p>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button\r\n                    className=\"remove-from-wishlist\"\r\n                    onClick={() => {\r\n                        found\r\n                            ? removeFromWatchList(type, id)\r\n                            : addToWatchList(type, obj);\r\n                    }}\r\n                >\r\n                    {found ? (\r\n                        <IoMdRemoveCircleOutline\r\n                            className=\"remove-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    ) : (\r\n                        <IoMdAddCircleOutline\r\n                            className=\"add-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    )}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieTVResultData;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AiOutlineFileImage } from \"react-icons/ai\";\r\n\r\nconst PeopleResultData = ({ person }) => {\r\n    return (\r\n        <div className=\"person-search-results\">\r\n            <Link\r\n                to={`/result/people/${person.id}`}\r\n                className=\"person-image-container\"\r\n            >\r\n                {person.profile_path === null ? (\r\n                    <AiOutlineFileImage\r\n                        className=\"btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <img\r\n                        className=\"person-search-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${person.profile_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n            </Link>\r\n            <div className=\"person-search-info\">\r\n                <Link\r\n                    to={`/result/people/${person.id}`}\r\n                    className=\"person-name\"\r\n                >\r\n                    {person.name}\r\n                </Link>\r\n                <p className=\"person-known-for\">\r\n                    {person.known_for_department}\r\n                </p>\r\n                {person.known_for.map((role) => {\r\n                    return (\r\n                        <div key={role.id}>\r\n                            <p>{role.title}</p>\r\n                            <p>{role.release_date}</p>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PeopleResultData;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst TrendingData = ({ title, img, id, link }) => {\r\n    return (\r\n        <div className=\"trending-tile\">\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${img}`}\r\n                alt=\"\"\r\n                className=\"trending-img\"\r\n            />\r\n            <Link to={`/result/${link}/${id}`} className=\"trending-link\">\r\n                <h3 className=\"trending-title\">{title}</h3>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TrendingData;\r\n","import React, { useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport MovieTVResultData from \"./SearchResultsCard/movietvresultdata\";\r\nimport PeopleResultData from \"./SearchResultsCard/peopleresultdata\";\r\nimport useHorizontalScroll from \"../../hooks/useHorizontalScroll\";\r\nimport TrendingData from \"./SearchTrending/trendingdata\";\r\n\r\nconst SearchResults = () => {\r\n    const {\r\n        searchResults,\r\n        trendingData,\r\n        setTrendingData,\r\n        isMovieInWatchlist,\r\n        isTvShowInWatchlist,\r\n    } = useGlobalContext();\r\n\r\n    const movieTrendingRef = useHorizontalScroll(false);\r\n    const tvTrendingRef = useHorizontalScroll(false);\r\n    const peopleTrendingRef = useHorizontalScroll(false);\r\n\r\n    const getTrendingMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/movie/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n    const getTrendingTVData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/tv/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n    const getTrendingPeopleData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/person/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n\r\n    const getAllTrending = async () => {\r\n        const obj = {\r\n            type: \"movie\",\r\n            movie: await getTrendingMovieData(),\r\n            tv: await getTrendingTVData(),\r\n            person: await getTrendingPeopleData(),\r\n        };\r\n        setTrendingData(obj);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllTrending();\r\n    }, []);\r\n\r\n    switch (trendingData.type) {\r\n        case \"movie\":\r\n            if (searchResults.movie.length === 0) {\r\n                return (\r\n                    <div className=\"trending-movie-container\">\r\n                        <h2>Trending Movies</h2>\r\n                        <div\r\n                            className=\"trending-data-container\"\r\n                            ref={movieTrendingRef}\r\n                        >\r\n                            {trendingData.movie.map((film) => {\r\n                                return (\r\n                                    <TrendingData\r\n                                        key={film.id}\r\n                                        id={film.id}\r\n                                        title={film.title}\r\n                                        img={film.poster_path}\r\n                                        link={\"movie\"}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"search-results-container\">\r\n                        {searchResults.movie.map((movie) => {\r\n                            return (\r\n                                <MovieTVResultData\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    found={isMovieInWatchlist(movie.id)}\r\n                                    linkTo={`/result/movie/${movie.id}`}\r\n                                    img={movie.poster_path}\r\n                                    title={movie.title}\r\n                                    release={movie.release_date}\r\n                                    overview={movie.overview}\r\n                                    type={\"movie\"}\r\n                                    vote={movie.vote_average}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                );\r\n            }\r\n        case \"tv\":\r\n            if (searchResults.tv.length === 0) {\r\n                return (\r\n                    <div className=\"trending-movie-container\">\r\n                        <h2>Trending TV Shows</h2>\r\n                        <div\r\n                            className=\"trending-data-container\"\r\n                            ref={tvTrendingRef}\r\n                        >\r\n                            {trendingData.tv.map((show) => {\r\n                                return (\r\n                                    <TrendingData\r\n                                        key={show.id}\r\n                                        id={show.id}\r\n                                        title={show.name}\r\n                                        img={show.poster_path}\r\n                                        link={\"tv\"}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"search-results-container\">\r\n                        {searchResults.tv.map((tvshow) => {\r\n                            return (\r\n                                <MovieTVResultData\r\n                                    key={tvshow.id}\r\n                                    id={tvshow.id}\r\n                                    found={isTvShowInWatchlist(tvshow.id)}\r\n                                    linkTo={`/result/tv/${tvshow.id}`}\r\n                                    img={tvshow.poster_path}\r\n                                    title={tvshow.name}\r\n                                    release={tvshow.first_air_date}\r\n                                    overview={tvshow.overview}\r\n                                    type={\"tv\"}\r\n                                    vote={tvshow.vote_average}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                );\r\n            }\r\n        case \"people\":\r\n            if (searchResults.people.length === 0) {\r\n                return (\r\n                    <div className=\"trending-movie-container\">\r\n                        <h2>Trending People</h2>\r\n                        <div\r\n                            className=\"trending-data-container\"\r\n                            ref={peopleTrendingRef}\r\n                        >\r\n                            {trendingData.person.map((peep) => {\r\n                                return (\r\n                                    <TrendingData\r\n                                        key={peep.id}\r\n                                        id={peep.id}\r\n                                        title={peep.name}\r\n                                        img={peep.profile_path}\r\n                                        link={\"people\"}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"people-search-results-container\">\r\n                        {searchResults.people.map((item, index) => {\r\n                            return (\r\n                                <PeopleResultData\r\n                                    key={item.id}\r\n                                    index={index}\r\n                                    person={item}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                );\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n};\r\n\r\nexport default SearchResults;\r\n","import React from \"react\";\r\n\r\nconst FullScreenReview = ({ author, written, review }) => {\r\n    return (\r\n        <div className=\"fullscreen-review\">\r\n            <h4>A review by {author}</h4>\r\n            <h5>\r\n                <i>\r\n                    Written by {author} on {written}\r\n                </i>\r\n            </h5>\r\n            <p className=\"review-content\">{review}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FullScreenReview;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar, AiOutlineFileImage, AiOutlineClose } from \"react-icons/ai\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport FullScreenReview from \"./fullscreenreview/fullscreenreview\";\r\n\r\nconst MovieFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [movieData, setMovieData] = useState({});\r\n    const [movieReviewData, setMovieReviewData] = useState({});\r\n    const [movieCreditData, setMovieCreditData] = useState({});\r\n    const [toggle, setToggle] = useState({ category: \"cast\" });\r\n    const {\r\n        addToWatchList,\r\n        removeFromWatchList,\r\n        isMovieInWatchlist,\r\n        convertDate,\r\n        expandBiography,\r\n        setExpandBiography,\r\n        modalContent,\r\n        setModalContent,\r\n    } = useGlobalContext();\r\n\r\n    const getMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieData(data);\r\n    };\r\n\r\n    const getMovieReview = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieReviewData(data);\r\n    };\r\n\r\n    const getMovieCredit = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}/credits?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieCreditData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getMovieData();\r\n        getMovieReview();\r\n        getMovieCredit();\r\n    }, []);\r\n\r\n    const found = isMovieInWatchlist(movieData.id);\r\n\r\n    return (\r\n        <div\r\n            className=\"fullscreen\"\r\n            // style={{\r\n            //     backgroundImage:\r\n            //         \"url(\" +\r\n            //         `http://image.tmdb.org/t/p/w500/${movieData.backdrop_path}` +\r\n            //         \")\",\r\n            //     backgroundSize: \"cover\",\r\n            //     backgroundPosition: \"center\",\r\n            // }}\r\n        >\r\n            <div className=\"fullscreen-card\">\r\n                <img\r\n                    className=\"fullscreen-img\"\r\n                    src={`https://image.tmdb.org/t/p/w500/${movieData.poster_path}`}\r\n                    alt=\"\"\r\n                />\r\n                <section className=\"fullscreen-section\">\r\n                    <section className=\"fullscreen-info\">\r\n                        <h1 className=\"fullscreen-title\">{movieData.title}</h1>\r\n                        <div className=\"fullscreen-list-info\">\r\n                            <p className=\"fullscreen-release-date\">\r\n                                {convertDate(movieData.release_date)}\r\n                            </p>\r\n                            <div className=\"ball\"></div>\r\n                            <div className=\"fullscreen-genre\">\r\n                                {movieData.genres !== undefined ? (\r\n                                    movieData.genres.map((type) => {\r\n                                        return <p key={type.id}>{type.name}</p>;\r\n                                    })\r\n                                ) : (\r\n                                    <p></p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"ball\"></div>\r\n                            <p>{movieData.runtime} mins</p>\r\n                        </div>\r\n                        <div className=\"fullscreen-rating\">\r\n                            <h4 className=\"average-score-title\">\r\n                                Average Score:\r\n                            </h4>\r\n                            <p className=\"fullscreen-vote\">\r\n                                <AiFillStar className=\"render-icon\" />\r\n                                {movieData.vote_average}\r\n                            </p>\r\n                            <button\r\n                                className=\"add-remove-button\"\r\n                                onClick={() => {\r\n                                    found\r\n                                        ? removeFromWatchList(\r\n                                              \"movie\",\r\n                                              movieData.id\r\n                                          )\r\n                                        : addToWatchList(\"movie\", movieData);\r\n                                }}\r\n                            >\r\n                                {found ? (\r\n                                    <IoMdRemoveCircleOutline\r\n                                        className=\"remove-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                ) : (\r\n                                    <IoMdAddCircleOutline\r\n                                        className=\"add-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                )}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"fullscreen-production\">\r\n                            {movieData.production_companies !== undefined ? (\r\n                                movieData.production_companies.map(\r\n                                    (company) => {\r\n                                        return (\r\n                                            <p\r\n                                                key={company.id}\r\n                                                className=\"company-name\"\r\n                                            >\r\n                                                {company.name}\r\n                                            </p>\r\n                                        );\r\n                                    }\r\n                                )\r\n                            ) : (\r\n                                <p></p>\r\n                            )}\r\n                        </div>\r\n                        <h4 className=\"fullscreen-tagline\">\r\n                            <i>{movieData.tagline}</i>\r\n                        </h4>\r\n                        <div className=\"fullscreen-overview\">\r\n                            <h3>Overview</h3>\r\n                            <p className=\"fullscreen-overview-content\">\r\n                                {movieData.overview}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"expand-btn-container\">\r\n                            <button\r\n                                onClick={() => {\r\n                                    setExpandBiography(!expandBiography);\r\n                                    setModalContent(movieData.overview);\r\n                                }}\r\n                            >\r\n                                expand\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    <section className=\"review-cast-btn-container\">\r\n                        <div className=\"review-cast-toggle-button\">\r\n                            <button\r\n                                id=\"cast-btn\"\r\n                                className={`fullscreen-toggle-btn cast-btn ${\r\n                                    toggle.category === \"cast\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => setToggle({ category: \"cast\" })}\r\n                            >\r\n                                Cast\r\n                            </button>\r\n                            <button\r\n                                id=\"review-btn\"\r\n                                className={`fullscreen-toggle-btn review-btn ${\r\n                                    toggle.category === \"review\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() =>\r\n                                    setToggle({ category: \"review\" })\r\n                                }\r\n                            >\r\n                                Reviews\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    {toggle.category === \"review\" ? (\r\n                        movieReviewData.results !== undefined ? (\r\n                            <div className=\"fullscreen-reviews\">\r\n                                {movieReviewData.results.map(\r\n                                    (result, index) => {\r\n                                        return (\r\n                                            <div>\r\n                                                <FullScreenReview\r\n                                                    key={index}\r\n                                                    author={result.author}\r\n                                                    written={convertDate(\r\n                                                        result.created_at\r\n                                                    )}\r\n                                                    review={result.content}\r\n                                                />\r\n                                                <button\r\n                                                    className=\"review-modal-expand-btn\"\r\n                                                    onClick={() => {\r\n                                                        setExpandBiography(\r\n                                                            !expandBiography\r\n                                                        );\r\n                                                        setModalContent(\r\n                                                            result.content\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    expand\r\n                                                </button>\r\n                                            </div>\r\n                                        );\r\n                                    }\r\n                                )}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : toggle.category === \"cast\" ? (\r\n                        movieCreditData.cast !== undefined ? (\r\n                            <div className=\"fullscreen-cast\">\r\n                                {movieCreditData.cast.map((cast) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={cast.id}\r\n                                            className=\"cast-credit\"\r\n                                        >\r\n                                            {cast.profile_path === null ? (\r\n                                                <div className=\"cast-btn-icon-container\">\r\n                                                    <AiOutlineFileImage\r\n                                                        className=\"cast-btn-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                <img\r\n                                                    className=\"cast-img\"\r\n                                                    src={`https://image.tmdb.org/t/p/w500/${cast.profile_path}`}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                            )}\r\n\r\n                                            <Link\r\n                                                to={`/result/people/${cast.id}`}\r\n                                                className=\"cast-name\"\r\n                                            >\r\n                                                {cast.character}\r\n                                            </Link>\r\n                                            <p className=\"cast-role\">\r\n                                                {cast.name}\r\n                                            </p>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </section>\r\n            </div>\r\n            <div\r\n                className={\r\n                    expandBiography\r\n                        ? \"modal-biography-active\"\r\n                        : \"modal-biography-hidden\"\r\n                }\r\n            >\r\n                <button\r\n                    className=\"model-exit-btn\"\r\n                    onClick={() => setExpandBiography(false)}\r\n                >\r\n                    <AiOutlineClose\r\n                        className=\"model-btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n                <p className=\"modal-biography\">{modalContent}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieFullScreenResult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport FullScreenReview from \"./fullscreenreview/fullscreenreview\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar, AiOutlineFileImage, AiOutlineClose } from \"react-icons/ai\";\r\n\r\nconst TvFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [tvData, setTvData] = useState({});\r\n    const [tvResultData, setTvResultData] = useState({});\r\n    const [tvCreditData, setTvCreditData] = useState({});\r\n    const [toggle, setToggle] = useState({ category: \"cast\" });\r\n    const {\r\n        addToWatchList,\r\n        removeFromWatchList,\r\n        isTvShowInWatchlist,\r\n        convertDate,\r\n        expandBiography,\r\n        setExpandBiography,\r\n        modalContent,\r\n        setModalContent,\r\n    } = useGlobalContext();\r\n\r\n    const getTvData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvData(data);\r\n    };\r\n\r\n    const getTvReview = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}/reviews?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvResultData(data);\r\n    };\r\n\r\n    const getMovieCredit = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}/credits?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvCreditData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getTvData();\r\n        getTvReview();\r\n        getMovieCredit();\r\n    }, []);\r\n\r\n    const found = isTvShowInWatchlist(tvData.id);\r\n\r\n    return (\r\n        <div\r\n            className=\"fullscreen\"\r\n            // style={{\r\n            //     backgroundImage:\r\n            //         \"url(\" +\r\n            //         `http://image.tmdb.org/t/p/w500/${tvData.backdrop_path}` +\r\n            //         \")\",\r\n            //     backgroundSize: \"cover\",\r\n            //     backgroundPosition: \"center\",\r\n            // }}\r\n        >\r\n            <div className=\"fullscreen-card\">\r\n                <img\r\n                    className=\"fullscreen-img\"\r\n                    src={`https://image.tmdb.org/t/p/w500/${tvData.poster_path}`}\r\n                    alt=\"\"\r\n                />\r\n                <section className=\"fullscreen-section\">\r\n                    <section className=\"fullscreen-info\">\r\n                        <h1 className=\"fullscreen-title\">{tvData.name}</h1>\r\n                        <div className=\"fullscreen-list-info\">\r\n                            <p className=\"fullscreen-release-date\">\r\n                                {convertDate(tvData.release_date)}\r\n                            </p>\r\n                            <div className=\"ball\"></div>\r\n                            <div className=\"fullscreen-genre\">\r\n                                {tvData.genres !== undefined ? (\r\n                                    tvData.genres.map((type) => {\r\n                                        return <p key={type.id}>{type.name}</p>;\r\n                                    })\r\n                                ) : (\r\n                                    <p></p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"ball\"></div>\r\n                            <p>{tvData.runtime} mins</p>\r\n                        </div>\r\n                        <div className=\"fullscreen-rating\">\r\n                            <h4 className=\"average-score-title\">\r\n                                Average Score:\r\n                            </h4>\r\n                            <p className=\"fullscreen-vote\">\r\n                                <AiFillStar className=\"render-icon\" />\r\n                                {tvData.vote_average}\r\n                            </p>\r\n                            <button\r\n                                className=\"add-remove-button\"\r\n                                onClick={() => {\r\n                                    found\r\n                                        ? removeFromWatchList(\"tv\", tvData.id)\r\n                                        : addToWatchList(\"tv\", tvData);\r\n                                }}\r\n                            >\r\n                                {found ? (\r\n                                    <IoMdRemoveCircleOutline\r\n                                        className=\"remove-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                ) : (\r\n                                    <IoMdAddCircleOutline\r\n                                        className=\"add-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                )}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"fullscreen-production\">\r\n                            {tvData.production_companies !== undefined ? (\r\n                                tvData.production_companies.map((company) => {\r\n                                    return (\r\n                                        <p\r\n                                            key={company.id}\r\n                                            className=\"company-name\"\r\n                                        >\r\n                                            {company.name}\r\n                                        </p>\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <p></p>\r\n                            )}\r\n                        </div>\r\n                        <h4 className=\"fullscreen-tagline\">\r\n                            <i>{tvData.tagline}</i>\r\n                        </h4>\r\n                        <div className=\"fullscreen-overview\">\r\n                            <h3>Overview</h3>\r\n                            <p className=\"fullscreen-overview-content\">\r\n                                {tvData.overview}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"expand-btn-container\">\r\n                            <button\r\n                                onClick={() => {\r\n                                    setExpandBiography(!expandBiography);\r\n                                    setModalContent(tvData.overview);\r\n                                }}\r\n                            >\r\n                                expand\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    <section className=\"review-cast-btn-container\">\r\n                        <div className=\"review-cast-toggle-button\">\r\n                            <button\r\n                                id=\"cast-btn\"\r\n                                className={`fullscreen-toggle-btn cast-btn ${\r\n                                    toggle.category === \"cast\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => setToggle({ category: \"cast\" })}\r\n                            >\r\n                                Cast\r\n                            </button>\r\n                            <button\r\n                                id=\"review-btn\"\r\n                                className={`fullscreen-toggle-btn review-btn ${\r\n                                    toggle.category === \"review\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() =>\r\n                                    setToggle({ category: \"review\" })\r\n                                }\r\n                            >\r\n                                Reviews\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    {toggle.category === \"review\" ? (\r\n                        tvResultData.results !== undefined ? (\r\n                            <div className=\"fullscreen-reviews\">\r\n                                {tvResultData.results.map((result, index) => {\r\n                                    return (\r\n                                        <FullScreenReview\r\n                                            key={index}\r\n                                            author={result.author}\r\n                                            written={convertDate(\r\n                                                result.created_at\r\n                                            )}\r\n                                            review={result.content}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : toggle.category === \"cast\" ? (\r\n                        tvCreditData.cast !== undefined ? (\r\n                            <div className=\"fullscreen-cast\">\r\n                                {tvCreditData.cast.map((cast) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={cast.id}\r\n                                            className=\"cast-credit\"\r\n                                        >\r\n                                            {cast.profile_path === null ? (\r\n                                                <div className=\"cast-btn-icon-container\">\r\n                                                    <AiOutlineFileImage\r\n                                                        className=\"cast-btn-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                <img\r\n                                                    className=\"cast-img\"\r\n                                                    src={`https://image.tmdb.org/t/p/w500/${cast.profile_path}`}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                            )}\r\n\r\n                                            <Link\r\n                                                to={`/result/people/${cast.id}`}\r\n                                                className=\"cast-name\"\r\n                                            >\r\n                                                {cast.character}\r\n                                            </Link>\r\n                                            <p className=\"cast-role\">\r\n                                                {cast.name}\r\n                                            </p>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </section>\r\n            </div>\r\n            <div\r\n                className={\r\n                    expandBiography\r\n                        ? \"modal-biography-active\"\r\n                        : \"modal-biography-hidden\"\r\n                }\r\n            >\r\n                <button\r\n                    className=\"model-exit-btn\"\r\n                    onClick={() => setExpandBiography(false)}\r\n                >\r\n                    <AiOutlineClose\r\n                        className=\"model-btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n                <p className=\"modal-biography\">{modalContent}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TvFullScreenResult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport { AiOutlineFileImage, AiOutlineClose } from \"react-icons/ai\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst PeopleFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [peopleData, setPeopleData] = useState({});\r\n    const [peopleCreditData, setPeopleCreditData] = useState({});\r\n    const [peopleImageData, setPeopleImageData] = useState({});\r\n    const [toggle, setToggle] = useState({ category: \"credit\" });\r\n\r\n    const {\r\n        convertDate,\r\n        expandBiography,\r\n        setExpandBiography,\r\n        modalContent,\r\n        setModalContent,\r\n    } = useGlobalContext();\r\n\r\n    const getPeopleData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/person/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPeopleData(data);\r\n    };\r\n\r\n    const getPeopleCreditData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/person/${id}/combined_credits?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPeopleCreditData(data);\r\n    };\r\n\r\n    const getPeopleImageData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/person/${id}/images?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        setPeopleImageData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPeopleData();\r\n        getPeopleCreditData();\r\n        getPeopleImageData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"fullscreen\">\r\n            <div className=\"fullscreen-card\">\r\n                {peopleData.profile_path === null ? (\r\n                    <div className=\"fullscreen-img\">\r\n                        <AiOutlineFileImage\r\n                            className=\"cast-btn-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <img\r\n                        className=\"fullscreen-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${peopleData.profile_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n                <section className=\"person-fullscreen-section\">\r\n                    <section className=\"fullscreen-info\">\r\n                        <h1 className=\"fullscreen-title\">{peopleData.name}</h1>\r\n                        <div className=\"person-info\">\r\n                            <div className=\"person-info-div\">\r\n                                <h4 className=\"person-info-title\">\r\n                                    Birthdate:\r\n                                </h4>\r\n                                <p className=\"person-info-para\">\r\n                                    {convertDate(peopleData.birthday)}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"person-info-div\">\r\n                                <h4 className=\"person-info-title\">\r\n                                    Place of Birth:\r\n                                </h4>\r\n                                <p className=\"person-info-para\">\r\n                                    {peopleData.place_of_birth}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"person-info-div\">\r\n                                <h4 className=\"person-info-title\">\r\n                                    Known For:\r\n                                </h4>\r\n                                <p className=\"person-info-para\">\r\n                                    {peopleData.known_for_department}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"person-biography\">\r\n                            <h3>Biography</h3>\r\n                            <p className=\"person-bio-content\">\r\n                                {peopleData.biography}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"expand-btn-container\">\r\n                            <button\r\n                                onClick={() => {\r\n                                    setExpandBiography(!expandBiography);\r\n                                    setModalContent(peopleData.biography);\r\n                                }}\r\n                            >\r\n                                expand\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    <section className=\"review-cast-btn-container\">\r\n                        <div className=\"review-cast-toggle-button\">\r\n                            <button\r\n                                id=\"cast-btn\"\r\n                                className={`fullscreen-toggle-btn cast-btn ${\r\n                                    toggle.category === \"credit\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() =>\r\n                                    setToggle({ category: \"credit\" })\r\n                                }\r\n                            >\r\n                                Movie\r\n                            </button>\r\n                            <button\r\n                                id=\"review-btn\"\r\n                                className={`fullscreen-toggle-btn review-btn ${\r\n                                    toggle.category === \"image\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => setToggle({ category: \"image\" })}\r\n                            >\r\n                                Images\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    {toggle.category === \"credit\" ? (\r\n                        <div className=\"person-fullscreen-cast\">\r\n                            {peopleCreditData.cast !== undefined ? (\r\n                                peopleCreditData.cast.map((cast, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={index}\r\n                                            className=\"person-credit\"\r\n                                        >\r\n                                            {cast.poster_path === null ? (\r\n                                                <div className=\"cast-btn-icon-container\">\r\n                                                    <AiOutlineFileImage\r\n                                                        className=\"cast-btn-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                <img\r\n                                                    className=\"person-credit-img\"\r\n                                                    src={`https://image.tmdb.org/t/p/w500/${cast.poster_path}`}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                            )}\r\n                                            <Link\r\n                                                to={`/result/movie/${cast.id}`}\r\n                                                className=\"cast-name\"\r\n                                            >\r\n                                                <p className=\"cast-name\">\r\n                                                    {cast.title}\r\n                                                </p>\r\n                                            </Link>\r\n                                            <p className=\"person-cast-role\">\r\n                                                {cast.character}\r\n                                            </p>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <div></div>\r\n                            )}\r\n                        </div>\r\n                    ) : toggle.category === \"image\" ? (\r\n                        <div className=\"person-fullscreen-images-container\">\r\n                            {peopleImageData.profiles !== null ? (\r\n                                peopleImageData.profiles.map((img, index) => {\r\n                                    return (\r\n                                        <img\r\n                                            className=\"person-img\"\r\n                                            src={`https://image.tmdb.org/t/p/w500/${img.file_path}`}\r\n                                            alt=\"\"\r\n                                        />\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <div></div>\r\n                            )}\r\n                        </div>\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </section>\r\n            </div>\r\n            <div\r\n                className={\r\n                    expandBiography\r\n                        ? \"modal-biography-active\"\r\n                        : \"modal-biography-hidden\"\r\n                }\r\n            >\r\n                <button\r\n                    className=\"model-exit-btn\"\r\n                    onClick={() => setExpandBiography(false)}\r\n                >\r\n                    <AiOutlineClose\r\n                        className=\"model-btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n                <p className=\"modal-biography\">{modalContent}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PeopleFullScreenResult;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar } from \"react-icons/ai\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst WatchlistCard = ({\r\n    found,\r\n    imgSrc,\r\n    linkTo,\r\n    title,\r\n    vote,\r\n    removeCat,\r\n    removeID,\r\n    addCat,\r\n    addID,\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList } = useGlobalContext();\r\n\r\n    return (\r\n        <div className=\"render-card\">\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${imgSrc}`}\r\n                alt=\"\"\r\n                className=\"render-img\"\r\n            />\r\n            <Link to={linkTo} className=\"render-card-link\">\r\n                <h3>{title}</h3>\r\n            </Link>\r\n            <p className=\"render-vote\">\r\n                <AiFillStar className=\"render-icon\" />\r\n                {vote}\r\n            </p>\r\n            <button\r\n                className=\"remove-from-wishlist\"\r\n                onClick={() => {\r\n                    found\r\n                        ? removeFromWatchList(removeCat, removeID)\r\n                        : addToWatchList(addCat, addID);\r\n                }}\r\n            >\r\n                {found ? (\r\n                    <IoMdRemoveCircleOutline\r\n                        className=\"remove-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <IoMdAddCircleOutline\r\n                        className=\"add-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WatchlistCard;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport WatchlistCard from \"./WatchlistCard/watchlistcard\";\r\n\r\nconst Watchlist = () => {\r\n    const { watchList, isMovieInWatchlist, movieCount, tvCount } =\r\n        useGlobalContext();\r\n\r\n    return (\r\n        <div id=\"watchlist-container\">\r\n            <div id=\"watchlist-header\">\r\n                <h2>Your Watchlist</h2>\r\n                <p>movie count {movieCount}</p>\r\n                <p>tv count {tvCount}</p>\r\n            </div>\r\n            <div id=\"watchlist\">\r\n                {watchList.movie.length !== 0 ? (\r\n                    watchList.movie.map((item) => {\r\n                        return (\r\n                            <WatchlistCard\r\n                                key={item.id}\r\n                                id={item.id}\r\n                                found={isMovieInWatchlist(item.id)}\r\n                                imgSrc={item.poster_path}\r\n                                linkTo={`/result/movie/${item.id}`}\r\n                                title={item.title}\r\n                                vote={item.vote_average}\r\n                                removeCat={\"movie\"}\r\n                                removeID={item.id}\r\n                                addCat={\"movie\"}\r\n                                addID={item}\r\n                            />\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <div></div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Watchlist;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Navbar from \"./components/Navbar/navbar\";\r\nimport Homepage from \"./components/Homepage/homepage\";\r\nimport Searchbar from \"./components/Searchbar/searchbar\";\r\nimport SearchResults from \"./components/SearchResults/searchresults\";\r\nimport MovieFullScreenResult from \"./components/FullScreenResult/moviefullscreenresult\";\r\nimport TvFullScreenResult from \"./components/FullScreenResult/tvfullscreenresult\";\r\nimport PeopleFullScreenResult from \"./components/FullScreenResult/peoplefullscreenresults\";\r\nimport Watchlist from \"./components/Watchlist/watchlist\";\r\n// import Footer from \"./components/Navbar/footer\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <Router>\r\n            <div id=\"app-container\">\r\n                <Navbar />\r\n                <Switch>\r\n                    <Route path=\"/search\">\r\n                        <Searchbar />\r\n                        <SearchResults />\r\n                    </Route>\r\n                    <Route path=\"/result/movie/:id\">\r\n                        <MovieFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/result/tv/:id\">\r\n                        <TvFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/result/people/:id\">\r\n                        <PeopleFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/watchlist\">\r\n                        <Watchlist />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Homepage />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"./components/Navbar/navbar.css\";\r\nimport \"./components/Homepage/homepage.css\";\r\nimport \"./components/Searchbar/searchbar.css\";\r\nimport \"./components/FullScreenResult/fullscreenresults.css\";\r\nimport \"./components/SearchResults/searchresults.css\";\r\nimport \"./components/Watchlist/watchlist.css\";\r\nimport App from \"./App\";\r\nimport { AppProvider } from \"./context\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <AppProvider>\r\n            <App />\r\n        </AppProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}