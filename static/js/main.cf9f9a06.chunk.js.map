{"version":3,"sources":["hooks/useLocalStorage.js","context.js","components/Navbar/navbar.js","hooks/useWindowDimensions.js","hooks/useHorizontalScroll.js","hooks/useFetch.js","components/ToggleButton/toggleButton.js","components/Homepage/RenderedCard/renderedCard.js","components/Carousel/Carousel.js","components/Homepage/homepage.js","components/Searchbar/searchbar.js","components/SearchResults/SearchResultsCard/movietvresultdata.js","components/SearchResults/SearchResultsCard/peopleresultdata.js","components/SearchResults/SearchTrending/trendingdata.js","components/SearchResults/searchresults.js","components/FullScreenResult/fullscreenreview/fullscreenreview.js","components/FullScreenResult/moviefullscreenresult.js","components/FullScreenResult/tvfullscreenresult.js","components/FullScreenResult/peoplefullscreenresults.js","components/Watchlist/WatchlistCard/watchlistcard.js","components/Watchlist/WatchlistCard/watchlistList.js","components/Watchlist/watchlist.js","App.js","index.js"],"names":["useLocalStorage","key","initialState","useState","retrieve","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","AppContext","React","createContext","AppProvider","children","category","movie","tv","people","query","searchResults","setSearchResults","watchList","setWatchList","type","person","trendingData","setTrendingData","isAdded","isRemoved","title","watchListAlert","setWatchListAlert","expandBiography","setExpandBiography","modalContent","setModalContent","movieCount","setMovieCount","tvCount","setTvCount","searchMovies","a","fetch","response","json","data","results","searchTVShows","searchPeople","search","timer","setTimeout","clearTimeout","length","Provider","value","addToWatchList","item","find","w","id","obj","poster_path","vote_average","date_added","Date","now","overview","name","removeFromWatchList","filter","isMovieInWatchlist","isTvShowInWatchlist","convertDate","info","toLocaleString","day","month","year","toggleWatchlistCategory","useGlobalContext","useContext","Navbar","className","to","onClick","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","window","width","innerWidth","height","innerHeight","getWindowDimensions","addEventListener","removeEventListener","useHorizontalScroll","preventParentScrolling","elRef","useRef","el","current","onWheel","e","deltaY","preventDefault","scrollLeft","scrollWidth","clientWidth","Math","round","scrollTo","left","useFetch","url","loading","setLoading","setData","error","setError","ok","Error","statusText","fetchData","ToggleButton","handleClick","active","disabled","RenderedCard","found","imgSrc","linkTo","vote","removeCat","removeID","addCat","addID","index","position","src","alt","focusable","Carousel","activeCardIndex","setActiveCardIndex","touchStart","setTouchStart","touchEnd","setTouchEnd","handlePreviousClick","newIndex","handleNextClick","getPositionClassName","onTouchStart","targetTouches","clientX","onTouchMove","onTouchEnd","map","child","Homepage","popularMovieData","popularMovieLoading","popularTVData","popularTVLoading","topRatedMovieData","topRatedMovieLoading","topRatedTVData","topRatedTVLoading","popularCategory","setPopularCategory","topRatedCategory","setTopRatedCategory","popScrollRef","topScrollRef","watchScrollRef","togglePopularCategory","toggleTopRatedCategory","getMappedCards","array","ref","Searchbar","searchTitle","setSearchTitle","setCategory","placeholder","onChange","target","alert","MovieTVResultData","img","release","PeopleResultData","profile_path","known_for_department","known_for","role","release_date","TrendingData","link","SearchResults","movieTrendingRef","tvTrendingRef","peopleTrendingRef","getTrendingMovieData","getTrendingTVData","getTrendingPeopleData","getAllTrending","film","toUpperCase","show","tvshow","first_air_date","peep","FullScreenReview","author","written","review","MovieFullScreenResult","useParams","movieData","setMovieData","movieReviewData","setMovieReviewData","movieCreditData","setMovieCreditData","toggle","setToggle","getMovieData","getMovieReview","getMovieCredit","undefined","genres","runtime","production_companies","company","tagline","result","created_at","content","cast","character","TvFullScreenResult","tvData","setTvData","tvResultData","setTvResultData","tvCreditData","setTvCreditData","getTvData","getTvReview","getTvCredit","PeopleFullScreenResult","peopleData","setPeopleData","peopleCreditData","setPeopleCreditData","peopleImageData","setPeopleImageData","expandImg","setExpandImg","imgModal","setImgModal","getPeopleData","getPeopleCreditData","getPeopleImageData","birthday","place_of_birth","biography","profiles","file_path","WatchlistCard","WatchlistList","Watchlist","movieWatchlist","setMovieWatchlist","tvWatchlist","setTvWatchlist","ascending","descending","valueSelect","setValueSelect","watchlistView","setWatchlistView","sortingTypeRef","sortingDirectionRef","sortWatchlist","b","sortedMovieWatchlist","sortedTvWatchlist","sort","compareMovieName","compareTvName","compareRating","compareDate","reverse","nameA","nameB","useLayoutEffect","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf9f9a06.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useLocalStorage = (key, initialState) => {\r\n    const [state, setState] = useState(() => {\r\n        const retrieve = localStorage.getItem(key);\r\n        return retrieve ? JSON.parse(retrieve) : initialState;\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (state) {\r\n            localStorage.setItem(key, JSON.stringify(state));\r\n        }\r\n    }, [state]);\r\n\r\n    return [state, setState];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport useLocalStorage from \"./hooks/useLocalStorage\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n    const [searchResults, setSearchResults] = useState({\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n        people: [],\r\n        query: {},\r\n    });\r\n    const [watchList, setWatchList] = useLocalStorage(\"Watchlist\", {\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n    });\r\n    const [trendingData, setTrendingData] = useState({\r\n        type: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n        person: [],\r\n    });\r\n    const [watchListAlert, setWatchListAlert] = useState({\r\n        isAdded: false,\r\n        isRemoved: false,\r\n        title: \"\",\r\n    });\r\n    const [expandBiography, setExpandBiography] = useState(false);\r\n    const [modalContent, setModalContent] = useState(null);\r\n    const [movieCount, setMovieCount] = useState(0);\r\n    const [tvCount, setTvCount] = useState(0);\r\n\r\n    const searchMovies = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/movie?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        setSearchResults({\r\n            ...searchResults,\r\n            category: \"movie\",\r\n            movie: data.results,\r\n            query: { ...searchResults.query, movie: query },\r\n        });\r\n    };\r\n\r\n    const searchTVShows = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/tv?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        setSearchResults({\r\n            ...searchResults,\r\n            category: \"tv\",\r\n            tv: data.results,\r\n            query: { ...searchResults.query, tv: query },\r\n        });\r\n    };\r\n\r\n    const searchPeople = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/person?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        setSearchResults({\r\n            ...searchResults,\r\n            category: \"people\",\r\n            people: data.results,\r\n            query: { ...searchResults.query, person: query },\r\n        });\r\n    };\r\n\r\n    const search = async (category, query) => {\r\n        switch (category) {\r\n            case \"movie\":\r\n                searchMovies(query);\r\n                break;\r\n            case \"tv\":\r\n                searchTVShows(query);\r\n                break;\r\n            case \"people\":\r\n                searchPeople(query);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const convertDate = (info) => {\r\n        const date = new Date(info);\r\n        const string = date.toLocaleString(\"default\", {\r\n            day: \"numeric\",\r\n            month: \"long\",\r\n            year: \"numeric\",\r\n        });\r\n        return string;\r\n    };\r\n\r\n    const addToWatchList = (category, item) => {\r\n        if ([...watchList.movie, ...watchList.tv].find((w) => w.id === item.id))\r\n            return;\r\n        if (category === \"movie\") {\r\n            const obj = {\r\n                id: item.id,\r\n                title: item.title,\r\n                poster_path: item.poster_path,\r\n                vote_average: item.vote_average,\r\n                date_added: Date.now(),\r\n                overview: item.overview,\r\n            };\r\n            setWatchList({\r\n                ...watchList,\r\n                movie: [...watchList.movie, obj],\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: true,\r\n                isRemoved: false,\r\n                title: item.title,\r\n            });\r\n        } else if (category === \"tv\") {\r\n            const obj = {\r\n                id: item.id,\r\n                name: item.name,\r\n                poster_path: item.poster_path,\r\n                vote_average: item.vote_average,\r\n                date_added: Date.now(),\r\n                overview: item.overview,\r\n            };\r\n            setWatchList({\r\n                ...watchList,\r\n                tv: [...watchList.tv, obj],\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: true,\r\n                isRemoved: false,\r\n                title: item.name,\r\n            });\r\n        }\r\n    };\r\n\r\n    const removeFromWatchList = (category, id) => {\r\n        if (category === \"movie\") {\r\n            setWatchList({\r\n                ...watchList,\r\n                movie: watchList.movie.filter((item) => item.id !== id),\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: false,\r\n                isRemoved: true,\r\n                title: watchList.movie.find((item) => item.id === id).title,\r\n            });\r\n        } else if (category === \"tv\") {\r\n            setWatchList({\r\n                ...watchList,\r\n                tv: watchList.tv.filter((item) => item.id !== id),\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: false,\r\n                isRemoved: true,\r\n                title: watchList.tv.find((item) => item.id === id).name,\r\n            });\r\n        }\r\n    };\r\n\r\n    const isMovieInWatchlist = (id) => {\r\n        return watchList.movie.find((item) => item.id === id);\r\n    };\r\n    const isTvShowInWatchlist = (id) => {\r\n        return watchList.tv.find((item) => item.id === id);\r\n    };\r\n\r\n    const toggleWatchlistCategory = () => {\r\n        setWatchList({\r\n            ...watchList,\r\n            category: watchList.category === \"movie\" ? \"tv\" : \"movie\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setWatchListAlert({ isAdded: false, isRemoved: false, title: \"\" });\r\n        }, 3000);\r\n        return () => {\r\n            clearTimeout(timer);\r\n        };\r\n    }, [watchListAlert]);\r\n\r\n    useEffect(() => {\r\n        setMovieCount(watchList.movie.length);\r\n        setTvCount(watchList.tv.length);\r\n    }, [watchList]);\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                trendingData,\r\n                setTrendingData,\r\n                setSearchResults,\r\n                search,\r\n                searchResults,\r\n                watchList,\r\n                setWatchList,\r\n                addToWatchList,\r\n                removeFromWatchList,\r\n                isMovieInWatchlist,\r\n                isTvShowInWatchlist,\r\n                convertDate,\r\n                watchListAlert,\r\n                movieCount,\r\n                tvCount,\r\n                expandBiography,\r\n                setExpandBiography,\r\n                modalContent,\r\n                setModalContent,\r\n                toggleWatchlistCategory,\r\n            }}\r\n        >\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GoSearch } from \"react-icons/go\";\r\nimport { useGlobalContext } from \"../../context\";\r\n\r\nconst Navbar = () => {\r\n    const {\r\n        watchListAlert,\r\n        setSearchResults,\r\n        setExpandBiography,\r\n        setModalContent,\r\n    } = useGlobalContext();\r\n    return (\r\n        <div>\r\n            <nav id=\"navbar\">\r\n                <ul id=\"navbar-list\">\r\n                    <li>\r\n                        <Link\r\n                            className=\"nav-link\"\r\n                            to=\"/\"\r\n                            onClick={() => {\r\n                                setSearchResults({\r\n                                    category: \"movie\",\r\n                                    movie: [],\r\n                                    tv: [],\r\n                                    people: [],\r\n                                });\r\n                                setExpandBiography(false);\r\n                                setModalContent(\"\");\r\n                            }}\r\n                        >\r\n                            Home\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link\r\n                            className=\"nav-link\"\r\n                            to=\"/watchlist\"\r\n                            onClick={() => {\r\n                                setExpandBiography(false);\r\n                                setModalContent(\"\");\r\n                            }}\r\n                        >\r\n                            Watchlist\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link\r\n                            className=\"nav-link search-icon-link\"\r\n                            to=\"/search\"\r\n                            onClick={() => {\r\n                                setExpandBiography(false);\r\n                                setModalContent(\"\");\r\n                            }}\r\n                        >\r\n                            <GoSearch className=\"link-icon\" />\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n            <div id=\"display\">\r\n                <div\r\n                    id=\"watchlist-alert\"\r\n                    className={\r\n                        watchListAlert.isAdded\r\n                            ? \"added\"\r\n                            : watchListAlert.isRemoved\r\n                            ? \"removed\"\r\n                            : \"\"\r\n                    }\r\n                >\r\n                    {watchListAlert.isAdded ? (\r\n                        <p>Added to Watchlist - {watchListAlert.title}</p>\r\n                    ) : watchListAlert.isRemoved ? (\r\n                        <p>Removed from Watchlist - {watchListAlert.title}</p>\r\n                    ) : (\r\n                        <p></p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useWindowDimensions = () => {\r\n    const [windowDimensions, setWindowDimensions] = useState({});\r\n\r\n    const getWindowDimensions = () => {\r\n        const { innerWidth: width, innerHeight: height } = window;\r\n        return { width, height };\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWindowDimensions(getWindowDimensions());\r\n        };\r\n        handleResize();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize);\r\n        };\r\n    }, []);\r\n    return [windowDimensions];\r\n};\r\n\r\nexport default useWindowDimensions;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nconst useHorizontalScroll = (preventParentScrolling = true) => {\r\n    const elRef = useRef();\r\n    useEffect(() => {\r\n        const el = elRef.current;\r\n        if (el) {\r\n            const onWheel = (e) => {\r\n                if (e.deltaY === 0) return;\r\n                if (preventParentScrolling === true) {\r\n                    e.preventDefault();\r\n                } else if (\r\n                    !(el.scrollLeft === 0 && e.deltaY < 0) &&\r\n                    !(\r\n                        el.scrollWidth -\r\n                            el.clientWidth -\r\n                            Math.round(el.scrollLeft) ===\r\n                            0 && e.deltaY > 0\r\n                    )\r\n                ) {\r\n                    e.preventDefault();\r\n                }\r\n                el.scrollTo({\r\n                    left: el.scrollLeft + e.deltaY,\r\n                });\r\n            };\r\n            el.addEventListener(\"wheel\", onWheel);\r\n            return () => el.removeEventListener(\"wheel\", onWheel);\r\n        }\r\n    }, []);\r\n    return elRef;\r\n};\r\n\r\nexport default useHorizontalScroll;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = (url) => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n                setData(await response.json());\r\n                setLoading(false);\r\n            } catch (error) {\r\n                setError(error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [url]);\r\n    return [data, loading, error];\r\n};\r\n\r\nexport default useFetch;\r\n","import React from \"react\";\r\n\r\nconst ToggleButton = ({ handleClick, active }) => {\r\n    return (\r\n        <div className=\"toggle-button-group\">\r\n            <button\r\n                className={`toggle-btn movie-toggle ${\r\n                    active === \"movie\" ? \"active\" : \"\"\r\n                }`}\r\n                onClick={handleClick}\r\n                disabled={active === \"movie\"}\r\n            >\r\n                Movie\r\n            </button>\r\n            <button\r\n                className={`toggle-btn tv-toggle ${\r\n                    active === \"tv\" ? \"active\" : \"\"\r\n                }`}\r\n                onClick={handleClick}\r\n                disabled={active === \"tv\"}\r\n            >\r\n                TV\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToggleButton;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar } from \"react-icons/ai\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst RenderedCard = ({\r\n    found,\r\n    imgSrc,\r\n    linkTo,\r\n    title,\r\n    vote,\r\n    removeCat,\r\n    removeID,\r\n    addCat,\r\n    addID,\r\n    index,\r\n    position = \"\",\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList } = useGlobalContext();\r\n\r\n    return (\r\n        <div\r\n            // className=\"render-card\"\r\n            className={`render-card ${position}`}\r\n        >\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${imgSrc}`}\r\n                alt=\"\"\r\n                className=\"render-img\"\r\n            />\r\n            <Link to={linkTo} className=\"render-card-link\">\r\n                <h3>{title}</h3>\r\n            </Link>\r\n            <p className=\"render-vote\">\r\n                <AiFillStar className=\"render-icon\" />\r\n                {vote}\r\n            </p>\r\n            <button\r\n                className=\"remove-from-wishlist\"\r\n                onClick={() => {\r\n                    found\r\n                        ? removeFromWatchList(removeCat, removeID)\r\n                        : addToWatchList(addCat, addID);\r\n                }}\r\n            >\r\n                {found ? (\r\n                    <IoMdRemoveCircleOutline\r\n                        className=\"remove-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <IoMdAddCircleOutline\r\n                        className=\"add-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RenderedCard;\r\n","import React, { useState } from \"react\";\r\nimport { BiLeftArrow, BiRightArrow } from \"react-icons/bi\";\r\n\r\nconst Carousel = ({ children }) => {\r\n    const [activeCardIndex, setActiveCardIndex] = useState(0);\r\n    const [touchStart, setTouchStart] = useState(0);\r\n    const [touchEnd, setTouchEnd] = useState(0);\r\n\r\n    const handlePreviousClick = () => {\r\n        const newIndex = activeCardIndex - 1;\r\n        setActiveCardIndex(newIndex < 0 ? children.length - 1 : newIndex);\r\n    };\r\n    const handleNextClick = () => {\r\n        const newIndex = activeCardIndex + 1;\r\n        setActiveCardIndex(newIndex > children.length - 1 ? 0 : newIndex);\r\n    };\r\n    const getPositionClassName = (index) => {\r\n        return index < activeCardIndex\r\n            ? \"previous-card\"\r\n            : index > activeCardIndex\r\n            ? \"next-card\"\r\n            : \"active-card\";\r\n    };\r\n    const handleTouchStart = (e) => {\r\n        setTouchStart(e.targetTouches[0].clientX);\r\n    };\r\n    const handleTouchMove = (e) => {\r\n        setTouchEnd(e.targetTouches[0].clientX);\r\n    };\r\n    const handleTouchEnd = () => {\r\n        if (touchEnd === 0) return;\r\n        if (touchStart - touchEnd > 150) {\r\n            handleNextClick();\r\n        }\r\n        if (touchStart - touchEnd < -150) {\r\n            handlePreviousClick();\r\n        }\r\n        setTouchStart(0);\r\n        setTouchEnd(0);\r\n    };\r\n    return (\r\n        <section\r\n            className=\"carousel-container\"\r\n            onTouchStart={handleTouchStart}\r\n            onTouchMove={handleTouchMove}\r\n            onTouchEnd={handleTouchEnd}\r\n        >\r\n            {children.length > 1 && (\r\n                <button className=\"previous-btn\" onClick={handlePreviousClick}>\r\n                    <BiLeftArrow\r\n                        className=\"previous-next-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n            )}\r\n            {children.length > 1 && (\r\n                <button className=\"next-btn\" onClick={handleNextClick}>\r\n                    <BiRightArrow\r\n                        className=\"previous-next-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n            )}\r\n            {children.map((child, index) => {\r\n                return (\r\n                    <div\r\n                        className={`carousel-card ${getPositionClassName(\r\n                            index\r\n                        )}`}\r\n                    >\r\n                        {child}\r\n                    </div>\r\n                );\r\n            })}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Carousel;\r\n","import React, { useState } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\";\r\nimport useHorizontalScroll from \"../../hooks/useHorizontalScroll\";\r\nimport useFetch from \"../../hooks/useFetch\";\r\nimport ToggleButton from \"../ToggleButton/toggleButton\";\r\nimport RenderedCard from \"./RenderedCard/renderedCard\";\r\nimport Carousel from \"../Carousel/Carousel\";\r\n\r\nconst Homepage = () => {\r\n    const {\r\n        watchList,\r\n        isMovieInWatchlist,\r\n        isTvShowInWatchlist,\r\n        toggleWatchlistCategory,\r\n    } = useGlobalContext();\r\n\r\n    const [popularMovieData, popularMovieLoading, popularMovieError] = useFetch(\r\n        `https://api.themoviedb.org/3/movie/popular?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n    );\r\n    const [popularTVData, popularTVLoading, popularTVError] = useFetch(\r\n        `https://api.themoviedb.org/3/tv/popular?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n    );\r\n    const [topRatedMovieData, topRatedMovieLoading, topRatedMovieError] =\r\n        useFetch(\r\n            `https://api.themoviedb.org/3/movie/top_rated?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n    const [topRatedTVData, topRatedTVLoading, topRatedTVError] = useFetch(\r\n        `https://api.themoviedb.org/3/tv/top_rated?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n    );\r\n\r\n    const [popularCategory, setPopularCategory] = useState(\"movie\");\r\n    const [topRatedCategory, setTopRatedCategory] = useState(\"movie\");\r\n\r\n    const popScrollRef = useHorizontalScroll(false);\r\n    const topScrollRef = useHorizontalScroll(false);\r\n    const watchScrollRef = useHorizontalScroll(false);\r\n\r\n    const [windowDimensions] = useWindowDimensions();\r\n\r\n    const togglePopularCategory = () => {\r\n        setPopularCategory(popularCategory === \"movie\" ? \"tv\" : \"movie\");\r\n    };\r\n\r\n    const toggleTopRatedCategory = () => {\r\n        setTopRatedCategory(topRatedCategory === \"movie\" ? \"tv\" : \"movie\");\r\n    };\r\n\r\n    const getMappedCards = (array, category) => {\r\n        switch (category) {\r\n            case \"movie\":\r\n                return array.map((item) => {\r\n                    return (\r\n                        <RenderedCard\r\n                            key={item.id}\r\n                            id={item.id}\r\n                            found={isMovieInWatchlist(item.id)}\r\n                            imgSrc={item.poster_path}\r\n                            linkTo={`/result/movie/${item.id}`}\r\n                            title={item.title}\r\n                            vote={item.vote_average}\r\n                            removeCat={\"movie\"}\r\n                            removeID={item.id}\r\n                            addCat={\"movie\"}\r\n                            addID={item}\r\n                        />\r\n                    );\r\n                });\r\n            case \"tv\":\r\n                return array.map((item) => {\r\n                    return (\r\n                        <RenderedCard\r\n                            key={item.id}\r\n                            id={item.id}\r\n                            found={isTvShowInWatchlist(item.id)}\r\n                            imgSrc={item.poster_path}\r\n                            linkTo={`/result/tv/${item.id}`}\r\n                            title={item.name}\r\n                            vote={item.vote_average}\r\n                            removeCat={\"tv\"}\r\n                            removeID={item.id}\r\n                            addCat={\"tv\"}\r\n                            addID={item}\r\n                        />\r\n                    );\r\n                });\r\n            default:\r\n                throw new Error(\"category not found\");\r\n        }\r\n    };\r\n\r\n    if (windowDimensions.width <= 450) {\r\n        return (\r\n            <div id=\"homepage\">\r\n                <section id=\"popular\" className=\"section\">\r\n                    <div className=\"section-title-container\">\r\n                        <h2 className=\"section-title\">What's Popular</h2>\r\n                    </div>\r\n                    <ToggleButton\r\n                        handleClick={togglePopularCategory}\r\n                        active={popularCategory}\r\n                    />\r\n                    {popularMovieLoading || popularTVLoading ? (\r\n                        <div className=\"card-loading\">\r\n                            <h2>Loading...</h2>\r\n                        </div>\r\n                    ) : (\r\n                        <Carousel>\r\n                            {getMappedCards(\r\n                                popularCategory === \"movie\"\r\n                                    ? popularMovieData.results\r\n                                    : popularTVData.results,\r\n                                popularCategory\r\n                            )}\r\n                        </Carousel>\r\n                    )}\r\n                </section>\r\n                <section id=\"rated\" className=\"section\">\r\n                    <div className=\"section-title-container\">\r\n                        <h2 className=\"section-title\">Top Rated</h2>\r\n                    </div>\r\n                    <ToggleButton\r\n                        handleClick={toggleTopRatedCategory}\r\n                        active={topRatedCategory}\r\n                    />\r\n                    {topRatedMovieLoading || topRatedTVLoading ? (\r\n                        <div className=\"card-loading\">\r\n                            <h2>Loading...</h2>\r\n                        </div>\r\n                    ) : (\r\n                        <Carousel>\r\n                            {getMappedCards(\r\n                                topRatedCategory === \"movie\"\r\n                                    ? topRatedMovieData.results\r\n                                    : topRatedTVData.results,\r\n                                topRatedCategory\r\n                            )}\r\n                        </Carousel>\r\n                    )}\r\n                </section>\r\n                <section id=\"watchlist\" className=\"section\">\r\n                    <div className=\"section-title-container\">\r\n                        <h2 className=\"section-title\">Watchlist</h2>\r\n                    </div>\r\n                    <ToggleButton\r\n                        handleClick={toggleWatchlistCategory}\r\n                        active={watchList.category}\r\n                    />\r\n                    {(watchList.category === \"movie\" &&\r\n                        !watchList.movie.length) ||\r\n                    (watchList.category === \"tv\" && !watchList.tv.length) ? (\r\n                        <div id=\"watchlist-empty\">\r\n                            <h2>Your Watchlist is Empty...</h2>\r\n                        </div>\r\n                    ) : (\r\n                        <Carousel>\r\n                            {getMappedCards(\r\n                                watchList.category === \"movie\"\r\n                                    ? watchList.movie\r\n                                    : watchList.tv,\r\n                                watchList.category\r\n                            )}\r\n                        </Carousel>\r\n                    )}\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div id=\"homepage\">\r\n            <section id=\"popular\" className=\"section\">\r\n                <div className=\"section-title-container\">\r\n                    <h2 className=\"section-title\">What's Popular</h2>\r\n                </div>\r\n                <ToggleButton\r\n                    handleClick={togglePopularCategory}\r\n                    active={popularCategory}\r\n                />\r\n                <div\r\n                    id=\"popular-container\"\r\n                    className=\"homepage-render-container\"\r\n                    ref={popScrollRef}\r\n                >\r\n                    {popularMovieLoading || popularTVLoading ? (\r\n                        <h2>Loading</h2>\r\n                    ) : (\r\n                        getMappedCards(\r\n                            popularCategory === \"movie\"\r\n                                ? popularMovieData.results\r\n                                : popularTVData.results,\r\n                            popularCategory\r\n                        )\r\n                    )}\r\n                </div>\r\n            </section>\r\n            <section id=\"rated\" className=\"section\">\r\n                <div className=\"section-title-container\">\r\n                    <h2 className=\"section-title\">Top Rated</h2>\r\n                </div>\r\n                <ToggleButton\r\n                    handleClick={toggleTopRatedCategory}\r\n                    active={topRatedCategory}\r\n                />\r\n                <div\r\n                    id=\"top-rated-container\"\r\n                    className=\"homepage-render-container\"\r\n                    ref={topScrollRef}\r\n                >\r\n                    {topRatedMovieLoading || topRatedTVLoading ? (\r\n                        <h2>Loading</h2>\r\n                    ) : (\r\n                        getMappedCards(\r\n                            topRatedCategory === \"movie\"\r\n                                ? topRatedMovieData.results\r\n                                : topRatedTVData.results,\r\n                            topRatedCategory\r\n                        )\r\n                    )}\r\n                </div>\r\n            </section>\r\n            <section id=\"watchlist\" className=\"section\">\r\n                <div className=\"section-title-container\">\r\n                    <h2 className=\"section-title\">Watchlist</h2>\r\n                </div>\r\n                <ToggleButton\r\n                    handleClick={toggleWatchlistCategory}\r\n                    active={watchList.category}\r\n                />\r\n                <div\r\n                    id=\"watchlist-container\"\r\n                    className=\"homepage-render-container\"\r\n                    ref={watchScrollRef}\r\n                >\r\n                    {(watchList.category === \"movie\" &&\r\n                        !watchList.movie.length) ||\r\n                    (watchList.category === \"tv\" && !watchList.tv.length) ? (\r\n                        <div id=\"watchlist-empty\">\r\n                            <h2>Your Watchlist is Empty...</h2>\r\n                        </div>\r\n                    ) : (\r\n                        getMappedCards(\r\n                            watchList.category === \"movie\"\r\n                                ? watchList.movie\r\n                                : watchList.tv,\r\n                            watchList.category\r\n                        )\r\n                    )}\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Homepage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport { GoSearch } from \"react-icons/go\";\r\n\r\nconst Searchbar = () => {\r\n    const [searchTitle, setSearchTitle] = useState(\"\");\r\n    const [category, setCategory] = useState(\"movie\");\r\n\r\n    const {\r\n        search,\r\n        trendingData,\r\n        setTrendingData,\r\n        setSearchResults,\r\n        searchResults,\r\n    } = useGlobalContext();\r\n\r\n    useEffect(() => {\r\n        setTrendingData({ ...trendingData, type: category });\r\n    }, [category]);\r\n\r\n    return (\r\n        <form id=\"title-searchbar\">\r\n            <div className=\"title-bar\">\r\n                <div className=\"search-input-container\">\r\n                    <input\r\n                        id=\"title-input\"\r\n                        type=\"text\"\r\n                        value={searchTitle}\r\n                        placeholder=\"Search for a Title\"\r\n                        onChange={(e) => {\r\n                            setSearchTitle(e.target.value);\r\n                        }}\r\n                    />\r\n                    <button\r\n                        id=\"search-btn\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => {\r\n                            if (searchTitle === \"\") {\r\n                                alert(\"Please Enter Title\");\r\n                            } else {\r\n                                e.preventDefault();\r\n                                search(category, searchTitle);\r\n                                setSearchTitle(\"\");\r\n                            }\r\n                        }}\r\n                    >\r\n                        <GoSearch className=\"search-btn-icon\" />\r\n                    </button>\r\n                </div>\r\n                <div className=\"category-btn-container\">\r\n                    <button\r\n                        id=\"category-movie-btn\"\r\n                        className={`category-btn category-movie-btn ${\r\n                            category === \"movie\" ? \"category-active\" : \"\"\r\n                        }`}\r\n                        onClick={() => {\r\n                            setCategory(\"movie\");\r\n                            setSearchResults({\r\n                                ...searchResults,\r\n                                category: \"movie\",\r\n                            });\r\n                        }}\r\n                    >\r\n                        Movie\r\n                    </button>\r\n                    <button\r\n                        id=\"category-tv-btn\"\r\n                        className={`category-btn category-tv-btn ${\r\n                            category === \"tv\" ? \"category-active\" : \"\"\r\n                        }`}\r\n                        onClick={() => {\r\n                            setCategory(\"tv\");\r\n                            setSearchResults({\r\n                                ...searchResults,\r\n                                category: \"tv\",\r\n                            });\r\n                        }}\r\n                    >\r\n                        TV\r\n                    </button>\r\n                    <button\r\n                        id=\"category-people-btn\"\r\n                        className={`category-btn category-people-btn ${\r\n                            category === \"people\" ? \"category-active\" : \"\"\r\n                        }`}\r\n                        onClick={() => {\r\n                            setCategory(\"people\");\r\n                            setSearchResults({\r\n                                ...searchResults,\r\n                                category: \"people\",\r\n                            });\r\n                        }}\r\n                    >\r\n                        Person\r\n                    </button>\r\n                </div>\r\n                <button\r\n                    id=\"clear-search-btn\"\r\n                    onClick={() => {\r\n                        setSearchResults({\r\n                            category: \"movie\",\r\n                            movie: [],\r\n                            tv: [],\r\n                            people: [],\r\n                            query: {},\r\n                        });\r\n                    }}\r\n                >\r\n                    Clear\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Searchbar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AiOutlineFileImage } from \"react-icons/ai\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst MovieTVResultData = ({\r\n    id,\r\n    linkTo,\r\n    img,\r\n    title,\r\n    release,\r\n    overview,\r\n    type,\r\n    found,\r\n    vote,\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList, convertDate } =\r\n        useGlobalContext();\r\n\r\n    const obj = {\r\n        id: id,\r\n        title: title,\r\n        poster_path: img,\r\n        vote_average: vote,\r\n        date_added: Date.now(),\r\n        overview: overview,\r\n    };\r\n\r\n    return (\r\n        <div className=\"search-results\">\r\n            <Link to={linkTo} className=\"image-link-container\">\r\n                {img === null ? (\r\n                    <div className=\"search-img\">\r\n                        <AiOutlineFileImage\r\n                            className=\"btn-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <img\r\n                        className=\"search-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${img}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n            </Link>\r\n            <div className=\"search-info\">\r\n                <Link to={linkTo} className=\"search-title\">\r\n                    {title}\r\n                </Link>\r\n                <div className=\"search-release-overview-container\">\r\n                    <p className=\"search-release-date\">\r\n                        {convertDate(release)}\r\n                    </p>\r\n                    <p className=\"search-overview\">{overview}</p>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button\r\n                    className=\"remove-from-wishlist\"\r\n                    onClick={() => {\r\n                        found\r\n                            ? removeFromWatchList(type, id)\r\n                            : addToWatchList(type, obj);\r\n                    }}\r\n                >\r\n                    {found ? (\r\n                        <IoMdRemoveCircleOutline\r\n                            className=\"remove-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    ) : (\r\n                        <IoMdAddCircleOutline\r\n                            className=\"add-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    )}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieTVResultData;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AiOutlineFileImage } from \"react-icons/ai\";\r\n\r\nconst PeopleResultData = ({ person }) => {\r\n    return (\r\n        <div className=\"person-search-results-card\">\r\n            <Link\r\n                to={`/result/people/${person.id}`}\r\n                className=\"person-image-container\"\r\n            >\r\n                {person.profile_path === null ? (\r\n                    <AiOutlineFileImage\r\n                        className=\"btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <img\r\n                        className=\"person-search-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${person.profile_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n            </Link>\r\n            <div className=\"person-search-info\">\r\n                <Link\r\n                    to={`/result/people/${person.id}`}\r\n                    className=\"person-name\"\r\n                >\r\n                    {person.name}\r\n                </Link>\r\n                <div className=\"person-known-role-container\">\r\n                    <p className=\"person-known-for\">\r\n                        Known for: {person.known_for_department}\r\n                    </p>\r\n                    {person.known_for.map((role) => {\r\n                        return (\r\n                            <div key={role.id} className=\"known-for-role\">\r\n                                <p className=\"known-for-title\">{role.title}</p>\r\n                                <p className=\"known-for-date\">\r\n                                    {role.release_date}\r\n                                </p>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PeopleResultData;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst TrendingData = ({ title, img, id, link }) => {\r\n    return (\r\n        <div className=\"trending-tile\">\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${img}`}\r\n                alt=\"\"\r\n                className=\"trending-img\"\r\n            />\r\n            <Link to={`/result/${link}/${id}`} className=\"trending-link\">\r\n                <h3 className=\"trending-title\">{title}</h3>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TrendingData;\r\n","import React, { useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport MovieTVResultData from \"./SearchResultsCard/movietvresultdata\";\r\nimport PeopleResultData from \"./SearchResultsCard/peopleresultdata\";\r\nimport useHorizontalScroll from \"../../hooks/useHorizontalScroll\";\r\nimport TrendingData from \"./SearchTrending/trendingdata\";\r\n\r\nconst SearchResults = () => {\r\n    const {\r\n        searchResults,\r\n        trendingData,\r\n        setTrendingData,\r\n        isMovieInWatchlist,\r\n        isTvShowInWatchlist,\r\n    } = useGlobalContext();\r\n\r\n    const movieTrendingRef = useHorizontalScroll(false);\r\n    const tvTrendingRef = useHorizontalScroll(false);\r\n    const peopleTrendingRef = useHorizontalScroll(false);\r\n\r\n    const getTrendingMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/movie/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n    const getTrendingTVData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/tv/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n    const getTrendingPeopleData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/person/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n\r\n    const getAllTrending = async () => {\r\n        const obj = {\r\n            type: \"movie\",\r\n            movie: await getTrendingMovieData(),\r\n            tv: await getTrendingTVData(),\r\n            person: await getTrendingPeopleData(),\r\n        };\r\n        setTrendingData(obj);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllTrending();\r\n    }, []);\r\n\r\n    switch (trendingData.type) {\r\n        case \"movie\":\r\n            if (searchResults.movie.length === 0) {\r\n                return (\r\n                    <div className=\"trending-movie-container\">\r\n                        <div className=\"search-trending-title-container\">\r\n                            <h2 className=\"search-trending-title\">\r\n                                Trending Movies\r\n                            </h2>\r\n                        </div>\r\n                        <div\r\n                            className=\"trending-data-container\"\r\n                            ref={movieTrendingRef}\r\n                        >\r\n                            {trendingData.movie.map((film) => {\r\n                                return (\r\n                                    <TrendingData\r\n                                        key={film.id}\r\n                                        id={film.id}\r\n                                        title={film.title}\r\n                                        img={film.poster_path}\r\n                                        link={\"movie\"}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"search-results-container\">\r\n                        <h3 className=\"showing-results-for\">\r\n                            Showing results for \"\r\n                            {searchResults.query.movie.toUpperCase()}\"\r\n                        </h3>\r\n                        {searchResults.movie.map((movie) => {\r\n                            return (\r\n                                <MovieTVResultData\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    found={isMovieInWatchlist(movie.id)}\r\n                                    linkTo={`/result/movie/${movie.id}`}\r\n                                    img={movie.poster_path}\r\n                                    title={movie.title}\r\n                                    release={movie.release_date}\r\n                                    overview={movie.overview}\r\n                                    type={\"movie\"}\r\n                                    vote={movie.vote_average}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                );\r\n            }\r\n        case \"tv\":\r\n            if (searchResults.tv.length === 0) {\r\n                return (\r\n                    <div className=\"trending-movie-container\">\r\n                        <div className=\"search-trending-title-container\">\r\n                            <h2 className=\"search-trending-title\">\r\n                                Trending TV Shows\r\n                            </h2>\r\n                        </div>\r\n                        <div\r\n                            className=\"trending-data-container\"\r\n                            ref={tvTrendingRef}\r\n                        >\r\n                            {trendingData.tv.map((show) => {\r\n                                return (\r\n                                    <TrendingData\r\n                                        key={show.id}\r\n                                        id={show.id}\r\n                                        title={show.name}\r\n                                        img={show.poster_path}\r\n                                        link={\"tv\"}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"search-results-container\">\r\n                        <h3 className=\"showing-results-for\">\r\n                            Showing results for \"\r\n                            {searchResults.query.tv.toUpperCase()}\"\r\n                        </h3>\r\n                        {searchResults.tv.map((tvshow) => {\r\n                            return (\r\n                                <MovieTVResultData\r\n                                    key={tvshow.id}\r\n                                    id={tvshow.id}\r\n                                    found={isTvShowInWatchlist(tvshow.id)}\r\n                                    linkTo={`/result/tv/${tvshow.id}`}\r\n                                    img={tvshow.poster_path}\r\n                                    title={tvshow.name}\r\n                                    release={tvshow.first_air_date}\r\n                                    overview={tvshow.overview}\r\n                                    type={\"tv\"}\r\n                                    vote={tvshow.vote_average}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                );\r\n            }\r\n        case \"people\":\r\n            if (searchResults.people.length === 0) {\r\n                return (\r\n                    <div className=\"trending-movie-container\">\r\n                        <div className=\"search-trending-title-container\">\r\n                            <h2 className=\"search-trending-title\">\r\n                                Trending People\r\n                            </h2>\r\n                        </div>\r\n                        <div\r\n                            className=\"trending-data-container\"\r\n                            ref={peopleTrendingRef}\r\n                        >\r\n                            {trendingData.person.map((peep) => {\r\n                                return (\r\n                                    <TrendingData\r\n                                        key={peep.id}\r\n                                        id={peep.id}\r\n                                        title={peep.name}\r\n                                        img={peep.profile_path}\r\n                                        link={\"people\"}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"people-search-results-container\">\r\n                        <h3 className=\"showing-results-for\">\r\n                            Showing results for \"\r\n                            {searchResults.query.person.toUpperCase()}\"\r\n                        </h3>\r\n                        <div className=\"people-search-results\">\r\n                            {searchResults.people.map((item, index) => {\r\n                                return (\r\n                                    <PeopleResultData\r\n                                        key={item.id}\r\n                                        index={index}\r\n                                        person={item}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n};\r\n\r\nexport default SearchResults;\r\n","import React from \"react\";\r\n\r\nconst FullScreenReview = ({ author, written, review }) => {\r\n    return (\r\n        <div className=\"fullscreen-review\">\r\n            <h4>A review by {author}</h4>\r\n            <h5>\r\n                <i>\r\n                    Written by {author} on {written}\r\n                </i>\r\n            </h5>\r\n            <p className=\"review-content\">{review}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FullScreenReview;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport {\r\n    AiFillStar,\r\n    AiOutlineFileImage,\r\n    AiOutlineClose,\r\n    AiOutlineExpandAlt,\r\n} from \"react-icons/ai\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport FullScreenReview from \"./fullscreenreview/fullscreenreview\";\r\n\r\nconst MovieFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [movieData, setMovieData] = useState({});\r\n    const [movieReviewData, setMovieReviewData] = useState({});\r\n    const [movieCreditData, setMovieCreditData] = useState({});\r\n    const [toggle, setToggle] = useState({ category: \"cast\" });\r\n    const {\r\n        addToWatchList,\r\n        removeFromWatchList,\r\n        isMovieInWatchlist,\r\n        convertDate,\r\n        expandBiography,\r\n        setExpandBiography,\r\n        modalContent,\r\n        setModalContent,\r\n    } = useGlobalContext();\r\n\r\n    const getMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieData(data);\r\n    };\r\n\r\n    const getMovieReview = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieReviewData(data);\r\n    };\r\n\r\n    const getMovieCredit = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}/credits?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieCreditData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getMovieData();\r\n        getMovieReview();\r\n        getMovieCredit();\r\n    }, []);\r\n\r\n    const found = isMovieInWatchlist(movieData.id);\r\n\r\n    return (\r\n        <div className=\"fullscreen\">\r\n            <div className=\"fullscreen-card\">\r\n                <img\r\n                    className=\"fullscreen-img\"\r\n                    src={`https://image.tmdb.org/t/p/w500/${movieData.poster_path}`}\r\n                    alt=\"\"\r\n                />\r\n                <section className=\"fullscreen-section\">\r\n                    <section className=\"fullscreen-info\">\r\n                        <h1 className=\"fullscreen-title\">{movieData.title}</h1>\r\n                        <div className=\"fullscreen-list-info\">\r\n                            <p className=\"fullscreen-release-date\">\r\n                                {convertDate(movieData.release_date)}\r\n                            </p>\r\n                            <div className=\"ball\"></div>\r\n                            <div className=\"fullscreen-genre\">\r\n                                {movieData.genres !== undefined ? (\r\n                                    movieData.genres.map((type) => {\r\n                                        return <p key={type.id}>{type.name}</p>;\r\n                                    })\r\n                                ) : (\r\n                                    <p></p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"ball\"></div>\r\n                            <p>{movieData.runtime} mins</p>\r\n                        </div>\r\n                        <div className=\"fullscreen-rating\">\r\n                            <h4 className=\"average-score-title\">\r\n                                Average Score:\r\n                            </h4>\r\n                            <p className=\"fullscreen-vote\">\r\n                                <AiFillStar className=\"render-icon\" />\r\n                                {movieData.vote_average}\r\n                            </p>\r\n                            <button\r\n                                className=\"add-remove-button\"\r\n                                onClick={() => {\r\n                                    found\r\n                                        ? removeFromWatchList(\r\n                                              \"movie\",\r\n                                              movieData.id\r\n                                          )\r\n                                        : addToWatchList(\"movie\", movieData);\r\n                                }}\r\n                            >\r\n                                {found ? (\r\n                                    <IoMdRemoveCircleOutline\r\n                                        className=\"remove-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                ) : (\r\n                                    <IoMdAddCircleOutline\r\n                                        className=\"add-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                )}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"fullscreen-production\">\r\n                            {movieData.production_companies !== undefined ? (\r\n                                movieData.production_companies.map(\r\n                                    (company) => {\r\n                                        return (\r\n                                            <p\r\n                                                key={company.id}\r\n                                                className=\"company-name\"\r\n                                            >\r\n                                                {company.name}\r\n                                            </p>\r\n                                        );\r\n                                    }\r\n                                )\r\n                            ) : (\r\n                                <p></p>\r\n                            )}\r\n                        </div>\r\n                        <h4 className=\"fullscreen-tagline\">\r\n                            <i>{movieData.tagline}</i>\r\n                        </h4>\r\n                        <div className=\"fullscreen-overview\">\r\n                            <h3>Overview</h3>\r\n                            <p className=\"fullscreen-overview-content\">\r\n                                {movieData.overview}\r\n                            </p>\r\n                            <button\r\n                                className=\"expand-btn\"\r\n                                onClick={() => {\r\n                                    setExpandBiography(!expandBiography);\r\n                                    setModalContent(movieData.overview);\r\n                                }}\r\n                            >\r\n                                <AiOutlineExpandAlt\r\n                                    className=\"expand-icon\"\r\n                                    aria-hidden={true}\r\n                                    focusable={false}\r\n                                />\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    <section className=\"review-cast-btn-container\">\r\n                        <div className=\"review-cast-toggle-button\">\r\n                            <button\r\n                                id=\"cast-btn\"\r\n                                className={`fullscreen-toggle-btn cast-btn ${\r\n                                    toggle.category === \"cast\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => setToggle({ category: \"cast\" })}\r\n                            >\r\n                                Cast\r\n                            </button>\r\n                            <button\r\n                                id=\"review-btn\"\r\n                                className={`fullscreen-toggle-btn review-btn ${\r\n                                    toggle.category === \"review\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() =>\r\n                                    setToggle({ category: \"review\" })\r\n                                }\r\n                            >\r\n                                Reviews\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    {toggle.category === \"review\" ? (\r\n                        movieReviewData.results !== undefined ? (\r\n                            <div className=\"fullscreen-reviews\">\r\n                                {movieReviewData.results.map(\r\n                                    (result, index) => {\r\n                                        return (\r\n                                            <div>\r\n                                                <FullScreenReview\r\n                                                    key={index}\r\n                                                    author={result.author}\r\n                                                    written={convertDate(\r\n                                                        result.created_at\r\n                                                    )}\r\n                                                    review={result.content}\r\n                                                />\r\n                                                <button\r\n                                                    className=\"review-modal-expand-btn\"\r\n                                                    onClick={() => {\r\n                                                        setExpandBiography(\r\n                                                            !expandBiography\r\n                                                        );\r\n                                                        setModalContent(\r\n                                                            result.content\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    <AiOutlineExpandAlt\r\n                                                        className=\"expand-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </button>\r\n                                            </div>\r\n                                        );\r\n                                    }\r\n                                )}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : toggle.category === \"cast\" ? (\r\n                        movieCreditData.cast !== undefined ? (\r\n                            <div className=\"fullscreen-cast\">\r\n                                {movieCreditData.cast.map((cast) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={cast.id}\r\n                                            className=\"cast-credit\"\r\n                                        >\r\n                                            {cast.profile_path === null ? (\r\n                                                <div className=\"cast-btn-icon-container\">\r\n                                                    <AiOutlineFileImage\r\n                                                        className=\"cast-btn-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                <img\r\n                                                    className=\"cast-img\"\r\n                                                    src={`https://image.tmdb.org/t/p/w500/${cast.profile_path}`}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                            )}\r\n\r\n                                            <Link\r\n                                                to={`/result/people/${cast.id}`}\r\n                                                className=\"cast-name\"\r\n                                            >\r\n                                                {cast.character}\r\n                                            </Link>\r\n                                            <p className=\"cast-role\">\r\n                                                {cast.name}\r\n                                            </p>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </section>\r\n            </div>\r\n            <div\r\n                className={\r\n                    expandBiography\r\n                        ? \"modal-biography-active\"\r\n                        : \"modal-biography-hidden\"\r\n                }\r\n            >\r\n                <button\r\n                    className=\"model-exit-btn\"\r\n                    onClick={() => setExpandBiography(false)}\r\n                >\r\n                    <AiOutlineClose\r\n                        className=\"model-btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n                <p className=\"modal-biography\">{modalContent}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieFullScreenResult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport {\r\n    AiFillStar,\r\n    AiOutlineFileImage,\r\n    AiOutlineClose,\r\n    AiOutlineExpandAlt,\r\n} from \"react-icons/ai\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport FullScreenReview from \"./fullscreenreview/fullscreenreview\";\r\n\r\nconst TvFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [tvData, setTvData] = useState({});\r\n    const [tvResultData, setTvResultData] = useState({});\r\n    const [tvCreditData, setTvCreditData] = useState({});\r\n    const [toggle, setToggle] = useState({ category: \"cast\" });\r\n    const {\r\n        addToWatchList,\r\n        removeFromWatchList,\r\n        isTvShowInWatchlist,\r\n        convertDate,\r\n        expandBiography,\r\n        setExpandBiography,\r\n        modalContent,\r\n        setModalContent,\r\n    } = useGlobalContext();\r\n\r\n    const getTvData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvData(data);\r\n    };\r\n\r\n    const getTvReview = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}/reviews?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvResultData(data);\r\n    };\r\n\r\n    const getTvCredit = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}/credits?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvCreditData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getTvData();\r\n        getTvReview();\r\n        getTvCredit();\r\n    }, []);\r\n\r\n    const found = isTvShowInWatchlist(tvData.id);\r\n\r\n    return (\r\n        <div className=\"fullscreen\">\r\n            <div className=\"fullscreen-card\">\r\n                <img\r\n                    className=\"fullscreen-img\"\r\n                    src={`https://image.tmdb.org/t/p/w500/${tvData.poster_path}`}\r\n                    alt=\"\"\r\n                />\r\n                <section className=\"fullscreen-section\">\r\n                    <section className=\"fullscreen-info\">\r\n                        <h1 className=\"fullscreen-title\">{tvData.name}</h1>\r\n                        <div className=\"fullscreen-list-info\">\r\n                            <p className=\"fullscreen-release-date\">\r\n                                {convertDate(tvData.release_date)}\r\n                            </p>\r\n                            <div className=\"ball\"></div>\r\n                            <div className=\"fullscreen-genre\">\r\n                                {tvData.genres !== undefined ? (\r\n                                    tvData.genres.map((type) => {\r\n                                        return <p key={type.id}>{type.name}</p>;\r\n                                    })\r\n                                ) : (\r\n                                    <p></p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"ball\"></div>\r\n                            <p>{tvData.runtime} mins</p>\r\n                        </div>\r\n                        <div className=\"fullscreen-rating\">\r\n                            <h4 className=\"average-score-title\">\r\n                                Average Score:\r\n                            </h4>\r\n                            <p className=\"fullscreen-vote\">\r\n                                <AiFillStar className=\"render-icon\" />\r\n                                {tvData.vote_average}\r\n                            </p>\r\n                            <button\r\n                                className=\"add-remove-button\"\r\n                                onClick={() => {\r\n                                    found\r\n                                        ? removeFromWatchList(\"tv\", tvData.id)\r\n                                        : addToWatchList(\"tv\", tvData);\r\n                                }}\r\n                            >\r\n                                {found ? (\r\n                                    <IoMdRemoveCircleOutline\r\n                                        className=\"remove-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                ) : (\r\n                                    <IoMdAddCircleOutline\r\n                                        className=\"add-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                )}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"fullscreen-production\">\r\n                            {tvData.production_companies !== undefined ? (\r\n                                tvData.production_companies.map((company) => {\r\n                                    return (\r\n                                        <p\r\n                                            key={company.id}\r\n                                            className=\"company-name\"\r\n                                        >\r\n                                            {company.name}\r\n                                        </p>\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <p></p>\r\n                            )}\r\n                        </div>\r\n                        <h4 className=\"fullscreen-tagline\">\r\n                            <i>{tvData.tagline}</i>\r\n                        </h4>\r\n                        <div className=\"fullscreen-overview\">\r\n                            <h3>Overview</h3>\r\n                            <p className=\"fullscreen-overview-content\">\r\n                                {tvData.overview}\r\n                            </p>\r\n                            <button\r\n                                className=\"expand-btn\"\r\n                                onClick={() => {\r\n                                    setExpandBiography(!expandBiography);\r\n                                    setModalContent(tvData.overview);\r\n                                }}\r\n                            >\r\n                                <AiOutlineExpandAlt\r\n                                    className=\"expand-icon\"\r\n                                    aria-hidden={true}\r\n                                    focusable={false}\r\n                                />\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    <section className=\"review-cast-btn-container\">\r\n                        <div className=\"review-cast-toggle-button\">\r\n                            <button\r\n                                id=\"cast-btn\"\r\n                                className={`fullscreen-toggle-btn cast-btn ${\r\n                                    toggle.category === \"cast\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => setToggle({ category: \"cast\" })}\r\n                            >\r\n                                Cast\r\n                            </button>\r\n                            <button\r\n                                id=\"review-btn\"\r\n                                className={`fullscreen-toggle-btn review-btn ${\r\n                                    toggle.category === \"review\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() =>\r\n                                    setToggle({ category: \"review\" })\r\n                                }\r\n                            >\r\n                                Reviews\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    {toggle.category === \"review\" ? (\r\n                        tvResultData.results !== undefined ? (\r\n                            <div className=\"fullscreen-reviews\">\r\n                                {tvResultData.results.map((result, index) => {\r\n                                    return (\r\n                                        <div>\r\n                                            <FullScreenReview\r\n                                                key={index}\r\n                                                author={result.author}\r\n                                                written={convertDate(\r\n                                                    result.created_at\r\n                                                )}\r\n                                                review={result.content}\r\n                                            />\r\n                                            <button\r\n                                                className=\"review-modal-expand-btn\"\r\n                                                onClick={() => {\r\n                                                    setExpandBiography(\r\n                                                        !expandBiography\r\n                                                    );\r\n                                                    setModalContent(\r\n                                                        result.content\r\n                                                    );\r\n                                                }}\r\n                                            >\r\n                                                <AiOutlineExpandAlt\r\n                                                    className=\"expand-icon\"\r\n                                                    aria-hidden={true}\r\n                                                    focusable={false}\r\n                                                />\r\n                                            </button>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : toggle.category === \"cast\" ? (\r\n                        tvCreditData.cast !== undefined ? (\r\n                            <div className=\"fullscreen-cast\">\r\n                                {tvCreditData.cast.map((cast) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={cast.id}\r\n                                            className=\"cast-credit\"\r\n                                        >\r\n                                            {cast.profile_path === null ? (\r\n                                                <div className=\"cast-btn-icon-container\">\r\n                                                    <AiOutlineFileImage\r\n                                                        className=\"cast-btn-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                <img\r\n                                                    className=\"cast-img\"\r\n                                                    src={`https://image.tmdb.org/t/p/w500/${cast.profile_path}`}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                            )}\r\n\r\n                                            <Link\r\n                                                to={`/result/people/${cast.id}`}\r\n                                                className=\"cast-name\"\r\n                                            >\r\n                                                {cast.character}\r\n                                            </Link>\r\n                                            <p className=\"cast-role\">\r\n                                                {cast.name}\r\n                                            </p>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </section>\r\n            </div>\r\n            <div\r\n                className={\r\n                    expandBiography\r\n                        ? \"modal-biography-active\"\r\n                        : \"modal-biography-hidden\"\r\n                }\r\n            >\r\n                <button\r\n                    className=\"model-exit-btn\"\r\n                    onClick={() => setExpandBiography(false)}\r\n                >\r\n                    <AiOutlineClose\r\n                        className=\"model-btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n                <p className=\"modal-biography\">{modalContent}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TvFullScreenResult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport {\r\n    AiOutlineFileImage,\r\n    AiOutlineClose,\r\n    AiOutlineExpandAlt,\r\n} from \"react-icons/ai\";\r\nimport { GiExpand } from \"react-icons/gi\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst PeopleFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [peopleData, setPeopleData] = useState({});\r\n    const [peopleCreditData, setPeopleCreditData] = useState({});\r\n    const [peopleImageData, setPeopleImageData] = useState({});\r\n    const [toggle, setToggle] = useState({ category: \"credit\" });\r\n    const [expandImg, setExpandImg] = useState(false);\r\n    const [imgModal, setImgModal] = useState(null);\r\n\r\n    const {\r\n        convertDate,\r\n        expandBiography,\r\n        setExpandBiography,\r\n        modalContent,\r\n        setModalContent,\r\n    } = useGlobalContext();\r\n\r\n    const getPeopleData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/person/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPeopleData(data);\r\n    };\r\n\r\n    const getPeopleCreditData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/person/${id}/combined_credits?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPeopleCreditData(data);\r\n    };\r\n\r\n    const getPeopleImageData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/person/${id}/images?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        setPeopleImageData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPeopleData();\r\n        getPeopleCreditData();\r\n        getPeopleImageData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"fullscreen\">\r\n            <div className=\"fullscreen-card\">\r\n                {peopleData.profile_path === null ? (\r\n                    <div className=\"fullscreen-img\">\r\n                        <AiOutlineFileImage\r\n                            className=\"cast-btn-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <img\r\n                        className=\"fullscreen-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${peopleData.profile_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n                <section className=\"person-fullscreen-section\">\r\n                    <section className=\"fullscreen-info\">\r\n                        <h1 className=\"fullscreen-title\">{peopleData.name}</h1>\r\n                        <div className=\"person-info\">\r\n                            <div className=\"person-info-div\">\r\n                                <h4 className=\"person-info-title\">\r\n                                    Birthdate:\r\n                                </h4>\r\n                                <p className=\"person-info-para\">\r\n                                    {convertDate(peopleData.birthday)}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"person-info-div\">\r\n                                <h4 className=\"person-info-title\">\r\n                                    Place of Birth:\r\n                                </h4>\r\n                                <p className=\"person-info-para\">\r\n                                    {peopleData.place_of_birth}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"person-info-div\">\r\n                                <h4 className=\"person-info-title\">\r\n                                    Known For:\r\n                                </h4>\r\n                                <p className=\"person-info-para\">\r\n                                    {peopleData.known_for_department}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"person-biography\">\r\n                            <h3>Biography</h3>\r\n                            <p className=\"person-bio-content\">\r\n                                {peopleData.biography}\r\n                            </p>\r\n                            <button\r\n                                className=\"person-bio-expand-btn\"\r\n                                onClick={() => {\r\n                                    setExpandBiography(!expandBiography);\r\n                                    setModalContent(peopleData.biography);\r\n                                }}\r\n                            >\r\n                                <AiOutlineExpandAlt\r\n                                    className=\"expand-icon\"\r\n                                    aria-hidden={true}\r\n                                    focusable={false}\r\n                                />\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    <section className=\"review-cast-btn-container\">\r\n                        <div className=\"review-cast-toggle-button\">\r\n                            <button\r\n                                id=\"cast-btn\"\r\n                                className={`fullscreen-toggle-btn cast-btn ${\r\n                                    toggle.category === \"credit\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() =>\r\n                                    setToggle({ category: \"credit\" })\r\n                                }\r\n                            >\r\n                                Movie\r\n                            </button>\r\n                            <button\r\n                                id=\"review-btn\"\r\n                                className={`fullscreen-toggle-btn review-btn ${\r\n                                    toggle.category === \"image\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => setToggle({ category: \"image\" })}\r\n                            >\r\n                                Images\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    {toggle.category === \"credit\" ? (\r\n                        <div className=\"person-fullscreen-cast\">\r\n                            {peopleCreditData.cast !== undefined ? (\r\n                                peopleCreditData.cast.map((cast, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={index}\r\n                                            className=\"person-credit\"\r\n                                        >\r\n                                            {cast.poster_path === null ? (\r\n                                                <div className=\"cast-btn-icon-container\">\r\n                                                    <AiOutlineFileImage\r\n                                                        className=\"cast-btn-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                <img\r\n                                                    className=\"person-credit-img\"\r\n                                                    src={`https://image.tmdb.org/t/p/w500/${cast.poster_path}`}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                            )}\r\n                                            <Link\r\n                                                to={`/result/movie/${cast.id}`}\r\n                                                className=\"cast-name\"\r\n                                            >\r\n                                                <p className=\"cast-name\">\r\n                                                    {cast.title}\r\n                                                </p>\r\n                                            </Link>\r\n                                            <p className=\"person-cast-role\">\r\n                                                {cast.character}\r\n                                            </p>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <div></div>\r\n                            )}\r\n                        </div>\r\n                    ) : toggle.category === \"image\" ? (\r\n                        <div className=\"person-fullscreen-images-container\">\r\n                            {peopleImageData.profiles !== null ? (\r\n                                peopleImageData.profiles.map((img, index) => {\r\n                                    return (\r\n                                        <div className=\"person-img-container\">\r\n                                            <img\r\n                                                key={index}\r\n                                                className=\"person-img\"\r\n                                                src={`https://image.tmdb.org/t/p/w500/${img.file_path}`}\r\n                                                alt=\"\"\r\n                                            />\r\n                                            <div\r\n                                                className=\"person-img-hover\"\r\n                                                onClick={() => {\r\n                                                    setExpandImg(!expandImg);\r\n                                                    setImgModal(\r\n                                                        <img\r\n                                                            key={index}\r\n                                                            className=\"model-person-img\"\r\n                                                            src={`https://image.tmdb.org/t/p/w500/${img.file_path}`}\r\n                                                            alt=\"\"\r\n                                                        />\r\n                                                    );\r\n                                                }}\r\n                                            >\r\n                                                <GiExpand\r\n                                                    className=\"person-expand-btn-icon\"\r\n                                                    aria-hidden={true}\r\n                                                    focusable={false}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <div></div>\r\n                            )}\r\n                        </div>\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </section>\r\n            </div>\r\n            <div\r\n                className={\r\n                    expandBiography\r\n                        ? \"modal-biography-active\"\r\n                        : \"modal-biography-hidden\"\r\n                }\r\n            >\r\n                <button\r\n                    className=\"model-exit-btn\"\r\n                    onClick={() => setExpandBiography(false)}\r\n                >\r\n                    <AiOutlineClose\r\n                        className=\"model-btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n                <p className=\"modal-biography\">{modalContent}</p>\r\n            </div>\r\n            <div\r\n                className={expandImg ? \"modal-img-active\" : \"modal-img-hidden\"}\r\n            >\r\n                <button\r\n                    className=\"model-img-exit-btn\"\r\n                    onClick={() => setExpandImg(!expandImg)}\r\n                >\r\n                    <AiOutlineClose\r\n                        className=\"model-btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n                <div className=\"modal-img\">{imgModal}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PeopleFullScreenResult;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar } from \"react-icons/ai\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst WatchlistCard = ({\r\n    found,\r\n    imgSrc,\r\n    linkTo,\r\n    title,\r\n    overview,\r\n    vote,\r\n    removeCat,\r\n    removeID,\r\n    addCat,\r\n    addID,\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList } = useGlobalContext();\r\n\r\n    return (\r\n        <div className=\"card-active\">\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${imgSrc}`}\r\n                alt=\"\"\r\n                className=\"watchlist-card-img\"\r\n            />\r\n            <div className=\"watchlist-card-info\">\r\n                <Link to={linkTo} className=\"watchlist-card-link\">\r\n                    <h3>{title}</h3>\r\n                </Link>\r\n                <div className=\"watchlist-card-overview-vote-container\">\r\n                    <p className=\"watchlist-card-vote\">\r\n                        <AiFillStar className=\"watchlist-card-icon\" />\r\n                        {vote}\r\n                    </p>\r\n                    <p className=\"watchlist-card-overview\">{overview}</p>\r\n                </div>\r\n            </div>\r\n            <button\r\n                className=\"remove-from-wishlist\"\r\n                onClick={() => {\r\n                    found\r\n                        ? removeFromWatchList(removeCat, removeID)\r\n                        : addToWatchList(addCat, addID);\r\n                }}\r\n            >\r\n                {found ? (\r\n                    <IoMdRemoveCircleOutline\r\n                        className=\"remove-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <IoMdAddCircleOutline\r\n                        className=\"add-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WatchlistCard;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar } from \"react-icons/ai\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst WatchlistList = ({\r\n    found,\r\n    imgSrc,\r\n    linkTo,\r\n    title,\r\n    overview,\r\n    vote,\r\n    removeCat,\r\n    removeID,\r\n    addCat,\r\n    addID,\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList } = useGlobalContext();\r\n\r\n    return (\r\n        <div className=\"list-active\">\r\n            <Link to={linkTo} className=\"watchlist-list-img-link\">\r\n                <img\r\n                    src={`https://image.tmdb.org/t/p/w500/${imgSrc}`}\r\n                    alt=\"\"\r\n                    className=\"watchlist-list-img\"\r\n                />\r\n            </Link>\r\n            <div className=\"watchlist-list-info\">\r\n                <Link to={linkTo} className=\"watchlist-list-link\">\r\n                    <h3>{title}</h3>\r\n                </Link>\r\n                <div className=\"watchlist-list-overview-vote-container\">\r\n                    <p className=\"watchlist-list-vote\">\r\n                        <AiFillStar className=\"watchlist-list-icon\" />\r\n                        {vote}\r\n                    </p>\r\n                    <p className=\"watchlist-list-overview\">{overview}</p>\r\n                </div>\r\n            </div>\r\n            <button\r\n                className=\"remove-from-wishlist\"\r\n                onClick={() => {\r\n                    found\r\n                        ? removeFromWatchList(removeCat, removeID)\r\n                        : addToWatchList(addCat, addID);\r\n                }}\r\n            >\r\n                {found ? (\r\n                    <IoMdRemoveCircleOutline\r\n                        className=\"remove-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <IoMdAddCircleOutline\r\n                        className=\"add-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WatchlistList;\r\n","import React, { useState, useRef, useLayoutEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport { HiViewGrid, HiViewList } from \"react-icons/hi\";\r\nimport WatchlistCard from \"./WatchlistCard/watchlistcard\";\r\nimport WatchlistList from \"./WatchlistCard/watchlistList\";\r\n\r\nconst Watchlist = () => {\r\n    const {\r\n        watchList,\r\n        isMovieInWatchlist,\r\n        isTvShowInWatchlist,\r\n        movieCount,\r\n        tvCount,\r\n    } = useGlobalContext();\r\n\r\n    const [movieWatchlist, setMovieWatchlist] = useState(watchList.movie);\r\n    const [tvWatchlist, setTvWatchlist] = useState(watchList.tv);\r\n    const [valueSelect, setValueSelect] = useState({\r\n        ascending: \"\",\r\n        descending: \"\",\r\n    });\r\n    const [watchlistView, setWatchlistView] = useState(\"card\");\r\n\r\n    const sortingTypeRef = useRef();\r\n    const sortingDirectionRef = useRef();\r\n\r\n    const sortWatchlist = (a, b) => {\r\n        const sortedMovieWatchlist = [...a];\r\n        const sortedTvWatchlist = [...b];\r\n        if (sortingTypeRef.current.value === \"alphabetical\") {\r\n            setValueSelect({ ascending: \"A-Z\", descending: \"Z-A\" });\r\n            sortedMovieWatchlist.sort(compareMovieName);\r\n            sortedTvWatchlist.sort(compareTvName);\r\n        }\r\n        if (sortingTypeRef.current.value === \"rating\") {\r\n            setValueSelect({ ascending: \"Low-High\", descending: \"High-Low\" });\r\n            sortedMovieWatchlist.sort(compareRating);\r\n            sortedTvWatchlist.sort(compareRating);\r\n        }\r\n        if (sortingTypeRef.current.value === \"date-added\") {\r\n            setValueSelect({ ascending: \"New-Old\", descending: \"Old-New\" });\r\n            sortedMovieWatchlist.sort(compareDate);\r\n            sortedTvWatchlist.sort(compareDate);\r\n        }\r\n        if (sortingDirectionRef.current.value === \"descending\") {\r\n            sortedMovieWatchlist.reverse();\r\n            sortedTvWatchlist.reverse();\r\n        }\r\n        setMovieWatchlist(sortedMovieWatchlist);\r\n        setTvWatchlist(sortedTvWatchlist);\r\n    };\r\n    const compareMovieName = (a, b) => {\r\n        const nameA = a.title.toUpperCase();\r\n        const nameB = b.title.toUpperCase();\r\n        if (nameA > nameB) {\r\n            return 1;\r\n        }\r\n        if (nameA < nameB) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    };\r\n    const compareTvName = (a, b) => {\r\n        const nameA = a.name.toUpperCase();\r\n        const nameB = b.name.toUpperCase();\r\n        if (nameA > nameB) {\r\n            return 1;\r\n        }\r\n        if (nameA < nameB) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    };\r\n    const compareRating = (a, b) => {\r\n        return a.vote_average - b.vote_average;\r\n    };\r\n    const compareDate = (a, b) => {\r\n        return b.date_added - a.date_added;\r\n    };\r\n\r\n    useLayoutEffect(() => {\r\n        sortWatchlist(watchList.movie, watchList.tv);\r\n    }, [watchList]);\r\n\r\n    return (\r\n        <div id=\"fullscreen-watchlist-root-container\">\r\n            <div className=\"sorting-selection\">\r\n                <nav className=\"sorting-options-grid\">\r\n                    <div className=\"date-rating-alpha-sorting\">\r\n                        <select\r\n                            name=\"type\"\r\n                            ref={sortingTypeRef}\r\n                            onChange={() =>\r\n                                sortWatchlist(watchList.movie, watchList.tv)\r\n                            }\r\n                            className=\"date-rating-alpha-selection\"\r\n                            id=\"date-rating-alpha\"\r\n                        >\r\n                            <option value=\"alphabetical\">Alphabetical</option>\r\n                            <option value=\"date-added\">Date Added</option>\r\n                            <option value=\"rating\">Rating</option>\r\n                        </select>\r\n                        <select\r\n                            name=\"direction\"\r\n                            ref={sortingDirectionRef}\r\n                            onChange={() =>\r\n                                sortWatchlist(watchList.movie, watchList.tv)\r\n                            }\r\n                            className=\"date-rating-alpha-selection\"\r\n                            id=\"ascending-descending\"\r\n                        >\r\n                            <option value=\"ascending\">\r\n                                {valueSelect.ascending}\r\n                            </option>\r\n                            <option value=\"descending\">\r\n                                {valueSelect.descending}\r\n                            </option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"view-selection\">\r\n                        <p>View:</p>\r\n                        <div className=\"view-btn-container\">\r\n                            <button\r\n                                className=\"view-btn\"\r\n                                onClick={() => setWatchlistView(\"card\")}\r\n                            >\r\n                                <HiViewGrid className=\"view-btn-icon\" />\r\n                            </button>\r\n                            <button\r\n                                className=\"view-btn\"\r\n                                onClick={() => setWatchlistView(\"list\")}\r\n                            >\r\n                                <HiViewList className=\"view-btn-icon\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n            <div id=\"fullscreen-watchlist-flex-container\">\r\n                <div className=\"watchlist-title-container\">\r\n                    <h2 className=\"section-title\">Your Watchlist</h2>\r\n                </div>\r\n                <div id=\"fullscreen-watchlist\">\r\n                    <section\r\n                        className=\"fullscreen-watchlist-container\"\r\n                        id=\"movie-watchlist-fullscreen\"\r\n                    >\r\n                        <div className=\"fullscreen-watchlist-head\">\r\n                            <h3>Movie Watchlist</h3>\r\n                            <p>Total Added - {movieCount}</p>\r\n                        </div>\r\n                        <div className=\"fullscreen-watchlist-map\">\r\n                            {movieWatchlist.length === 0 ? (\r\n                                <div className=\"empty-watchlist\">\r\n                                    <h1>Your Watchlist is Empty...</h1>\r\n                                </div>\r\n                            ) : (\r\n                                movieWatchlist.map((item) => {\r\n                                    if (watchlistView === \"card\") {\r\n                                        return (\r\n                                            <WatchlistCard\r\n                                                key={item.id}\r\n                                                id={item.id}\r\n                                                found={isMovieInWatchlist(\r\n                                                    item.id\r\n                                                )}\r\n                                                imgSrc={item.poster_path}\r\n                                                linkTo={`/result/movie/${item.id}`}\r\n                                                title={item.title}\r\n                                                overview={item.overview}\r\n                                                vote={item.vote_average}\r\n                                                removeCat={\"movie\"}\r\n                                                removeID={item.id}\r\n                                                addCat={\"movie\"}\r\n                                                addID={item}\r\n                                            />\r\n                                        );\r\n                                    } else {\r\n                                        return (\r\n                                            <WatchlistList\r\n                                                key={item.id}\r\n                                                id={item.id}\r\n                                                found={isMovieInWatchlist(\r\n                                                    item.id\r\n                                                )}\r\n                                                imgSrc={item.poster_path}\r\n                                                linkTo={`/result/movie/${item.id}`}\r\n                                                title={item.title}\r\n                                                overview={item.overview}\r\n                                                vote={item.vote_average}\r\n                                                removeCat={\"movie\"}\r\n                                                removeID={item.id}\r\n                                                addCat={\"movie\"}\r\n                                                addID={item}\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                })\r\n                            )}\r\n                        </div>\r\n                    </section>\r\n                    <section\r\n                        className=\"fullscreen-watchlist-container\"\r\n                        id=\"tv-watchlist-fullscreen\"\r\n                    >\r\n                        <div className=\"fullscreen-watchlist-head\">\r\n                            <h3>TV Show Watchlist</h3>\r\n                            <p>Total Added - {tvCount}</p>\r\n                        </div>\r\n                        <div className=\"fullscreen-watchlist-map\">\r\n                            {tvWatchlist.length === 0 ? (\r\n                                <div className=\"empty-watchlist\">\r\n                                    <h1>Your Watchlist is Empty...</h1>\r\n                                </div>\r\n                            ) : (\r\n                                tvWatchlist.map((item) => {\r\n                                    if (watchlistView === \"card\") {\r\n                                        return (\r\n                                            <WatchlistCard\r\n                                                key={item.id}\r\n                                                id={item.id}\r\n                                                found={isTvShowInWatchlist(\r\n                                                    item.id\r\n                                                )}\r\n                                                imgSrc={item.poster_path}\r\n                                                linkTo={`/result/tv/${item.id}`}\r\n                                                title={item.name}\r\n                                                overview={item.overview}\r\n                                                vote={item.vote_average}\r\n                                                removeCat={\"tv\"}\r\n                                                removeID={item.id}\r\n                                                addCat={\"tv\"}\r\n                                                addID={item}\r\n                                            />\r\n                                        );\r\n                                    } else {\r\n                                        return (\r\n                                            <WatchlistList\r\n                                                key={item.id}\r\n                                                id={item.id}\r\n                                                found={isTvShowInWatchlist(\r\n                                                    item.id\r\n                                                )}\r\n                                                imgSrc={item.poster_path}\r\n                                                linkTo={`/result/tv/${item.id}`}\r\n                                                title={item.name}\r\n                                                overview={item.overview}\r\n                                                vote={item.vote_average}\r\n                                                removeCat={\"tv\"}\r\n                                                removeID={item.id}\r\n                                                addCat={\"tv\"}\r\n                                                addID={item}\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                })\r\n                            )}\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Watchlist;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Navbar from \"./components/Navbar/navbar\";\r\nimport Homepage from \"./components/Homepage/homepage\";\r\nimport Searchbar from \"./components/Searchbar/searchbar\";\r\nimport SearchResults from \"./components/SearchResults/searchresults\";\r\nimport MovieFullScreenResult from \"./components/FullScreenResult/moviefullscreenresult\";\r\nimport TvFullScreenResult from \"./components/FullScreenResult/tvfullscreenresult\";\r\nimport PeopleFullScreenResult from \"./components/FullScreenResult/peoplefullscreenresults\";\r\nimport Watchlist from \"./components/Watchlist/watchlist\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <Router>\r\n            <div id=\"app-container\">\r\n                <Navbar />\r\n                <Switch>\r\n                    <Route path=\"/search\">\r\n                        <Searchbar />\r\n                        <SearchResults />\r\n                    </Route>\r\n                    <Route path=\"/result/movie/:id\">\r\n                        <MovieFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/result/tv/:id\">\r\n                        <TvFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/result/people/:id\">\r\n                        <PeopleFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/watchlist\">\r\n                        <Watchlist />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Homepage />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"./components/Navbar/navbar.css\";\r\nimport \"./components/Homepage/homepage.css\";\r\nimport \"./components/Searchbar/searchbar.css\";\r\nimport \"./components/FullScreenResult/fullscreenresults.css\";\r\nimport \"./components/SearchResults/searchresults.css\";\r\nimport \"./components/Watchlist/watchlist.css\";\r\nimport App from \"./App\";\r\nimport { AppProvider } from \"./context\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <AppProvider>\r\n            <App />\r\n        </AppProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}