{"version":3,"sources":["context.js","components/Navbar/navbar.js","components/Homepage/ToggleButton/toggleButton.js","components/Homepage/RenderedCard/renderedCard.js","components/Homepage/homepage.js","components/Searchbar/searchbar.js","components/SearchResultsCard/movieresultdata.js","components/SearchResultsCard/tvresultdata.js","components/SearchResultsCard/peopleresultdata.js","components/SearchTrending/trendingdata.js","components/SearchResults/searchresults.js","components/FullScreenResult/moviefullscreenresult.js","components/FullScreenResult/tvfullscreenresult.js","components/FullScreenResult/peoplefullscreenresults.js","components/Watchlist/watchlist.js","App.js","index.js"],"names":["AppContext","React","createContext","AppProvider","children","useState","category","results","searchResults","setSearchResults","movie","tv","watchList","setWatchList","type","person","trendingData","setTrendingData","isAdded","isRemoved","title","watchListAlert","setWatchListAlert","searchMovies","query","a","fetch","response","json","data","console","log","searchTVShows","searchPeople","search","useEffect","timer","setTimeout","clearTimeout","LocalSaveWatchlist","localStorage","getItem","JSON","parse","setItem","stringify","Provider","value","addToWatchList","item","find","w","id","obj","poster_path","vote_average","name","removeFromWatchList","filter","isMovieInWatchlist","isTvShowInWatchlist","convertDate","info","Date","toLocaleString","day","month","year","useGlobalContext","useContext","Navbar","className","to","ToggleButton","handleClick","active","onClick","disabled","RenderedCard","found","imgSrc","linkTo","vote","removeCat","removeID","addCat","addID","src","alt","focusable","Homepage","popularData","setPopularData","topRatedData","setTopRatedData","getPopularMovieData","prev","getPopularTVData","getTopRatedMovieData","getTopRatedTVData","map","length","Searchbar","searchTitle","setSearchTitle","setCategory","htmlFor","placeholder","onChange","e","target","preventDefault","MovieResultData","release_date","overview","TvResultData","tvshow","first_air_date","PeopleResultData","profile_path","known_for_department","known_for","role","TrendingData","img","link","SearchResults","getTrendingMovieData","getTrendingTVData","getTrendingPeopleData","getAllTrending","index","film","show","peep","MovieFullScreenResult","useParams","movieData","setMovieData","movieReviewData","setMovieReviewData","movieCreditData","setMovieCreditData","toggle","setToggle","getMovieData","getMovieReview","getMovieCredit","undefined","genres","runtime","production_companies","company","tagline","result","author","created_at","class","content","cast","character","TvFullScreenResult","tvData","setTvData","tvResultData","setTvResultData","getTvData","getTvReview","PeopleFullScreenResult","peopleData","setPeopleData","string","birthday","getPeopleData","place_of_birth","biography","Watchlist","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6fc7e207.chunk.js","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n    const [searchResults, setSearchResults] = useState({\r\n        category: \"\",\r\n        results: [],\r\n    });\r\n    const [watchList, setWatchList] = useState({\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n    });\r\n    const [trendingData, setTrendingData] = useState({\r\n        type: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n        person: [],\r\n    });\r\n    const [watchListAlert, setWatchListAlert] = useState({\r\n        isAdded: false,\r\n        isRemoved: false,\r\n        title: \"\",\r\n    });\r\n    // const [lastAdded, setLastAdded] = useState(false);\r\n    // const [lastRemoved, setLastRemoved] = useState(false);\r\n\r\n    const searchMovies = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/movie?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        console.log(data);\r\n        setSearchResults({ category: \"movie\", results: data.results });\r\n    };\r\n\r\n    const searchTVShows = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/tv?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        console.log(data);\r\n        setSearchResults({ category: \"tv\", results: data.results });\r\n    };\r\n\r\n    const searchPeople = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/person?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        console.log(data);\r\n        setSearchResults({ category: \"people\", results: data.results });\r\n    };\r\n\r\n    const search = async (category, query) => {\r\n        switch (category) {\r\n            case \"movie\":\r\n                searchMovies(query);\r\n                break;\r\n            case \"tv\":\r\n                searchTVShows(query);\r\n                break;\r\n            case \"people\":\r\n                searchPeople(query);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const convertDate = (info) => {\r\n        const date = new Date(info);\r\n        const string = date.toLocaleString(\"default\", {\r\n            day: \"numeric\",\r\n            month: \"long\",\r\n            year: \"numeric\",\r\n        });\r\n        return string;\r\n    };\r\n\r\n    const addToWatchList = (category, item) => {\r\n        if ([...watchList.movie, ...watchList.tv].find((w) => w.id === item.id))\r\n            return;\r\n\r\n        if (category === \"movie\") {\r\n            const obj = {\r\n                id: item.id,\r\n                title: item.title,\r\n                poster_path: item.poster_path,\r\n                vote_average: item.vote_average,\r\n            };\r\n            setWatchList({\r\n                ...watchList,\r\n                movie: [...watchList.movie, obj],\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: true,\r\n                isRemoved: false,\r\n                title: item.title,\r\n            });\r\n        } else if (category === \"tv\") {\r\n            const obj = {\r\n                id: item.id,\r\n                name: item.name,\r\n                poster_path: item.poster_path,\r\n                vote_average: item.vote_average,\r\n            };\r\n            setWatchList({\r\n                ...watchList,\r\n                tv: [...watchList.tv, obj],\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: true,\r\n                isRemoved: false,\r\n                title: item.name,\r\n            });\r\n        }\r\n    };\r\n\r\n    const removeFromWatchList = (category, id) => {\r\n        if (category === \"movie\") {\r\n            setWatchList({\r\n                ...watchList,\r\n                movie: watchList.movie.filter((item) => item.id !== id),\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: false,\r\n                isRemoved: true,\r\n                title: watchList.movie.find((item) => item.id === id).title,\r\n            });\r\n        } else if (category === \"tv\") {\r\n            setWatchList({\r\n                ...watchList,\r\n                tv: watchList.tv.filter((item) => item.id !== id),\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: false,\r\n                isRemoved: true,\r\n                title: watchList.tv.find((item) => item.id === id).name,\r\n            });\r\n        }\r\n    };\r\n\r\n    const isMovieInWatchlist = (id) => {\r\n        return watchList.movie.find((item) => item.id === id);\r\n    };\r\n    const isTvShowInWatchlist = (id) => {\r\n        return watchList.tv.find((item) => item.id === id);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setWatchListAlert({ isAdded: false, isRemoved: false, title: \"\" });\r\n        }, 3000);\r\n        return () => {\r\n            clearTimeout(timer);\r\n        };\r\n    }, [watchListAlert]);\r\n\r\n    useEffect(() => {\r\n        const LocalSaveWatchlist = localStorage.getItem(\"Watchlist\");\r\n        console.log(LocalSaveWatchlist);\r\n        if (LocalSaveWatchlist) {\r\n            setWatchList(JSON.parse(LocalSaveWatchlist));\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        localStorage.setItem(\"Watchlist\", JSON.stringify(watchList));\r\n    }, [watchList]);\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                trendingData,\r\n                setTrendingData,\r\n                search,\r\n                searchResults,\r\n                watchList,\r\n                setWatchList,\r\n                addToWatchList,\r\n                removeFromWatchList,\r\n                isMovieInWatchlist,\r\n                isTvShowInWatchlist,\r\n                convertDate,\r\n                watchListAlert,\r\n            }}\r\n        >\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GoSearch } from \"react-icons/go\";\r\nimport { useGlobalContext } from \"../../context\";\r\n\r\nconst Navbar = () => {\r\n    const { watchListAlert } = useGlobalContext();\r\n    return (\r\n        <div>\r\n            <nav id=\"navbar\">\r\n                <ul id=\"navbar-list\">\r\n                    <li>\r\n                        <Link className=\"nav-link\" to=\"/\">\r\n                            Home\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link className=\"nav-link\" to=\"/watchlist\">\r\n                            Watchlist\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link className=\"nav-link\" to=\"/search\">\r\n                            <GoSearch className=\"link-icon\" />\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n            <div id=\"display\">\r\n                <div\r\n                    id=\"watchlist-alert\"\r\n                    className={\r\n                        watchListAlert.isAdded\r\n                            ? \"added\"\r\n                            : watchListAlert.isRemoved\r\n                            ? \"removed\"\r\n                            : \"\"\r\n                    }\r\n                >\r\n                    {watchListAlert.isAdded ? (\r\n                        <p>Added to Watchlist - {watchListAlert.title}</p>\r\n                    ) : watchListAlert.isRemoved ? (\r\n                        <p>Removed from Watchlist - {watchListAlert.title}</p>\r\n                    ) : (\r\n                        <p></p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nconst ToggleButton = ({ handleClick, active }) => {\r\n    return (\r\n        <div className=\"toggle-button-group\">\r\n            <button\r\n                className={`toggle-btn movie-toggle ${\r\n                    active === \"movie\" ? \"active\" : \"\"\r\n                }`}\r\n                onClick={handleClick}\r\n                disabled={active === \"movie\"}\r\n            >\r\n                Movie\r\n            </button>\r\n            <button\r\n                className={`toggle-btn tv-toggle ${\r\n                    active === \"tv\" ? \"active\" : \"\"\r\n                }`}\r\n                onClick={handleClick}\r\n                disabled={active === \"tv\"}\r\n            >\r\n                TV\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToggleButton;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar } from \"react-icons/ai\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst RenderedCard = ({\r\n    found,\r\n    imgSrc,\r\n    linkTo,\r\n    title,\r\n    vote,\r\n    removeCat,\r\n    removeID,\r\n    addCat,\r\n    addID,\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList } = useGlobalContext();\r\n\r\n    return (\r\n        <div className=\"render-card\">\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${imgSrc}`}\r\n                alt=\"\"\r\n                className=\"render-img\"\r\n            />\r\n            <Link to={linkTo} className=\"render-card-link\">\r\n                <h3>{title}</h3>\r\n            </Link>\r\n            <p className=\"render-vote\">\r\n                <AiFillStar className=\"render-icon\" />\r\n                {vote}\r\n            </p>\r\n            <button\r\n                className=\"remove-from-wishlist\"\r\n                onClick={() => {\r\n                    found\r\n                        ? removeFromWatchList(removeCat, removeID)\r\n                        : addToWatchList(addCat, addID);\r\n                }}\r\n            >\r\n                {found ? (\r\n                    <IoMdRemoveCircleOutline\r\n                        className=\"remove-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <IoMdAddCircleOutline\r\n                        className=\"add-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RenderedCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport ToggleButton from \"./ToggleButton/toggleButton\";\r\nimport RenderedCard from \"./RenderedCard/renderedCard\";\r\n\r\nconst Homepage = () => {\r\n    const { watchList, setWatchList, isMovieInWatchlist, isTvShowInWatchlist } =\r\n        useGlobalContext();\r\n    const [popularData, setPopularData] = useState({\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n    });\r\n    const [topRatedData, setTopRatedData] = useState({\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n    });\r\n\r\n    const getPopularMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/popular?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPopularData((prev) => {\r\n            return { ...prev, movie: data.results };\r\n        });\r\n    };\r\n\r\n    const getPopularTVData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/popular?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPopularData((prev) => {\r\n            return { ...prev, tv: data.results };\r\n        });\r\n    };\r\n\r\n    const getTopRatedMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/top_rated?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTopRatedData((prev) => {\r\n            return { ...prev, movie: data.results };\r\n        });\r\n    };\r\n\r\n    const getTopRatedTVData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/top_rated?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTopRatedData((prev) => {\r\n            return { ...prev, tv: data.results };\r\n        });\r\n    };\r\n\r\n    const togglePopularCategory = () => {\r\n        setPopularData({\r\n            ...popularData,\r\n            category: popularData.category === \"movie\" ? \"tv\" : \"movie\",\r\n        });\r\n    };\r\n\r\n    const toggleTopRatedCategory = () => {\r\n        setTopRatedData({\r\n            ...topRatedData,\r\n            category: topRatedData.category === \"movie\" ? \"tv\" : \"movie\",\r\n        });\r\n    };\r\n\r\n    const toggleWatchlistCategory = () => {\r\n        setWatchList({\r\n            ...watchList,\r\n            category: watchList.category === \"movie\" ? \"tv\" : \"movie\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPopularMovieData();\r\n        getPopularTVData();\r\n        getTopRatedMovieData();\r\n        getTopRatedTVData();\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"homepage\">\r\n            <section id=\"popular\" className=\"section\">\r\n                <h2>What's Popular</h2>\r\n                <ToggleButton\r\n                    handleClick={togglePopularCategory}\r\n                    active={popularData.category}\r\n                />\r\n                <div\r\n                    id=\"popular-container\"\r\n                    className=\"homepage-render-container\"\r\n                >\r\n                    {popularData.category === \"movie\" ? (\r\n                        popularData.movie.map((movie) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    found={isMovieInWatchlist(movie.id)}\r\n                                    imgSrc={movie.poster_path}\r\n                                    linkTo={`/result/movie/${movie.id}`}\r\n                                    title={movie.title}\r\n                                    vote={movie.vote_average}\r\n                                    removeCat={\"movie\"}\r\n                                    removeID={movie.id}\r\n                                    addCat={\"movie\"}\r\n                                    addID={movie}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : popularData.category === \"tv\" ? (\r\n                        popularData.tv.map((tv) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={tv.id}\r\n                                    id={tv.id}\r\n                                    found={isTvShowInWatchlist(tv.id)}\r\n                                    imgSrc={tv.poster_path}\r\n                                    linkTo={`/result/tv/${tv.id}`}\r\n                                    title={tv.name}\r\n                                    vote={tv.vote_average}\r\n                                    removeCat={\"tv\"}\r\n                                    removeID={tv.id}\r\n                                    addCat={\"tv\"}\r\n                                    addID={tv}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n            </section>\r\n            <section id=\"rated\" className=\"section\">\r\n                <h2>Top Rated</h2>\r\n                <ToggleButton\r\n                    handleClick={toggleTopRatedCategory}\r\n                    active={topRatedData.category}\r\n                />\r\n                <div\r\n                    id=\"top-rated-container\"\r\n                    className=\"homepage-render-container\"\r\n                >\r\n                    {topRatedData.category === \"movie\" ? (\r\n                        topRatedData.movie.map((movie) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    found={isMovieInWatchlist(movie.id)}\r\n                                    imgSrc={movie.poster_path}\r\n                                    linkTo={`/result/movie/${movie.id}`}\r\n                                    title={movie.title}\r\n                                    vote={movie.vote_average}\r\n                                    removeCat={\"movie\"}\r\n                                    removeID={movie.id}\r\n                                    addCat={\"movie\"}\r\n                                    addID={movie}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : topRatedData.category === \"tv\" ? (\r\n                        topRatedData.tv.map((tv) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={tv.id}\r\n                                    id={tv.id}\r\n                                    found={isTvShowInWatchlist(tv.id)}\r\n                                    imgSrc={tv.poster_path}\r\n                                    linkTo={`/result/tv/${tv.id}`}\r\n                                    title={tv.name}\r\n                                    vote={tv.vote_average}\r\n                                    removeCat={\"tv\"}\r\n                                    removeID={tv.id}\r\n                                    addCat={\"tv\"}\r\n                                    addID={tv}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n            </section>\r\n            <section id=\"watchlist\" className=\"section\">\r\n                <h2>Watchlist</h2>\r\n                <ToggleButton\r\n                    handleClick={toggleWatchlistCategory}\r\n                    active={watchList.category}\r\n                />\r\n                <div\r\n                    id=\"watchlist-container\"\r\n                    className=\"homepage-render-container\"\r\n                >\r\n                    {(watchList.category === \"movie\" &&\r\n                        !watchList.movie.length) ||\r\n                    (watchList.category === \"tv\" && !watchList.tv.length) ? (\r\n                        <div id=\"watchlist-empty\">\r\n                            <h2>Your Watchlist is Empty...</h2>\r\n                        </div>\r\n                    ) : watchList.category === \"movie\" ? (\r\n                        watchList.movie.map((item) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={item.id}\r\n                                    id={item.id}\r\n                                    found={isMovieInWatchlist(item.id)}\r\n                                    imgSrc={item.poster_path}\r\n                                    linkTo={`/result/movie/${item.id}`}\r\n                                    title={item.title}\r\n                                    vote={item.vote_average}\r\n                                    removeCat={\"movie\"}\r\n                                    removeID={item.id}\r\n                                    addCat={\"movie\"}\r\n                                    addID={item}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : watchList.category === \"tv\" ? (\r\n                        watchList.tv.map((item) => {\r\n                            return (\r\n                                <RenderedCard\r\n                                    key={item.id}\r\n                                    id={item.id}\r\n                                    found={isTvShowInWatchlist(item.id)}\r\n                                    imgSrc={item.poster_path}\r\n                                    linkTo={`/result/tv/${item.id}`}\r\n                                    title={item.name}\r\n                                    vote={item.vote_average}\r\n                                    removeCat={\"tv\"}\r\n                                    removeID={item.id}\r\n                                    addCat={\"tv\"}\r\n                                    addID={item}\r\n                                />\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Homepage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\n\r\nconst Searchbar = () => {\r\n    const [searchTitle, setSearchTitle] = useState(\"\");\r\n    const [category, setCategory] = useState(\"movie\");\r\n\r\n    const { search, trendingData, setTrendingData } = useGlobalContext();\r\n\r\n    useEffect(() => {\r\n        setTrendingData({ ...trendingData, type: category });\r\n    }, [category]);\r\n\r\n    return (\r\n        <form id=\"title-searchbar\">\r\n            <div className=\"title-bar\">\r\n                <label htmlFor=\"title-input\" className=\"hidden-label\">\r\n                    Location Input\r\n                </label>\r\n                <input\r\n                    id=\"title-input\"\r\n                    type=\"text\"\r\n                    value={searchTitle}\r\n                    placeholder=\"Search for a title\"\r\n                    onChange={(e) => {\r\n                        setSearchTitle(e.target.value);\r\n                    }}\r\n                />\r\n                <label htmlFor=\"search-btn\" className=\"hidden-label\">\r\n                    Search Button\r\n                </label>\r\n                <button\r\n                    id=\"search-btn\"\r\n                    type=\"submit\"\r\n                    onClick={(e) => {\r\n                        e.preventDefault();\r\n                        search(category, searchTitle);\r\n                        setSearchTitle(\"\");\r\n                    }}\r\n                >\r\n                    Search\r\n                </button>\r\n                <label\r\n                    htmlFor=\"search-options-dropdown\"\r\n                    className=\"hidden-label\"\r\n                >\r\n                    Search Options\r\n                </label>\r\n                <select\r\n                    value={category}\r\n                    onChange={(e) => {\r\n                        setCategory(e.target.value);\r\n                    }}\r\n                    id=\"search-options-dropdown\"\r\n                >\r\n                    <option value=\"movie\">Movie</option>\r\n                    <option value=\"tv\">TV Show</option>\r\n                    <option value=\"people\">Person</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Searchbar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AiOutlineFileImage } from \"react-icons/ai\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { useGlobalContext } from \"../../context\";\r\n\r\nconst MovieResultData = ({ movie }) => {\r\n    const {\r\n        addToWatchList,\r\n        removeFromWatchList,\r\n        isMovieInWatchlist,\r\n        convertDate,\r\n    } = useGlobalContext();\r\n    const found = isMovieInWatchlist(movie.id);\r\n    return (\r\n        <div id=\"movie-search-results\">\r\n            <Link\r\n                to={`/result/movie/${movie.id}`}\r\n                id=\"movie-image-container\"\r\n                className=\"movie-link\"\r\n            >\r\n                {movie.poster_path === null ? (\r\n                    <div className=\"search-img\">\r\n                        <AiOutlineFileImage\r\n                            className=\"btn-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <img\r\n                        id=\"movie-img\"\r\n                        className=\"search-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n            </Link>\r\n            <div className=\"search-info\">\r\n                <Link to={`/result/movie/${movie.id}`} className=\"movie-link\">\r\n                    <h3 id=\"movie-title\">{movie.title}</h3>\r\n                </Link>\r\n                <p id=\"movie-release-date\">{convertDate(movie.release_date)}</p>\r\n                <p id=\"movie-overview\" className=\"overview\">\r\n                    {movie.overview}\r\n                </p>\r\n            </div>\r\n            <div>\r\n                <button\r\n                    className=\"remove-from-wishlist\"\r\n                    onClick={() => {\r\n                        found\r\n                            ? removeFromWatchList(\"movie\", movie.id)\r\n                            : addToWatchList(\"movie\", movie);\r\n                    }}\r\n                >\r\n                    {found ? (\r\n                        <IoMdRemoveCircleOutline\r\n                            className=\"remove-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    ) : (\r\n                        <IoMdAddCircleOutline\r\n                            className=\"add-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    )}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieResultData;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AiOutlineFileImage } from \"react-icons/ai\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\n\r\nimport { useGlobalContext } from \"../../context\";\r\n\r\nconst TvResultData = ({ tvshow }) => {\r\n    const {\r\n        addToWatchList,\r\n        removeFromWatchList,\r\n        isTvShowInWatchlist,\r\n        convertDate,\r\n    } = useGlobalContext();\r\n\r\n    const found = isTvShowInWatchlist(tvshow.id);\r\n    return (\r\n        <div id=\"tvshow-search-results\">\r\n            <Link\r\n                to={`/result/tv/${tvshow.id}`}\r\n                id=\"tvshow-image-container\"\r\n                className=\"tv-link\"\r\n            >\r\n                {tvshow.poster_path === null ? (\r\n                    <div className=\"search-img\">\r\n                        <AiOutlineFileImage\r\n                            className=\"btn-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <img\r\n                        id=\"tvshow-img\"\r\n                        className=\"search-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${tvshow.poster_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n            </Link>\r\n            <div className=\"search-info\">\r\n                <Link to={`/result/tv/${tvshow.id}`} className=\"tv-link\">\r\n                    <h3 id=\"tvshow-title\">{tvshow.name}</h3>\r\n                </Link>\r\n                <p id=\"tvshow-air-date\">{convertDate(tvshow.first_air_date)}</p>\r\n                <p id=\"tvshow-overview\" className=\"overview\">\r\n                    {tvshow.overview}\r\n                </p>\r\n            </div>\r\n            <div>\r\n                <button\r\n                    className=\"remove-from-wishlist\"\r\n                    onClick={() => {\r\n                        found\r\n                            ? removeFromWatchList(\"tv\", tvshow.id)\r\n                            : addToWatchList(\"tv\", tvshow);\r\n                    }}\r\n                >\r\n                    {found ? (\r\n                        <IoMdRemoveCircleOutline\r\n                            className=\"remove-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    ) : (\r\n                        <IoMdAddCircleOutline\r\n                            className=\"add-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    )}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TvResultData;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AiOutlineFileImage } from \"react-icons/ai\";\r\n\r\nconst PeopleResultData = ({ person }) => {\r\n    return (\r\n        <div id=\"person-result-card\">\r\n            <div id=\"person-search-results\">\r\n                <Link to={`/result/people/${person.id}`}>\r\n                    <div id=\"person-image-container\">\r\n                        {person.profile_path === null ? (\r\n                            <div className=\"search-img\">\r\n                                <AiOutlineFileImage\r\n                                    className=\"btn-icon\"\r\n                                    aria-hidden={true}\r\n                                    focusable={false}\r\n                                />\r\n                            </div>\r\n                        ) : (\r\n                            <img\r\n                                id=\"person-img\"\r\n                                className=\"search-img\"\r\n                                src={`https://image.tmdb.org/t/p/w500/${person.profile_path}`}\r\n                                alt=\"\"\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </Link>\r\n                <div className=\"search-info\">\r\n                    <Link to={`/result/people/${person.id}`}>\r\n                        <h3 id=\"person-name\">{person.name}</h3>\r\n                    </Link>\r\n                    <p id=\"person-known-for\">{person.known_for_department}</p>\r\n                    {person.known_for.map((role) => {\r\n                        return (\r\n                            <div key={role.id}>\r\n                                <p>{role.title}</p>\r\n                                <p>{role.release_date}</p>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PeopleResultData;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst TrendingData = ({ title, img, id, link }) => {\r\n    return (\r\n        <div className=\"trending-tile\">\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${img}`}\r\n                alt=\"\"\r\n                className=\"trending-img\"\r\n            />\r\n            <Link to={`/result/${link}/${id}`} className=\"trending-link\">\r\n                <h3 className=\"trending-title\">{title}</h3>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TrendingData;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport MovieResultData from \"../SearchResultsCard/movieresultdata\";\r\nimport TvResultData from \"../SearchResultsCard/tvresultdata\";\r\nimport PeopleResultData from \"../SearchResultsCard/peopleresultdata\";\r\nimport TrendingData from \"../SearchTrending/trendingdata\";\r\n\r\nconst SearchResults = () => {\r\n    const { searchResults, trendingData, setTrendingData } = useGlobalContext();\r\n\r\n    const getTrendingMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/movie/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n    const getTrendingTVData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/tv/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n    const getTrendingPeopleData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/person/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n\r\n    const getAllTrending = async () => {\r\n        const obj = {\r\n            type: \"movie\",\r\n            movie: await getTrendingMovieData(),\r\n            tv: await getTrendingTVData(),\r\n            person: await getTrendingPeopleData(),\r\n        };\r\n        setTrendingData(obj);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllTrending();\r\n    }, []);\r\n\r\n    if (searchResults.results.length === 0) {\r\n        switch (trendingData.type) {\r\n            case \"movie\":\r\n                return (\r\n                    <div className=\"trending-data-container\">\r\n                        {trendingData.movie.map((film) => {\r\n                            return (\r\n                                <TrendingData\r\n                                    key={film.id}\r\n                                    id={film.id}\r\n                                    title={film.title}\r\n                                    img={film.poster_path}\r\n                                    link={\"movie\"}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                );\r\n            case \"tv\":\r\n                return (\r\n                    <div className=\"trending-data-container\">\r\n                        {trendingData.tv.map((show) => {\r\n                            return (\r\n                                <TrendingData\r\n                                    key={show.id}\r\n                                    id={show.id}\r\n                                    title={show.name}\r\n                                    img={show.poster_path}\r\n                                    link={\"tv\"}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                );\r\n            case \"people\":\r\n                return (\r\n                    <div className=\"trending-data-container\">\r\n                        {trendingData.person.map((peep) => {\r\n                            return (\r\n                                <TrendingData\r\n                                    key={peep.id}\r\n                                    id={peep.id}\r\n                                    title={peep.name}\r\n                                    img={peep.profile_path}\r\n                                    link={\"people\"}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                );\r\n            default:\r\n                break;\r\n        }\r\n    } else {\r\n        return (\r\n            <div id=\"search-results-container\">\r\n                {searchResults.results.map((item, index) => {\r\n                    switch (searchResults.category) {\r\n                        case \"movie\":\r\n                            return (\r\n                                <MovieResultData\r\n                                    key={item.id}\r\n                                    index={index}\r\n                                    movie={item}\r\n                                />\r\n                            );\r\n                        case \"tv\":\r\n                            return (\r\n                                <TvResultData\r\n                                    index={index}\r\n                                    tvshow={item}\r\n                                    key={item.id}\r\n                                />\r\n                            );\r\n                        case \"people\":\r\n                            return (\r\n                                <PeopleResultData\r\n                                    key={item.id}\r\n                                    index={index}\r\n                                    person={item}\r\n                                />\r\n                            );\r\n                        default:\r\n                            break;\r\n                    }\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SearchResults;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar, AiOutlineFileImage } from \"react-icons/ai\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\n\r\nconst MovieFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [movieData, setMovieData] = useState({});\r\n    const [movieReviewData, setMovieReviewData] = useState({});\r\n    const [movieCreditData, setMovieCreditData] = useState({});\r\n    const [toggle, setToggle] = useState(false);\r\n    const {\r\n        addToWatchList,\r\n        removeFromWatchList,\r\n        isMovieInWatchlist,\r\n        convertDate,\r\n    } = useGlobalContext();\r\n\r\n    const getMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieData(data);\r\n    };\r\n\r\n    const getMovieReview = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieReviewData(data);\r\n    };\r\n\r\n    const getMovieCredit = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}/credits?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieCreditData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getMovieData();\r\n        getMovieReview();\r\n        getMovieCredit();\r\n    }, []);\r\n\r\n    const found = isMovieInWatchlist(movieData.id);\r\n\r\n    return (\r\n        <div\r\n            className=\"fullscreen\"\r\n            // style={{\r\n            //     backgroundImage:\r\n            //         \"url(\" +\r\n            //         `http://image.tmdb.org/t/p/w500/${movieData.backdrop_path}` +\r\n            //         \")\",\r\n            //     backgroundSize: \"cover\",\r\n            //     backgroundPosition: \"center\",\r\n            // }}\r\n        >\r\n            <div className=\"fullscreen-card\">\r\n                <div className=\"fullscreen-img\">\r\n                    <img\r\n                        src={`http://image.tmdb.org/t/p/w500/${movieData.poster_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                </div>\r\n                <div className=\"fullscreen-section\">\r\n                    <div className=\"fullscreen-info\">\r\n                        <h1 className=\"fullscreen-title\">{movieData.title}</h1>\r\n                        <div className=\"fullscreen-list-info\">\r\n                            <p>{convertDate(movieData.release_date)}</p>\r\n                            <div className=\"ball\"></div>\r\n                            <div className=\"fullscreen-genre\">\r\n                                {movieData.genres !== undefined ? (\r\n                                    movieData.genres.map((type) => {\r\n                                        return <p key={type.id}>{type.name}</p>;\r\n                                    })\r\n                                ) : (\r\n                                    <p></p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"ball\"></div>\r\n                            <p>{movieData.runtime} mins</p>\r\n                        </div>\r\n                        <div className=\"fullscreen-rating\">\r\n                            <h4>Average Score:</h4>\r\n                            <p className=\"fullscreen-vote\">\r\n                                <AiFillStar className=\"render-icon\" />\r\n                                {movieData.vote_average}\r\n                            </p>\r\n                            <button\r\n                                className=\"add-remove-button\"\r\n                                onClick={() => {\r\n                                    found\r\n                                        ? removeFromWatchList(\r\n                                              \"movie\",\r\n                                              movieData.id\r\n                                          )\r\n                                        : addToWatchList(\"movie\", movieData);\r\n                                }}\r\n                            >\r\n                                {found ? (\r\n                                    <IoMdRemoveCircleOutline\r\n                                        className=\"remove-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                ) : (\r\n                                    <IoMdAddCircleOutline\r\n                                        className=\"add-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                )}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"fullscreen-production\">\r\n                            {movieData.production_companies !== undefined ? (\r\n                                movieData.production_companies.map(\r\n                                    (company) => {\r\n                                        return (\r\n                                            <p\r\n                                                key={company.id}\r\n                                                className=\"company-name\"\r\n                                            >\r\n                                                {company.name}\r\n                                            </p>\r\n                                        );\r\n                                    }\r\n                                )\r\n                            ) : (\r\n                                <p></p>\r\n                            )}\r\n                        </div>\r\n                        <h4 className=\"fullscreen-tagline\">\r\n                            <i>{movieData.tagline}</i>\r\n                        </h4>\r\n                        <div className=\"fullscreen-overview\">\r\n                            <h3>Overview</h3>\r\n                            <p>{movieData.overview}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"review-cast-toggle-button\">\r\n                        <button onClick={() => setToggle(false)}>Cast</button>\r\n                        <button onClick={() => setToggle(true)}>Reviews</button>\r\n                    </div>\r\n                    {toggle ? (\r\n                        movieReviewData.results !== undefined ? (\r\n                            <div className=\"fullscreen-reviews\">\r\n                                {movieReviewData.results.map((result) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={result.id}\r\n                                            className=\"fullscreen-review\"\r\n                                        >\r\n                                            <h4>A review by {result.author}</h4>\r\n                                            <h5>\r\n                                                <i>\r\n                                                    Written by {result.author}{\" \"}\r\n                                                    on{\" \"}\r\n                                                    {convertDate(\r\n                                                        result.created_at\r\n                                                    )}\r\n                                                </i>\r\n                                            </h5>\r\n                                            <p class=\"review-content\">\r\n                                                {result.content}\r\n                                            </p>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : movieCreditData.cast !== undefined ? (\r\n                        <div className=\"fullscreen-cast\">\r\n                            {movieCreditData.cast.map((cast) => {\r\n                                return (\r\n                                    <div key={cast.id} className=\"cast-credit\">\r\n                                        {cast.profile_path === null ? (\r\n                                            <AiOutlineFileImage\r\n                                                className=\"btn-icon cast-img\"\r\n                                                aria-hidden={true}\r\n                                                focusable={false}\r\n                                            />\r\n                                        ) : (\r\n                                            <img\r\n                                                className=\"cast-img\"\r\n                                                src={`http://image.tmdb.org/t/p/w500/${cast.profile_path}`}\r\n                                                alt=\"\"\r\n                                            />\r\n                                        )}\r\n\r\n                                        <p className=\"cast-role\">\r\n                                            {cast.character}\r\n                                        </p>\r\n                                        <Link\r\n                                            to={`/result/people/${cast.id}`}\r\n                                            className=\"cast-name\"\r\n                                        >\r\n                                            {cast.name}\r\n                                        </Link>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieFullScreenResult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar } from \"react-icons/ai\";\r\n\r\nconst TvFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [tvData, setTvData] = useState({});\r\n    const [tvResultData, setTvResultData] = useState({});\r\n\r\n    const {\r\n        addToWatchList,\r\n        removeFromWatchList,\r\n        isTvShowInWatchlist,\r\n        convertDate,\r\n    } = useGlobalContext();\r\n\r\n    const getTvData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvData(data);\r\n    };\r\n\r\n    const getTvReview = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}/reviews?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvResultData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getTvData();\r\n        getTvReview();\r\n    }, []);\r\n\r\n    const found = isTvShowInWatchlist(tvData.id);\r\n\r\n    return (\r\n        <div className=\"fullscreen\">\r\n            <div className=\"fullscreen-card\">\r\n                <div className=\"fullscreen-img\">\r\n                    <img\r\n                        src={`http://image.tmdb.org/t/p/w500/${tvData.poster_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                </div>\r\n                <div className=\"fullscreen-info\">\r\n                    <h1 className=\"fullscreen-title\">{tvData.name}</h1>\r\n                    <div className=\"fullscreen-list-info\">\r\n                        <p>{convertDate(tvData.first_air_date)}</p>\r\n                        <div className=\"ball\"></div>\r\n                        <div className=\"fullscreen-genre\">\r\n                            {tvData.genres !== undefined ? (\r\n                                tvData.genres.map((type) => {\r\n                                    return <p key={type.id}>{type.name}</p>;\r\n                                })\r\n                            ) : (\r\n                                <p></p>\r\n                            )}\r\n                        </div>\r\n                        <div className=\"ball\"></div>\r\n                        <p>{tvData.runtime} mins</p>\r\n                    </div>\r\n                    <div className=\"fullscreen-rating\">\r\n                        <h4>Average Score:</h4>\r\n                        <p className=\"fullscreen-vote\">\r\n                            <AiFillStar className=\"render-icon\" />\r\n                            {tvData.vote_average}\r\n                        </p>\r\n                        <button\r\n                            className=\"add-remove-button\"\r\n                            onClick={() => {\r\n                                found\r\n                                    ? removeFromWatchList(\"tv\", tvData.id)\r\n                                    : addToWatchList(\"tv\", tvData);\r\n                            }}\r\n                        >\r\n                            {found ? (\r\n                                <IoMdRemoveCircleOutline\r\n                                    className=\"remove-icon\"\r\n                                    aria-hidden={true}\r\n                                    focusable={false}\r\n                                />\r\n                            ) : (\r\n                                <IoMdAddCircleOutline\r\n                                    className=\"add-icon\"\r\n                                    aria-hidden={true}\r\n                                    focusable={false}\r\n                                />\r\n                            )}\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"fullscreen-production\">\r\n                        {tvData.production_companies !== undefined ? (\r\n                            tvData.production_companies.map((company) => {\r\n                                return (\r\n                                    <p\r\n                                        key={company.id}\r\n                                        className=\"company-name\"\r\n                                    >\r\n                                        {company.name}\r\n                                    </p>\r\n                                );\r\n                            })\r\n                        ) : (\r\n                            <p></p>\r\n                        )}\r\n                    </div>\r\n                    <h4 className=\"fullscreen-tagline\">\r\n                        <i>{tvData.tagline}</i>\r\n                    </h4>\r\n                    <div className=\"fullscreen-overview\">\r\n                        <h3>Overview</h3>\r\n                        <p>{tvData.overview}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"fullscreen-reviews\">\r\n                    {tvResultData.results !== undefined ? (\r\n                        tvResultData.results.map((result) => {\r\n                            return (\r\n                                <div\r\n                                    key={result.id}\r\n                                    className=\"fullscreen-review\"\r\n                                >\r\n                                    <h4>A review by {result.author}</h4>\r\n                                    <h5>\r\n                                        <i>\r\n                                            Written by {result.author} on{\" \"}\r\n                                            {convertDate(result.created_at)}\r\n                                        </i>\r\n                                    </h5>\r\n                                    <p class=\"review-content\">\r\n                                        {result.content}\r\n                                    </p>\r\n                                </div>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TvFullScreenResult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst PeopleFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [peopleData, setPeopleData] = useState({});\r\n\r\n    const date = new Date(peopleData.birthday);\r\n    const string = date.toLocaleString(\"default\", {\r\n        day: \"numeric\",\r\n        month: \"long\",\r\n        year: \"numeric\",\r\n    });\r\n\r\n    const getPeopleData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/person/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPeopleData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPeopleData();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"fullscreen\">\r\n            <div id=\"people-fullscreen-card\">\r\n                <div id=\"people-fullscreen-img\">\r\n                    <img\r\n                        src={`http://image.tmdb.org/t/p/w500/${peopleData.profile_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                </div>\r\n                <div id=\"people-info\">\r\n                    <h1>{peopleData.name}</h1>\r\n                    <h3>Personal Info</h3>\r\n                    <h4>Known For:</h4>\r\n                    <p>{peopleData.known_for_department}</p>\r\n                    <h4>Birthdate:</h4>\r\n                    <p>{string}</p>\r\n                    <h4>Place of Birth:</h4>\r\n                    <p>{peopleData.place_of_birth}</p>\r\n                </div>\r\n                <div id=\"people-biography\">\r\n                    <h3>Biography</h3>\r\n                    <p>{peopleData.biography}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PeopleFullScreenResult;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\n\r\nconst Watchlist = () => {\r\n    const { Watchlist } = useGlobalContext();\r\n    return <div></div>;\r\n};\r\n\r\nexport default Watchlist;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Navbar from \"./components/Navbar/navbar\";\r\nimport Homepage from \"./components/Homepage/homepage\";\r\nimport Searchbar from \"./components/Searchbar/searchbar\";\r\nimport SearchResults from \"./components/SearchResults/searchresults\";\r\nimport MovieFullScreenResult from \"./components/FullScreenResult/moviefullscreenresult\";\r\nimport TvFullScreenResult from \"./components/FullScreenResult/tvfullscreenresult\";\r\nimport PeopleFullScreenResult from \"./components/FullScreenResult/peoplefullscreenresults\";\r\nimport Watchlist from \"./components/Watchlist/watchlist\";\r\nimport Footer from \"./components/Navbar/footer\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <Router>\r\n            <div id=\"app-container\">\r\n                <Navbar />\r\n\r\n                <Switch>\r\n                    <Route path=\"/search\">\r\n                        <Searchbar />\r\n                        <SearchResults />\r\n                    </Route>\r\n                    <Route path=\"/result/movie/:id\">\r\n                        <MovieFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/result/tv/:id\">\r\n                        <TvFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/result/people/:id\">\r\n                        <PeopleFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/watchlist\">\r\n                        <Watchlist />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Homepage />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"./components/Navbar/navbar.css\";\r\nimport \"./components/Homepage/homepage.css\";\r\nimport \"./components/Searchbar/searchbar.css\";\r\nimport \"./components/SearchResults/searchresults.css\";\r\nimport \"./components/FullScreenResult/fullscreenresults.css\";\r\nimport \"./components/FullScreenResult/peoplefullscreenresults.css\";\r\nimport \"./components/SearchResultsCard/movieresultdata.css\";\r\nimport \"./components/SearchResultsCard/tvresultdata.css\";\r\nimport \"./components/SearchResultsCard/peopleresultdata.css\";\r\nimport \"./components/SearchTrending/trendingdata.css\";\r\nimport App from \"./App\";\r\nimport { AppProvider } from \"./context\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <AppProvider>\r\n            <App />\r\n        </AppProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}