{"version":3,"sources":["hooks/useLocalStorage.js","context.js","hooks/useWindowDimensions.js","hooks/useHorizontalScroll.js","hooks/useFetch.js","components/ToggleButton/toggleButton.js","components/Homepage/RenderedCard/renderedCard.js","components/Carousel/Carousel.js","components/Homepage/homepage.js","components/FullScreenResult/fullscreenreview/fullscreenreview.js","components/FullScreenResult/moviefullscreenresult.js","components/FullScreenResult/tvfullscreenresult.js","components/FullScreenResult/peoplefullscreenresults.js","components/Watchlist/WatchlistCard/watchlistcard.js","components/Watchlist/WatchlistCard/watchlistList.js","components/Watchlist/watchlist.js","components/Search/Searchbar/searchbar.js","components/Search/SearchResults/SearchResultsCard/movietvresultdata.js","components/Search/SearchResults/SearchResultsCard/peopleresultdata.js","components/Search/SearchResults/SearchTrending/trendingdata.js","components/Search/SearchResults/searchresults.js","components/Search/Search.js","components/NavbarContainer/Navbar/addremovewatchlist.js","components/NavbarContainer/Navbar/navbar.js","components/NavbarContainer/NavbarContainer.js","App.js","index.js"],"names":["useLocalStorage","key","initialState","useState","retrieve","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","AppContext","React","createContext","AppProvider","children","category","movie","tv","people","query","searchResults","setSearchResults","watchList","setWatchList","type","person","trendingData","setTrendingData","isAdded","isRemoved","title","watchListAlert","setWatchListAlert","expandBiography","setExpandBiography","modalContent","setModalContent","movieCount","setMovieCount","tvCount","setTvCount","isScroll","setIsScroll","showHideAlert","setShowHideAlert","searchMovies","a","fetch","response","json","data","results","searchTVShows","searchPeople","search","timer","setTimeout","clearTimeout","length","Provider","value","addToWatchList","item","find","w","id","obj","poster_path","vote_average","date_added","Date","now","overview","name","removeFromWatchList","filter","isMovieInWatchlist","isTvShowInWatchlist","convertDate","info","toLocaleString","day","month","year","toggleWatchlistCategory","returnToTop","ref","className","onClick","current","scrollTop","useGlobalContext","useContext","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","window","width","innerWidth","height","innerHeight","getWindowDimensions","addEventListener","removeEventListener","useHorizontalScroll","preventParentScrolling","elRef","useRef","el","onWheel","e","deltaY","preventDefault","scrollLeft","scrollWidth","clientWidth","Math","round","scrollTo","left","useFetch","url","loading","setLoading","setData","error","setError","ok","Error","statusText","fetchData","ToggleButton","handleClick","active","disabled","RenderedCard","found","imgSrc","linkTo","vote","removeCat","removeID","addCat","addID","index","position","src","alt","to","focusable","Carousel","activeCardIndex","setActiveCardIndex","touchStart","setTouchStart","touchEnd","setTouchEnd","handlePreviousClick","newIndex","handleNextClick","getPositionClassName","onTouchStart","targetTouches","clientX","onTouchMove","onTouchEnd","map","child","Homepage","popularMovieData","popularMovieLoading","popularTVData","popularTVLoading","topRatedMovieData","topRatedMovieLoading","topRatedTVData","topRatedTVLoading","popularCategory","setPopularCategory","topRatedCategory","setTopRatedCategory","homeScroll","popScrollRef","topScrollRef","watchScrollRef","togglePopularCategory","toggleTopRatedCategory","getMappedCards","array","FullScreenReview","author","written","review","MovieFullScreenResult","useParams","movieData","setMovieData","movieReviewData","setMovieReviewData","movieCreditData","setMovieCreditData","toggle","setToggle","mobileToggle","setMobileToggle","getMovieData","getMovieReview","getMovieCredit","release_date","undefined","genres","runtime","production_companies","company","tagline","cast","profile_path","character","result","created_at","content","movieContentToggle","TvFullScreenResult","tvData","setTvData","tvResultData","setTvResultData","tvCreditData","setTvCreditData","mobileTVToggle","setMobileTVToggle","getTvData","getTvReview","getTvCredit","first_air_date","tvContentToggle","PeopleFullScreenResult","peopleData","setPeopleData","peopleCreditData","setPeopleCreditData","peopleImageData","setPeopleImageData","expandImg","setExpandImg","imgModal","setImgModal","mobilePersonToggle","setMobilePersonToggle","getPeopleData","getPeopleCreditData","getPeopleImageData","birthday","place_of_birth","known_for_department","biography","profiles","img","file_path","personContentToggle","WatchlistCard","WatchlistList","Watchlist","movieWatchlist","setMovieWatchlist","tvWatchlist","setTvWatchlist","ascending","descending","valueSelect","setValueSelect","watchlistView","setWatchlistView","isMovieShown","setIsMovieShown","isTVShown","setIsTVShown","sortingTypeRef","sortingDirectionRef","movieWatchlistRef","tvWatchlistRef","sortWatchlist","b","sortedMovieWatchlist","sortedTvWatchlist","sort","compareMovieName","compareTvName","compareRating","compareDate","reverse","nameA","toUpperCase","nameB","useLayoutEffect","onChange","style","display","Searchbar","searchTitle","setSearchTitle","setCategory","placeholder","placeHolderSearchText","target","alert","MovieTVResultData","release","PeopleResultData","known_for","role","TrendingData","link","SearchResults","movieTrendingRef","tvTrendingRef","peopleTrendingRef","getTrendingMovieData","getTrendingTVData","getTrendingPeopleData","getAllTrending","film","show","tvshow","peep","Search","scrollRef","onScroll","Addremovewatchlist","Navbar","isHover","setIsHover","toggleHover","onMouseEnter","onMouseLeave","NavbarContainer","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51b8617f.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useLocalStorage = (key, initialState) => {\r\n    const [state, setState] = useState(() => {\r\n        const retrieve = localStorage.getItem(key);\r\n        return retrieve ? JSON.parse(retrieve) : initialState;\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (state) {\r\n            localStorage.setItem(key, JSON.stringify(state));\r\n        }\r\n    }, [state]);\r\n\r\n    return [state, setState];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport useLocalStorage from \"./hooks/useLocalStorage\";\r\nimport { BiUpArrow } from \"react-icons/bi\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n    const [searchResults, setSearchResults] = useState({\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n        people: [],\r\n        query: {},\r\n    });\r\n    const [watchList, setWatchList] = useLocalStorage(\"Watchlist\", {\r\n        category: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n    });\r\n    const [trendingData, setTrendingData] = useState({\r\n        type: \"movie\",\r\n        movie: [],\r\n        tv: [],\r\n        person: [],\r\n    });\r\n    const [watchListAlert, setWatchListAlert] = useState({\r\n        isAdded: false,\r\n        isRemoved: false,\r\n        title: \"\",\r\n    });\r\n    const [expandBiography, setExpandBiography] = useState(false);\r\n    const [modalContent, setModalContent] = useState(null);\r\n    const [movieCount, setMovieCount] = useState(0);\r\n    const [tvCount, setTvCount] = useState(0);\r\n    const [isScroll, setIsScroll] = useState(false);\r\n    const [showHideAlert, setShowHideAlert] = useState(false);\r\n\r\n    const searchMovies = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/movie?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        setSearchResults({\r\n            ...searchResults,\r\n            category: \"movie\",\r\n            movie: data.results,\r\n            query: { ...searchResults.query, movie: query },\r\n        });\r\n    };\r\n\r\n    const searchTVShows = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/tv?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        setSearchResults({\r\n            ...searchResults,\r\n            category: \"tv\",\r\n            tv: data.results,\r\n            query: { ...searchResults.query, tv: query },\r\n        });\r\n    };\r\n\r\n    const searchPeople = async (query) => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/search/person?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB&query=${query}&page=1&include_adult=false`\r\n        );\r\n        const data = await response.json();\r\n        setSearchResults({\r\n            ...searchResults,\r\n            category: \"people\",\r\n            people: data.results,\r\n            query: { ...searchResults.query, person: query },\r\n        });\r\n    };\r\n\r\n    const search = async (category, query) => {\r\n        switch (category) {\r\n            case \"movie\":\r\n                searchMovies(query);\r\n                break;\r\n            case \"tv\":\r\n                searchTVShows(query);\r\n                break;\r\n            case \"people\":\r\n                searchPeople(query);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const convertDate = (info) => {\r\n        const date = new Date(info);\r\n        const string = date.toLocaleString(\"default\", {\r\n            day: \"numeric\",\r\n            month: \"long\",\r\n            year: \"numeric\",\r\n        });\r\n        return string;\r\n    };\r\n\r\n    const addToWatchList = (category, item) => {\r\n        if ([...watchList.movie, ...watchList.tv].find((w) => w.id === item.id))\r\n            return;\r\n        if (category === \"movie\") {\r\n            const obj = {\r\n                id: item.id,\r\n                title: item.title,\r\n                poster_path: item.poster_path,\r\n                vote_average: item.vote_average,\r\n                date_added: Date.now(),\r\n                overview: item.overview,\r\n            };\r\n            setWatchList({\r\n                ...watchList,\r\n                movie: [...watchList.movie, obj],\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: true,\r\n                isRemoved: false,\r\n                title: item.title,\r\n            });\r\n        } else if (category === \"tv\") {\r\n            const obj = {\r\n                id: item.id,\r\n                name: item.name,\r\n                poster_path: item.poster_path,\r\n                vote_average: item.vote_average,\r\n                date_added: Date.now(),\r\n                overview: item.overview,\r\n            };\r\n            setWatchList({\r\n                ...watchList,\r\n                tv: [...watchList.tv, obj],\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: true,\r\n                isRemoved: false,\r\n                title: item.name,\r\n            });\r\n        }\r\n    };\r\n\r\n    const removeFromWatchList = (category, id) => {\r\n        if (category === \"movie\") {\r\n            setWatchList({\r\n                ...watchList,\r\n                movie: watchList.movie.filter((item) => item.id !== id),\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: false,\r\n                isRemoved: true,\r\n                title: watchList.movie.find((item) => item.id === id).title,\r\n            });\r\n        } else if (category === \"tv\") {\r\n            setWatchList({\r\n                ...watchList,\r\n                tv: watchList.tv.filter((item) => item.id !== id),\r\n            });\r\n            setWatchListAlert({\r\n                isAdded: false,\r\n                isRemoved: true,\r\n                title: watchList.tv.find((item) => item.id === id).name,\r\n            });\r\n        }\r\n    };\r\n\r\n    const isMovieInWatchlist = (id) => {\r\n        return watchList.movie.find((item) => item.id === id);\r\n    };\r\n    const isTvShowInWatchlist = (id) => {\r\n        return watchList.tv.find((item) => item.id === id);\r\n    };\r\n\r\n    const toggleWatchlistCategory = () => {\r\n        setWatchList({\r\n            ...watchList,\r\n            category: watchList.category === \"movie\" ? \"tv\" : \"movie\",\r\n        });\r\n    };\r\n\r\n    const returnToTop = (ref) => {\r\n        if (isScroll) {\r\n            return (\r\n                <button\r\n                    className=\"return-to-top\"\r\n                    onClick={() => {\r\n                        ref.current.scrollTop = 0;\r\n                    }}\r\n                >\r\n                    <BiUpArrow className=\"up-icon\" />\r\n                </button>\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setShowHideAlert(false);\r\n        }, 3000);\r\n        return () => {\r\n            clearTimeout(timer);\r\n        };\r\n    }, [showHideAlert]);\r\n\r\n    useEffect(() => {\r\n        setMovieCount(watchList.movie.length);\r\n        setTvCount(watchList.tv.length);\r\n    }, [watchList]);\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                trendingData,\r\n                setTrendingData,\r\n                setSearchResults,\r\n                search,\r\n                searchResults,\r\n                watchList,\r\n                setWatchList,\r\n                addToWatchList,\r\n                removeFromWatchList,\r\n                isMovieInWatchlist,\r\n                isTvShowInWatchlist,\r\n                convertDate,\r\n                watchListAlert,\r\n                movieCount,\r\n                tvCount,\r\n                expandBiography,\r\n                setExpandBiography,\r\n                modalContent,\r\n                setModalContent,\r\n                toggleWatchlistCategory,\r\n                isScroll,\r\n                setIsScroll,\r\n                returnToTop,\r\n                showHideAlert,\r\n                setShowHideAlert,\r\n            }}\r\n        >\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useWindowDimensions = () => {\r\n    const [windowDimensions, setWindowDimensions] = useState({});\r\n\r\n    const getWindowDimensions = () => {\r\n        const { innerWidth: width, innerHeight: height } = window;\r\n        return { width, height };\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWindowDimensions(getWindowDimensions());\r\n        };\r\n        handleResize();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize);\r\n        };\r\n    }, []);\r\n    return [windowDimensions];\r\n};\r\n\r\nexport default useWindowDimensions;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nconst useHorizontalScroll = (preventParentScrolling = true) => {\r\n    const elRef = useRef();\r\n    useEffect(() => {\r\n        const el = elRef.current;\r\n        if (el) {\r\n            const onWheel = (e) => {\r\n                if (e.deltaY === 0) return;\r\n                if (preventParentScrolling === true) {\r\n                    e.preventDefault();\r\n                } else if (\r\n                    !(el.scrollLeft === 0 && e.deltaY < 0) &&\r\n                    !(\r\n                        el.scrollWidth -\r\n                            el.clientWidth -\r\n                            Math.round(el.scrollLeft) ===\r\n                            0 && e.deltaY > 0\r\n                    )\r\n                ) {\r\n                    e.preventDefault();\r\n                }\r\n                el.scrollTo({\r\n                    left: el.scrollLeft + e.deltaY,\r\n                });\r\n            };\r\n            el.addEventListener(\"wheel\", onWheel);\r\n            return () => el.removeEventListener(\"wheel\", onWheel);\r\n        }\r\n    }, []);\r\n    return elRef;\r\n};\r\n\r\nexport default useHorizontalScroll;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = (url) => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n                setData(await response.json());\r\n                setLoading(false);\r\n            } catch (error) {\r\n                setError(error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [url]);\r\n    return [data, loading, error];\r\n};\r\n\r\nexport default useFetch;\r\n","import React from \"react\";\r\n\r\nconst ToggleButton = ({ handleClick, active }) => {\r\n    return (\r\n        <div className=\"toggle-button-group\">\r\n            <button\r\n                className={`toggle-btn movie-toggle ${\r\n                    active === \"movie\" ? \"active\" : \"\"\r\n                }`}\r\n                onClick={handleClick}\r\n                disabled={active === \"movie\"}\r\n            >\r\n                Movie\r\n            </button>\r\n            <button\r\n                className={`toggle-btn tv-toggle ${\r\n                    active === \"tv\" ? \"active\" : \"\"\r\n                }`}\r\n                onClick={handleClick}\r\n                disabled={active === \"tv\"}\r\n            >\r\n                TV\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToggleButton;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar } from \"react-icons/ai\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst RenderedCard = ({\r\n    found,\r\n    imgSrc,\r\n    linkTo,\r\n    title,\r\n    vote,\r\n    removeCat,\r\n    removeID,\r\n    addCat,\r\n    addID,\r\n    index,\r\n    position = \"\",\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList, setShowHideAlert } =\r\n        useGlobalContext();\r\n\r\n    return (\r\n        <div\r\n            // className=\"render-card\"\r\n            className={`render-card ${position}`}\r\n        >\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${imgSrc}`}\r\n                alt=\"\"\r\n                className=\"render-img\"\r\n            />\r\n            <Link to={linkTo} className=\"render-card-link\">\r\n                <h3>{title}</h3>\r\n            </Link>\r\n            <p className=\"render-vote\">\r\n                <AiFillStar className=\"render-icon\" />\r\n                {vote}\r\n            </p>\r\n            <button\r\n                className=\"remove-from-wishlist\"\r\n                onClick={() => {\r\n                    setShowHideAlert(true);\r\n                    found\r\n                        ? removeFromWatchList(removeCat, removeID)\r\n                        : addToWatchList(addCat, addID);\r\n                }}\r\n            >\r\n                {found ? (\r\n                    <IoMdRemoveCircleOutline\r\n                        className=\"remove-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <IoMdAddCircleOutline\r\n                        className=\"add-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RenderedCard;\r\n","import React, { useState } from \"react\";\r\nimport { BsChevronLeft, BsChevronRight } from \"react-icons/bs\";\r\n\r\nconst Carousel = ({ children }) => {\r\n    const [activeCardIndex, setActiveCardIndex] = useState(0);\r\n    const [touchStart, setTouchStart] = useState(0);\r\n    const [touchEnd, setTouchEnd] = useState(0);\r\n\r\n    const handlePreviousClick = () => {\r\n        const newIndex = activeCardIndex - 1;\r\n        setActiveCardIndex(newIndex < 0 ? children.length - 1 : newIndex);\r\n    };\r\n    const handleNextClick = () => {\r\n        const newIndex = activeCardIndex + 1;\r\n        setActiveCardIndex(newIndex > children.length - 1 ? 0 : newIndex);\r\n    };\r\n    const getPositionClassName = (index) => {\r\n        return index < activeCardIndex\r\n            ? \"previous-card\"\r\n            : index > activeCardIndex\r\n            ? \"next-card\"\r\n            : \"active-card\";\r\n    };\r\n    const handleTouchStart = (e) => {\r\n        setTouchStart(e.targetTouches[0].clientX);\r\n    };\r\n    const handleTouchMove = (e) => {\r\n        setTouchEnd(e.targetTouches[0].clientX);\r\n    };\r\n    const handleTouchEnd = () => {\r\n        if (touchEnd === 0) return;\r\n        if (touchStart - touchEnd > 150) {\r\n            handleNextClick();\r\n        }\r\n        if (touchStart - touchEnd < -150) {\r\n            handlePreviousClick();\r\n        }\r\n        setTouchStart(0);\r\n        setTouchEnd(0);\r\n    };\r\n    return (\r\n        <section\r\n            className=\"carousel-container\"\r\n            onTouchStart={handleTouchStart}\r\n            onTouchMove={handleTouchMove}\r\n            onTouchEnd={handleTouchEnd}\r\n        >\r\n            {children.length > 1 && (\r\n                <button className=\"previous-btn\" onClick={handlePreviousClick}>\r\n                    <BsChevronLeft\r\n                        className=\"previous-next-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n            )}\r\n            {children.length > 1 && (\r\n                <button className=\"next-btn\" onClick={handleNextClick}>\r\n                    <BsChevronRight\r\n                        className=\"previous-next-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n            )}\r\n            {children.map((child, index) => {\r\n                return (\r\n                    <div\r\n                        className={`carousel-card ${getPositionClassName(\r\n                            index\r\n                        )}`}\r\n                    >\r\n                        {child}\r\n                    </div>\r\n                );\r\n            })}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Carousel;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\";\r\nimport useHorizontalScroll from \"../../hooks/useHorizontalScroll\";\r\nimport useFetch from \"../../hooks/useFetch\";\r\nimport ToggleButton from \"../ToggleButton/toggleButton\";\r\nimport RenderedCard from \"./RenderedCard/renderedCard\";\r\nimport Carousel from \"../Carousel/Carousel\";\r\n\r\nconst Homepage = () => {\r\n    const {\r\n        watchList,\r\n        isMovieInWatchlist,\r\n        isTvShowInWatchlist,\r\n        toggleWatchlistCategory,\r\n        setIsScroll,\r\n    } = useGlobalContext();\r\n\r\n    const [popularMovieData, popularMovieLoading, popularMovieError] = useFetch(\r\n        `https://api.themoviedb.org/3/movie/popular?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n    );\r\n    const [popularTVData, popularTVLoading, popularTVError] = useFetch(\r\n        `https://api.themoviedb.org/3/tv/popular?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n    );\r\n    const [topRatedMovieData, topRatedMovieLoading, topRatedMovieError] =\r\n        useFetch(\r\n            `https://api.themoviedb.org/3/movie/top_rated?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n    const [topRatedTVData, topRatedTVLoading, topRatedTVError] = useFetch(\r\n        `https://api.themoviedb.org/3/tv/top_rated?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n    );\r\n\r\n    const [popularCategory, setPopularCategory] = useState(\"movie\");\r\n    const [topRatedCategory, setTopRatedCategory] = useState(\"movie\");\r\n\r\n    const homeScroll = useRef();\r\n\r\n    const popScrollRef = useHorizontalScroll(false);\r\n    const topScrollRef = useHorizontalScroll(false);\r\n    const watchScrollRef = useHorizontalScroll(false);\r\n\r\n    const [windowDimensions] = useWindowDimensions();\r\n\r\n    const togglePopularCategory = () => {\r\n        setPopularCategory(popularCategory === \"movie\" ? \"tv\" : \"movie\");\r\n    };\r\n\r\n    const toggleTopRatedCategory = () => {\r\n        setTopRatedCategory(topRatedCategory === \"movie\" ? \"tv\" : \"movie\");\r\n    };\r\n\r\n    const getMappedCards = (array, category) => {\r\n        switch (category) {\r\n            case \"movie\":\r\n                return array.map((item) => {\r\n                    return (\r\n                        <RenderedCard\r\n                            key={item.id}\r\n                            id={item.id}\r\n                            found={isMovieInWatchlist(item.id)}\r\n                            imgSrc={item.poster_path}\r\n                            linkTo={`/result/movie/${item.id}`}\r\n                            title={item.title}\r\n                            vote={item.vote_average}\r\n                            removeCat={\"movie\"}\r\n                            removeID={item.id}\r\n                            addCat={\"movie\"}\r\n                            addID={item}\r\n                        />\r\n                    );\r\n                });\r\n            case \"tv\":\r\n                return array.map((item) => {\r\n                    return (\r\n                        <RenderedCard\r\n                            key={item.id}\r\n                            id={item.id}\r\n                            found={isTvShowInWatchlist(item.id)}\r\n                            imgSrc={item.poster_path}\r\n                            linkTo={`/result/tv/${item.id}`}\r\n                            title={item.name}\r\n                            vote={item.vote_average}\r\n                            removeCat={\"tv\"}\r\n                            removeID={item.id}\r\n                            addCat={\"tv\"}\r\n                            addID={item}\r\n                        />\r\n                    );\r\n                });\r\n            default:\r\n                throw new Error(\"category not found\");\r\n        }\r\n    };\r\n\r\n    if (windowDimensions.width <= 450) {\r\n        return (\r\n            <div id=\"homepage\">\r\n                <section id=\"popular\" className=\"section\">\r\n                    <div className=\"section-title-container\">\r\n                        <h2 className=\"section-title\">What's Popular</h2>\r\n                    </div>\r\n                    <ToggleButton\r\n                        handleClick={togglePopularCategory}\r\n                        active={popularCategory}\r\n                    />\r\n                    {popularMovieLoading || popularTVLoading ? (\r\n                        <div className=\"card-loading\">\r\n                            <h2>Loading...</h2>\r\n                        </div>\r\n                    ) : (\r\n                        <Carousel>\r\n                            {getMappedCards(\r\n                                popularCategory === \"movie\"\r\n                                    ? popularMovieData.results\r\n                                    : popularTVData.results,\r\n                                popularCategory\r\n                            )}\r\n                        </Carousel>\r\n                    )}\r\n                </section>\r\n                <section id=\"rated\" className=\"section\">\r\n                    <div className=\"section-title-container\">\r\n                        <h2 className=\"section-title\">Top Rated</h2>\r\n                    </div>\r\n                    <ToggleButton\r\n                        handleClick={toggleTopRatedCategory}\r\n                        active={topRatedCategory}\r\n                    />\r\n                    {topRatedMovieLoading || topRatedTVLoading ? (\r\n                        <div className=\"card-loading\">\r\n                            <h2>Loading...</h2>\r\n                        </div>\r\n                    ) : (\r\n                        <Carousel>\r\n                            {getMappedCards(\r\n                                topRatedCategory === \"movie\"\r\n                                    ? topRatedMovieData.results\r\n                                    : topRatedTVData.results,\r\n                                topRatedCategory\r\n                            )}\r\n                        </Carousel>\r\n                    )}\r\n                </section>\r\n                <section id=\"watchlist\" className=\"section\">\r\n                    <div className=\"section-title-container\">\r\n                        <h2 className=\"section-title\">Watchlist</h2>\r\n                    </div>\r\n                    <ToggleButton\r\n                        handleClick={toggleWatchlistCategory}\r\n                        active={watchList.category}\r\n                    />\r\n                    {(watchList.category === \"movie\" &&\r\n                        !watchList.movie.length) ||\r\n                    (watchList.category === \"tv\" && !watchList.tv.length) ? (\r\n                        <div id=\"watchlist-empty\">\r\n                            <h2>Your Watchlist is Empty...</h2>\r\n                        </div>\r\n                    ) : (\r\n                        <Carousel>\r\n                            {getMappedCards(\r\n                                watchList.category === \"movie\"\r\n                                    ? watchList.movie\r\n                                    : watchList.tv,\r\n                                watchList.category\r\n                            )}\r\n                        </Carousel>\r\n                    )}\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            ref={homeScroll}\r\n            id=\"homepage\"\r\n            // onScroll={() => {\r\n            //     if (windowDimensions.width > 926) {\r\n            //         if (homeScroll.current.scrollTop <= 0) {\r\n            //             setIsScroll(false);\r\n            //         } else {\r\n            //             setIsScroll(true);\r\n            //         }\r\n            //     }\r\n            // }}\r\n        >\r\n            <section id=\"popular\" className=\"section\">\r\n                <div className=\"section-title-container\">\r\n                    <h2 className=\"section-title\">What's Popular</h2>\r\n                </div>\r\n                <ToggleButton\r\n                    handleClick={togglePopularCategory}\r\n                    active={popularCategory}\r\n                />\r\n                <div\r\n                    id=\"popular-container\"\r\n                    className=\"homepage-render-container\"\r\n                    ref={popScrollRef}\r\n                >\r\n                    {popularMovieLoading || popularTVLoading ? (\r\n                        <h2>Loading</h2>\r\n                    ) : (\r\n                        getMappedCards(\r\n                            popularCategory === \"movie\"\r\n                                ? popularMovieData.results\r\n                                : popularTVData.results,\r\n                            popularCategory\r\n                        )\r\n                    )}\r\n                </div>\r\n            </section>\r\n            <section id=\"rated\" className=\"section\">\r\n                <div className=\"section-title-container\">\r\n                    <h2 className=\"section-title\">Top Rated</h2>\r\n                </div>\r\n                <ToggleButton\r\n                    handleClick={toggleTopRatedCategory}\r\n                    active={topRatedCategory}\r\n                />\r\n                <div\r\n                    id=\"top-rated-container\"\r\n                    className=\"homepage-render-container\"\r\n                    ref={topScrollRef}\r\n                >\r\n                    {topRatedMovieLoading || topRatedTVLoading ? (\r\n                        <h2>Loading</h2>\r\n                    ) : (\r\n                        getMappedCards(\r\n                            topRatedCategory === \"movie\"\r\n                                ? topRatedMovieData.results\r\n                                : topRatedTVData.results,\r\n                            topRatedCategory\r\n                        )\r\n                    )}\r\n                </div>\r\n            </section>\r\n            <section id=\"watchlist\" className=\"section\">\r\n                <div className=\"section-title-container\">\r\n                    <h2 className=\"section-title\">Watchlist</h2>\r\n                </div>\r\n                <ToggleButton\r\n                    handleClick={toggleWatchlistCategory}\r\n                    active={watchList.category}\r\n                />\r\n                <div\r\n                    id=\"watchlist-container\"\r\n                    className=\"homepage-render-container\"\r\n                    ref={watchScrollRef}\r\n                >\r\n                    {(watchList.category === \"movie\" &&\r\n                        !watchList.movie.length) ||\r\n                    (watchList.category === \"tv\" && !watchList.tv.length) ? (\r\n                        <div id=\"watchlist-empty\">\r\n                            <h2>Your Watchlist is Empty...</h2>\r\n                        </div>\r\n                    ) : (\r\n                        getMappedCards(\r\n                            watchList.category === \"movie\"\r\n                                ? watchList.movie\r\n                                : watchList.tv,\r\n                            watchList.category\r\n                        )\r\n                    )}\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Homepage;\r\n","import React from \"react\";\r\n\r\nconst FullScreenReview = ({ author, written, review }) => {\r\n    return (\r\n        <div className=\"fullscreen-review\">\r\n            <h4>A review by {author}</h4>\r\n            <h5>\r\n                <i>\r\n                    Written by {author} on {written}\r\n                </i>\r\n            </h5>\r\n            <p className=\"review-content\">{review}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FullScreenReview;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport {\r\n    AiFillStar,\r\n    AiOutlineFileImage,\r\n    AiOutlineClose,\r\n    AiOutlineExpandAlt,\r\n} from \"react-icons/ai\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport FullScreenReview from \"./fullscreenreview/fullscreenreview\";\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\";\r\n\r\nconst MovieFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [movieData, setMovieData] = useState({});\r\n    const [movieReviewData, setMovieReviewData] = useState({});\r\n    const [movieCreditData, setMovieCreditData] = useState({});\r\n    const [toggle, setToggle] = useState({ category: \"cast\" });\r\n    const [mobileToggle, setMobileToggle] = useState({ category: \"overview\" });\r\n    const {\r\n        addToWatchList,\r\n        removeFromWatchList,\r\n        isMovieInWatchlist,\r\n        convertDate,\r\n        expandBiography,\r\n        setExpandBiography,\r\n        modalContent,\r\n        setModalContent,\r\n    } = useGlobalContext();\r\n\r\n    const [windowDimensions] = useWindowDimensions();\r\n    const found = isMovieInWatchlist(movieData.id);\r\n\r\n    const getMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieData(data);\r\n    };\r\n\r\n    const getMovieReview = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieReviewData(data);\r\n    };\r\n\r\n    const getMovieCredit = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/movie/${id}/credits?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setMovieCreditData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getMovieData();\r\n        getMovieReview();\r\n        getMovieCredit();\r\n    }, []);\r\n\r\n    const movieContentToggle = () => {\r\n        switch (mobileToggle.category) {\r\n            case \"overview\":\r\n                return (\r\n                    <div className=\"mobile-fullscreen-overview\">\r\n                        <div className=\"mobile-fullscreen-list-info\">\r\n                            <p className=\"mobile-fullscreen-release-date\">\r\n                                {convertDate(movieData.release_date)}\r\n                            </p>\r\n                            <div className=\"ball\"></div>\r\n                            <div className=\"mobile-fullscreen-genre\">\r\n                                {movieData.genres !== undefined ? (\r\n                                    movieData.genres.map((type) => {\r\n                                        return <p key={type.id}>{type.name}</p>;\r\n                                    })\r\n                                ) : (\r\n                                    <p></p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"ball\"></div>\r\n                            <p>{movieData.runtime} mins</p>\r\n                        </div>\r\n                        <div className=\"mobile-fullscreen-rating\">\r\n                            <h4 className=\"mobile-average-score-title\">\r\n                                Average Score:\r\n                            </h4>\r\n                            <p className=\"mobile-fullscreen-vote\">\r\n                                <AiFillStar className=\"render-icon\" />\r\n                                {movieData.vote_average}\r\n                            </p>\r\n                            <button\r\n                                className=\"add-remove-button\"\r\n                                onClick={() => {\r\n                                    found\r\n                                        ? removeFromWatchList(\r\n                                              \"movie\",\r\n                                              movieData.id\r\n                                          )\r\n                                        : addToWatchList(\"movie\", movieData);\r\n                                }}\r\n                            >\r\n                                {found ? (\r\n                                    <IoMdRemoveCircleOutline\r\n                                        className=\"remove-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                ) : (\r\n                                    <IoMdAddCircleOutline\r\n                                        className=\"add-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                )}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"mobile-fullscreen-production\">\r\n                            {movieData.production_companies !== undefined ? (\r\n                                movieData.production_companies.map(\r\n                                    (company) => {\r\n                                        return (\r\n                                            <p\r\n                                                key={company.id}\r\n                                                className=\"mobile-company-name\"\r\n                                            >\r\n                                                {company.name}\r\n                                            </p>\r\n                                        );\r\n                                    }\r\n                                )\r\n                            ) : (\r\n                                <p></p>\r\n                            )}\r\n                        </div>\r\n                        <h4 className=\"mobile-fullscreen-tagline\">\r\n                            <i>{movieData.tagline}</i>\r\n                        </h4>\r\n                        <div className=\"mobile-fullscreen-overview-text\">\r\n                            <h3>Overview</h3>\r\n                            <p className=\"mobile-fullscreen-overview-content\">\r\n                                {movieData.overview}\r\n                            </p>\r\n                            <button\r\n                                className=\"mobile-expand-btn\"\r\n                                onClick={() => {\r\n                                    setExpandBiography(!expandBiography);\r\n                                    setModalContent(movieData.overview);\r\n                                }}\r\n                            >\r\n                                <AiOutlineExpandAlt\r\n                                    className=\"expand-icon\"\r\n                                    aria-hidden={true}\r\n                                    focusable={false}\r\n                                />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case \"cast\":\r\n                return movieCreditData.cast !== undefined ? (\r\n                    <div className=\"mobile-fullscreen-cast\">\r\n                        {movieCreditData.cast.map((cast) => {\r\n                            return (\r\n                                <div\r\n                                    key={cast.id}\r\n                                    className=\"mobile-cast-credit\"\r\n                                >\r\n                                    {cast.profile_path === null ? (\r\n                                        <div className=\"mobile-cast-btn-icon-container\">\r\n                                            <AiOutlineFileImage\r\n                                                className=\"mobile-cast-btn-icon\"\r\n                                                aria-hidden={true}\r\n                                                focusable={false}\r\n                                            />\r\n                                        </div>\r\n                                    ) : (\r\n                                        <img\r\n                                            className=\"mobile-cast-img\"\r\n                                            src={`https://image.tmdb.org/t/p/w500/${cast.profile_path}`}\r\n                                            alt=\"\"\r\n                                        />\r\n                                    )}\r\n                                    <Link\r\n                                        to={`/result/people/${cast.id}`}\r\n                                        className=\"mobile-cast-role\"\r\n                                    >\r\n                                        {cast.character}\r\n                                    </Link>\r\n                                    <p className=\"mobile-cast-name\">\r\n                                        {cast.name}\r\n                                    </p>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                ) : (\r\n                    <div></div>\r\n                );\r\n            case \"review\":\r\n                return movieReviewData.results !== undefined ? (\r\n                    <div className=\"mobile-fullscreen-reviews\">\r\n                        {movieReviewData.results.map((result, index) => {\r\n                            return (\r\n                                <div key={index}>\r\n                                    <FullScreenReview\r\n                                        author={result.author}\r\n                                        written={convertDate(result.created_at)}\r\n                                        review={result.content}\r\n                                    />\r\n                                    <button\r\n                                        className=\"review-modal-expand-btn\"\r\n                                        onClick={() => {\r\n                                            setExpandBiography(\r\n                                                !expandBiography\r\n                                            );\r\n                                            setModalContent(result.content);\r\n                                        }}\r\n                                    >\r\n                                        <AiOutlineExpandAlt\r\n                                            className=\"expand-icon\"\r\n                                            aria-hidden={true}\r\n                                            focusable={false}\r\n                                        />\r\n                                    </button>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                ) : (\r\n                    <div></div>\r\n                );\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    if (windowDimensions.width <= 950) {\r\n        return (\r\n            <div className=\"mobile-fullscreen\">\r\n                <div className=\"mobile-fullscreen-card\">\r\n                    <img\r\n                        className=\"mobile-fullscreen-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${movieData.poster_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                    <div className=\"mobile-fullscreen-section-container\">\r\n                        <h1 className=\"mobile-fullscreen-title\">\r\n                            {movieData.title}\r\n                        </h1>\r\n                        <nav className=\"mobile-fullscreen-header-container\">\r\n                            <ul className=\"mobile-fullscreen-header\">\r\n                                <li\r\n                                    className={`mobile-toggle-btn mobile-overview-btn ${\r\n                                        mobileToggle.category === \"overview\"\r\n                                            ? \"active\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() =>\r\n                                        setMobileToggle({\r\n                                            category: \"overview\",\r\n                                        })\r\n                                    }\r\n                                    disabled={\r\n                                        mobileToggle.category === \"overview\"\r\n                                    }\r\n                                >\r\n                                    Overview\r\n                                </li>\r\n                                <li\r\n                                    className={`mobile-toggle-btn mobile-cast-btn ${\r\n                                        mobileToggle.category === \"cast\"\r\n                                            ? \"active\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() =>\r\n                                        setMobileToggle({\r\n                                            category: \"cast\",\r\n                                        })\r\n                                    }\r\n                                    disabled={mobileToggle.category === \"cast\"}\r\n                                >\r\n                                    Cast\r\n                                </li>\r\n                                <li\r\n                                    className={`mobile-toggle-btn mobile-review-btn ${\r\n                                        mobileToggle.category === \"review\"\r\n                                            ? \"active\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() =>\r\n                                        setMobileToggle({\r\n                                            category: \"review\",\r\n                                        })\r\n                                    }\r\n                                    disabled={\r\n                                        mobileToggle.category === \"review\"\r\n                                    }\r\n                                >\r\n                                    Review\r\n                                </li>\r\n                            </ul>\r\n                        </nav>\r\n                        {movieContentToggle()}\r\n                    </div>\r\n                    <div\r\n                        className={\r\n                            expandBiography\r\n                                ? \"modal-biography-active\"\r\n                                : \"modal-biography-hidden\"\r\n                        }\r\n                    >\r\n                        <button\r\n                            className=\"model-exit-btn\"\r\n                            onClick={() => setExpandBiography(false)}\r\n                        >\r\n                            <AiOutlineClose\r\n                                className=\"model-btn-icon\"\r\n                                aria-hidden={true}\r\n                                focusable={false}\r\n                            />\r\n                        </button>\r\n                        <p className=\"modal-biography\">{modalContent}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"fullscreen\">\r\n            <div className=\"fullscreen-card\">\r\n                <img\r\n                    className=\"fullscreen-img\"\r\n                    src={`https://image.tmdb.org/t/p/w500/${movieData.poster_path}`}\r\n                    alt=\"\"\r\n                />\r\n                <section className=\"fullscreen-section\">\r\n                    <section className=\"fullscreen-info\">\r\n                        <h1 className=\"fullscreen-title\">{movieData.title}</h1>\r\n                        <div className=\"fullscreen-list-info\">\r\n                            <p className=\"fullscreen-release-date\">\r\n                                {convertDate(movieData.release_date)}\r\n                            </p>\r\n                            <div className=\"ball\"></div>\r\n                            <div className=\"fullscreen-genre\">\r\n                                {movieData.genres !== undefined ? (\r\n                                    movieData.genres.map((type) => {\r\n                                        return <p key={type.id}>{type.name}</p>;\r\n                                    })\r\n                                ) : (\r\n                                    <p></p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"ball\"></div>\r\n                            <p>{movieData.runtime} mins</p>\r\n                        </div>\r\n                        <div className=\"fullscreen-rating\">\r\n                            <h4 className=\"average-score-title\">\r\n                                Average Score:\r\n                            </h4>\r\n                            <p className=\"fullscreen-vote\">\r\n                                <AiFillStar className=\"render-icon\" />\r\n                                {movieData.vote_average}\r\n                            </p>\r\n                            <button\r\n                                className=\"add-remove-button\"\r\n                                onClick={() => {\r\n                                    found\r\n                                        ? removeFromWatchList(\r\n                                              \"movie\",\r\n                                              movieData.id\r\n                                          )\r\n                                        : addToWatchList(\"movie\", movieData);\r\n                                }}\r\n                            >\r\n                                {found ? (\r\n                                    <IoMdRemoveCircleOutline\r\n                                        className=\"remove-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                ) : (\r\n                                    <IoMdAddCircleOutline\r\n                                        className=\"add-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                )}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"fullscreen-production\">\r\n                            {movieData.production_companies !== undefined ? (\r\n                                movieData.production_companies.map(\r\n                                    (company) => {\r\n                                        return (\r\n                                            <p\r\n                                                key={company.id}\r\n                                                className=\"company-name\"\r\n                                            >\r\n                                                {company.name}\r\n                                            </p>\r\n                                        );\r\n                                    }\r\n                                )\r\n                            ) : (\r\n                                <p></p>\r\n                            )}\r\n                        </div>\r\n                        <h4 className=\"fullscreen-tagline\">\r\n                            <i>{movieData.tagline}</i>\r\n                        </h4>\r\n                        <div className=\"fullscreen-overview\">\r\n                            <h3>Overview</h3>\r\n                            <p className=\"fullscreen-overview-content\">\r\n                                {movieData.overview}\r\n                            </p>\r\n                            <button\r\n                                className=\"expand-btn\"\r\n                                onClick={() => {\r\n                                    setExpandBiography(!expandBiography);\r\n                                    setModalContent(movieData.overview);\r\n                                }}\r\n                            >\r\n                                <AiOutlineExpandAlt\r\n                                    className=\"expand-icon\"\r\n                                    aria-hidden={true}\r\n                                    focusable={false}\r\n                                />\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    <section className=\"review-cast-btn-container\">\r\n                        <div className=\"review-cast-toggle-button\">\r\n                            <button\r\n                                id=\"cast-btn\"\r\n                                className={`fullscreen-toggle-btn cast-btn ${\r\n                                    toggle.category === \"cast\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => setToggle({ category: \"cast\" })}\r\n                            >\r\n                                Cast\r\n                            </button>\r\n                            <button\r\n                                id=\"review-btn\"\r\n                                className={`fullscreen-toggle-btn review-btn ${\r\n                                    toggle.category === \"review\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() =>\r\n                                    setToggle({ category: \"review\" })\r\n                                }\r\n                            >\r\n                                Reviews\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    {toggle.category === \"review\" ? (\r\n                        movieReviewData.results !== undefined ? (\r\n                            <div className=\"fullscreen-reviews\">\r\n                                {movieReviewData.results.map(\r\n                                    (result, index) => {\r\n                                        return (\r\n                                            <div key={index}>\r\n                                                <FullScreenReview\r\n                                                    author={result.author}\r\n                                                    written={convertDate(\r\n                                                        result.created_at\r\n                                                    )}\r\n                                                    review={result.content}\r\n                                                />\r\n                                                <button\r\n                                                    className=\"review-modal-expand-btn\"\r\n                                                    onClick={() => {\r\n                                                        setExpandBiography(\r\n                                                            !expandBiography\r\n                                                        );\r\n                                                        setModalContent(\r\n                                                            result.content\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    <AiOutlineExpandAlt\r\n                                                        className=\"expand-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </button>\r\n                                            </div>\r\n                                        );\r\n                                    }\r\n                                )}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : toggle.category === \"cast\" ? (\r\n                        movieCreditData.cast !== undefined ? (\r\n                            <div className=\"fullscreen-cast\">\r\n                                {movieCreditData.cast.map((cast) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={cast.id}\r\n                                            className=\"cast-credit\"\r\n                                        >\r\n                                            {cast.profile_path === null ? (\r\n                                                <div className=\"cast-btn-icon-container\">\r\n                                                    <AiOutlineFileImage\r\n                                                        className=\"cast-btn-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                <img\r\n                                                    className=\"cast-img\"\r\n                                                    src={`https://image.tmdb.org/t/p/w500/${cast.profile_path}`}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                            )}\r\n\r\n                                            <Link\r\n                                                to={`/result/people/${cast.id}`}\r\n                                                className=\"cast-name\"\r\n                                            >\r\n                                                {cast.character}\r\n                                            </Link>\r\n                                            <p className=\"cast-role\">\r\n                                                {cast.name}\r\n                                            </p>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </section>\r\n            </div>\r\n            <div\r\n                className={\r\n                    expandBiography\r\n                        ? \"modal-biography-active\"\r\n                        : \"modal-biography-hidden\"\r\n                }\r\n            >\r\n                <button\r\n                    className=\"model-exit-btn\"\r\n                    onClick={() => setExpandBiography(false)}\r\n                >\r\n                    <AiOutlineClose\r\n                        className=\"model-btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n                <p className=\"modal-biography\">{modalContent}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieFullScreenResult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport {\r\n    AiFillStar,\r\n    AiOutlineFileImage,\r\n    AiOutlineClose,\r\n    AiOutlineExpandAlt,\r\n} from \"react-icons/ai\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport FullScreenReview from \"./fullscreenreview/fullscreenreview\";\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\";\r\n\r\nconst TvFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [tvData, setTvData] = useState({});\r\n    const [tvResultData, setTvResultData] = useState({});\r\n    const [tvCreditData, setTvCreditData] = useState({});\r\n    const [toggle, setToggle] = useState({ category: \"cast\" });\r\n    const [mobileTVToggle, setMobileTVToggle] = useState({\r\n        category: \"overview\",\r\n    });\r\n    const {\r\n        addToWatchList,\r\n        removeFromWatchList,\r\n        isTvShowInWatchlist,\r\n        convertDate,\r\n        expandBiography,\r\n        setExpandBiography,\r\n        modalContent,\r\n        setModalContent,\r\n    } = useGlobalContext();\r\n\r\n    const [windowDimensions] = useWindowDimensions();\r\n    const found = isTvShowInWatchlist(tvData.id);\r\n\r\n    const getTvData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvData(data);\r\n    };\r\n\r\n    const getTvReview = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}/reviews?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvResultData(data);\r\n    };\r\n\r\n    const getTvCredit = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/tv/${id}/credits?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setTvCreditData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getTvData();\r\n        getTvReview();\r\n        getTvCredit();\r\n    }, []);\r\n\r\n    const tvContentToggle = () => {\r\n        switch (mobileTVToggle.category) {\r\n            case \"overview\":\r\n                return (\r\n                    <div className=\"mobile-fullscreen-overview\">\r\n                        <div className=\"mobile-fullscreen-list-info\">\r\n                            <p className=\"mobile-fullscreen-release-date\">\r\n                                {convertDate(tvData.first_air_date)}\r\n                            </p>\r\n                            <div className=\"ball\"></div>\r\n                            <div className=\"mobile-fullscreen-genre\">\r\n                                {tvData.genres !== undefined ? (\r\n                                    tvData.genres.map((type) => {\r\n                                        return <p key={type.id}>{type.name}</p>;\r\n                                    })\r\n                                ) : (\r\n                                    <p></p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"ball\"></div>\r\n                            <p>{tvData.runtime} mins</p>\r\n                        </div>\r\n                        <div className=\"mobile-fullscreen-rating\">\r\n                            <h4 className=\"mobile-average-score-title\">\r\n                                Average Score:\r\n                            </h4>\r\n                            <p className=\"mobile-fullscreen-vote\">\r\n                                <AiFillStar className=\"render-icon\" />\r\n                                {tvData.vote_average}\r\n                            </p>\r\n                            <button\r\n                                className=\"add-remove-button\"\r\n                                onClick={() => {\r\n                                    found\r\n                                        ? removeFromWatchList(\"tv\", tvData.id)\r\n                                        : addToWatchList(\"tv\", tvData);\r\n                                }}\r\n                            >\r\n                                {found ? (\r\n                                    <IoMdRemoveCircleOutline\r\n                                        className=\"remove-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                ) : (\r\n                                    <IoMdAddCircleOutline\r\n                                        className=\"add-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                )}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"mobile-fullscreen-production\">\r\n                            {tvData.production_companies !== undefined ? (\r\n                                tvData.production_companies.map((company) => {\r\n                                    return (\r\n                                        <p\r\n                                            key={company.id}\r\n                                            className=\"mobile-company-name\"\r\n                                        >\r\n                                            {company.name}\r\n                                        </p>\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <p></p>\r\n                            )}\r\n                        </div>\r\n                        <h4 className=\"mobile-fullscreen-tagline\">\r\n                            <i>{tvData.tagline}</i>\r\n                        </h4>\r\n                        <div className=\"mobile-fullscreen-overview-text\">\r\n                            <h3>Overview</h3>\r\n                            <p className=\"mobile-fullscreen-overview-content\">\r\n                                {tvData.overview}\r\n                            </p>\r\n                            <button\r\n                                className=\"mobile-expand-btn\"\r\n                                onClick={() => {\r\n                                    setExpandBiography(!expandBiography);\r\n                                    setModalContent(tvData.overview);\r\n                                }}\r\n                            >\r\n                                <AiOutlineExpandAlt\r\n                                    className=\"expand-icon\"\r\n                                    aria-hidden={true}\r\n                                    focusable={false}\r\n                                />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case \"cast\":\r\n                return tvCreditData.cast !== undefined ? (\r\n                    <div className=\"mobile-fullscreen-cast\">\r\n                        {tvCreditData.cast.map((cast) => {\r\n                            return (\r\n                                <div\r\n                                    key={cast.id}\r\n                                    className=\"mobile-cast-credit\"\r\n                                >\r\n                                    {cast.profile_path === null ? (\r\n                                        <div className=\"mobile-cast-btn-icon-container\">\r\n                                            <AiOutlineFileImage\r\n                                                className=\"mobile-cast-btn-icon\"\r\n                                                aria-hidden={true}\r\n                                                focusable={false}\r\n                                            />\r\n                                        </div>\r\n                                    ) : (\r\n                                        <img\r\n                                            className=\"mobile-cast-img\"\r\n                                            src={`https://image.tmdb.org/t/p/w500/${cast.profile_path}`}\r\n                                            alt=\"\"\r\n                                        />\r\n                                    )}\r\n                                    <Link\r\n                                        to={`/result/people/${cast.id}`}\r\n                                        className=\"mobile-cast-role\"\r\n                                    >\r\n                                        {cast.name}\r\n                                    </Link>\r\n                                    <p className=\"mobile-cast-name\">\r\n                                        {cast.character}\r\n                                    </p>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                ) : (\r\n                    <div></div>\r\n                );\r\n            case \"review\":\r\n                return tvResultData.results !== undefined ? (\r\n                    <div className=\"mobile-fullscreen-reviews\">\r\n                        {tvResultData.results.map((result, index) => {\r\n                            return (\r\n                                <div key={index}>\r\n                                    <FullScreenReview\r\n                                        author={result.author}\r\n                                        written={convertDate(result.created_at)}\r\n                                        review={result.content}\r\n                                    />\r\n                                    <button\r\n                                        className=\"review-modal-expand-btn\"\r\n                                        onClick={() => {\r\n                                            setExpandBiography(\r\n                                                !expandBiography\r\n                                            );\r\n                                            setModalContent(result.content);\r\n                                        }}\r\n                                    >\r\n                                        <AiOutlineExpandAlt\r\n                                            className=\"expand-icon\"\r\n                                            aria-hidden={true}\r\n                                            focusable={false}\r\n                                        />\r\n                                    </button>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                ) : (\r\n                    <div></div>\r\n                );\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    if (windowDimensions.width <= 950) {\r\n        return (\r\n            <div className=\"mobile-fullscreen\">\r\n                <div className=\"mobile-fullscreen-card\">\r\n                    <img\r\n                        className=\"mobile-fullscreen-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${tvData.poster_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                    <div className=\"mobile-fullscreen-section-container\">\r\n                        <h1 className=\"mobile-fullscreen-title\">\r\n                            {tvData.name}\r\n                        </h1>\r\n                        <nav className=\"mobile-fullscreen-header-container\">\r\n                            <ul className=\"mobile-fullscreen-header\">\r\n                                <li\r\n                                    className={`mobile-toggle-btn mobile-overview-btn ${\r\n                                        mobileTVToggle.category === \"overview\"\r\n                                            ? \"active\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() =>\r\n                                        setMobileTVToggle({\r\n                                            category: \"overview\",\r\n                                        })\r\n                                    }\r\n                                    disabled={\r\n                                        mobileTVToggle.category === \"overview\"\r\n                                    }\r\n                                >\r\n                                    Overview\r\n                                </li>\r\n                                <li\r\n                                    className={`mobile-toggle-btn mobile-cast-btn ${\r\n                                        mobileTVToggle.category === \"cast\"\r\n                                            ? \"active\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() =>\r\n                                        setMobileTVToggle({\r\n                                            category: \"cast\",\r\n                                        })\r\n                                    }\r\n                                    disabled={\r\n                                        mobileTVToggle.category === \"cast\"\r\n                                    }\r\n                                >\r\n                                    Cast\r\n                                </li>\r\n                                <li\r\n                                    className={`mobile-toggle-btn mobile-review-btn ${\r\n                                        mobileTVToggle.category === \"review\"\r\n                                            ? \"active\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() =>\r\n                                        setMobileTVToggle({\r\n                                            category: \"review\",\r\n                                        })\r\n                                    }\r\n                                    disabled={\r\n                                        mobileTVToggle.category === \"review\"\r\n                                    }\r\n                                >\r\n                                    Review\r\n                                </li>\r\n                            </ul>\r\n                        </nav>\r\n                        {tvContentToggle()}\r\n                    </div>\r\n                    <div\r\n                        className={\r\n                            expandBiography\r\n                                ? \"modal-biography-active\"\r\n                                : \"modal-biography-hidden\"\r\n                        }\r\n                    >\r\n                        <button\r\n                            className=\"model-exit-btn\"\r\n                            onClick={() => setExpandBiography(false)}\r\n                        >\r\n                            <AiOutlineClose\r\n                                className=\"model-btn-icon\"\r\n                                aria-hidden={true}\r\n                                focusable={false}\r\n                            />\r\n                        </button>\r\n                        <p className=\"modal-biography\">{modalContent}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"fullscreen\">\r\n            <div className=\"fullscreen-card\">\r\n                <img\r\n                    className=\"fullscreen-img\"\r\n                    src={`https://image.tmdb.org/t/p/w500/${tvData.poster_path}`}\r\n                    alt=\"\"\r\n                />\r\n                <section className=\"fullscreen-section\">\r\n                    <section className=\"fullscreen-info\">\r\n                        <h1 className=\"fullscreen-title\">{tvData.name}</h1>\r\n                        <div className=\"fullscreen-list-info\">\r\n                            <p className=\"fullscreen-release-date\">\r\n                                {convertDate(tvData.first_air_date)}\r\n                            </p>\r\n                            <div className=\"ball\"></div>\r\n                            <div className=\"fullscreen-genre\">\r\n                                {tvData.genres !== undefined ? (\r\n                                    tvData.genres.map((type) => {\r\n                                        return <p key={type.id}>{type.name}</p>;\r\n                                    })\r\n                                ) : (\r\n                                    <p></p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"ball\"></div>\r\n                            <p>{tvData.runtime} mins</p>\r\n                        </div>\r\n                        <div className=\"fullscreen-rating\">\r\n                            <h4 className=\"average-score-title\">\r\n                                Average Score:\r\n                            </h4>\r\n                            <p className=\"fullscreen-vote\">\r\n                                <AiFillStar className=\"render-icon\" />\r\n                                {tvData.vote_average}\r\n                            </p>\r\n                            <button\r\n                                className=\"add-remove-button\"\r\n                                onClick={() => {\r\n                                    found\r\n                                        ? removeFromWatchList(\"tv\", tvData.id)\r\n                                        : addToWatchList(\"tv\", tvData);\r\n                                }}\r\n                            >\r\n                                {found ? (\r\n                                    <IoMdRemoveCircleOutline\r\n                                        className=\"remove-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                ) : (\r\n                                    <IoMdAddCircleOutline\r\n                                        className=\"add-icon\"\r\n                                        aria-hidden={true}\r\n                                        focusable={false}\r\n                                    />\r\n                                )}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"fullscreen-production\">\r\n                            {tvData.production_companies !== undefined ? (\r\n                                tvData.production_companies.map((company) => {\r\n                                    return (\r\n                                        <p\r\n                                            key={company.id}\r\n                                            className=\"company-name\"\r\n                                        >\r\n                                            {company.name}\r\n                                        </p>\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <p></p>\r\n                            )}\r\n                        </div>\r\n                        <h4 className=\"fullscreen-tagline\">\r\n                            <i>{tvData.tagline}</i>\r\n                        </h4>\r\n                        <div className=\"fullscreen-overview\">\r\n                            <h3>Overview</h3>\r\n                            <p className=\"fullscreen-overview-content\">\r\n                                {tvData.overview}\r\n                            </p>\r\n                            <button\r\n                                className=\"expand-btn\"\r\n                                onClick={() => {\r\n                                    setExpandBiography(!expandBiography);\r\n                                    setModalContent(tvData.overview);\r\n                                }}\r\n                            >\r\n                                <AiOutlineExpandAlt\r\n                                    className=\"expand-icon\"\r\n                                    aria-hidden={true}\r\n                                    focusable={false}\r\n                                />\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    <section className=\"review-cast-btn-container\">\r\n                        <div className=\"review-cast-toggle-button\">\r\n                            <button\r\n                                id=\"cast-btn\"\r\n                                className={`fullscreen-toggle-btn cast-btn ${\r\n                                    toggle.category === \"cast\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => setToggle({ category: \"cast\" })}\r\n                            >\r\n                                Cast\r\n                            </button>\r\n                            <button\r\n                                id=\"review-btn\"\r\n                                className={`fullscreen-toggle-btn review-btn ${\r\n                                    toggle.category === \"review\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() =>\r\n                                    setToggle({ category: \"review\" })\r\n                                }\r\n                            >\r\n                                Reviews\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    {toggle.category === \"review\" ? (\r\n                        tvResultData.results !== undefined ? (\r\n                            <div className=\"fullscreen-reviews\">\r\n                                {tvResultData.results.map((result, index) => {\r\n                                    return (\r\n                                        <div>\r\n                                            <FullScreenReview\r\n                                                key={index}\r\n                                                author={result.author}\r\n                                                written={convertDate(\r\n                                                    result.created_at\r\n                                                )}\r\n                                                review={result.content}\r\n                                            />\r\n                                            <button\r\n                                                className=\"review-modal-expand-btn\"\r\n                                                onClick={() => {\r\n                                                    setExpandBiography(\r\n                                                        !expandBiography\r\n                                                    );\r\n                                                    setModalContent(\r\n                                                        result.content\r\n                                                    );\r\n                                                }}\r\n                                            >\r\n                                                <AiOutlineExpandAlt\r\n                                                    className=\"expand-icon\"\r\n                                                    aria-hidden={true}\r\n                                                    focusable={false}\r\n                                                />\r\n                                            </button>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : toggle.category === \"cast\" ? (\r\n                        tvCreditData.cast !== undefined ? (\r\n                            <div className=\"fullscreen-cast\">\r\n                                {tvCreditData.cast.map((cast) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={cast.id}\r\n                                            className=\"cast-credit\"\r\n                                        >\r\n                                            {cast.profile_path === null ? (\r\n                                                <div className=\"cast-btn-icon-container\">\r\n                                                    <AiOutlineFileImage\r\n                                                        className=\"cast-btn-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                <img\r\n                                                    className=\"cast-img\"\r\n                                                    src={`https://image.tmdb.org/t/p/w500/${cast.profile_path}`}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                            )}\r\n\r\n                                            <Link\r\n                                                to={`/result/people/${cast.id}`}\r\n                                                className=\"cast-name\"\r\n                                            >\r\n                                                {cast.character}\r\n                                            </Link>\r\n                                            <p className=\"cast-role\">\r\n                                                {cast.name}\r\n                                            </p>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ) : (\r\n                            <div></div>\r\n                        )\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </section>\r\n            </div>\r\n            <div\r\n                className={\r\n                    expandBiography\r\n                        ? \"modal-biography-active\"\r\n                        : \"modal-biography-hidden\"\r\n                }\r\n            >\r\n                <button\r\n                    className=\"model-exit-btn\"\r\n                    onClick={() => setExpandBiography(false)}\r\n                >\r\n                    <AiOutlineClose\r\n                        className=\"model-btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n                <p className=\"modal-biography\">{modalContent}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TvFullScreenResult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport {\r\n    AiOutlineFileImage,\r\n    AiOutlineClose,\r\n    AiOutlineExpandAlt,\r\n} from \"react-icons/ai\";\r\nimport { GiExpand } from \"react-icons/gi\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\";\r\n\r\nconst PeopleFullScreenResult = () => {\r\n    const { id } = useParams();\r\n    const [peopleData, setPeopleData] = useState({});\r\n    const [peopleCreditData, setPeopleCreditData] = useState({});\r\n    const [peopleImageData, setPeopleImageData] = useState({});\r\n    const [toggle, setToggle] = useState({ category: \"credit\" });\r\n    const [expandImg, setExpandImg] = useState(false);\r\n    const [imgModal, setImgModal] = useState(null);\r\n    const [mobilePersonToggle, setMobilePersonToggle] = useState({\r\n        category: \"biography\",\r\n    });\r\n\r\n    const {\r\n        convertDate,\r\n        expandBiography,\r\n        setExpandBiography,\r\n        modalContent,\r\n        setModalContent,\r\n    } = useGlobalContext();\r\n\r\n    const [windowDimensions] = useWindowDimensions();\r\n\r\n    const getPeopleData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/person/${id}?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPeopleData(data);\r\n    };\r\n\r\n    const getPeopleCreditData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/person/${id}/combined_credits?api_key=9ddeebbe780fac8f3f13322ce56a87af&language=en-GB`\r\n        );\r\n        const data = await response.json();\r\n        setPeopleCreditData(data);\r\n    };\r\n\r\n    const getPeopleImageData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/person/${id}/images?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        setPeopleImageData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPeopleData();\r\n        getPeopleCreditData();\r\n        getPeopleImageData();\r\n    }, []);\r\n\r\n    const personContentToggle = () => {\r\n        switch (mobilePersonToggle.category) {\r\n            case \"biography\":\r\n                return (\r\n                    <div className=\"mobile-fullscreen-biography\">\r\n                        <div className=\"mobile-person-info\">\r\n                            <div className=\"mobile-person-info-div\">\r\n                                <h4 className=\"mobile-person-info-title\">\r\n                                    Birthdate:\r\n                                </h4>\r\n                                <p className=\"mobile-person-info-para\">\r\n                                    {convertDate(peopleData.birthday)}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"mobile-person-info-div\">\r\n                                <h4 className=\"mobile-person-info-title\">\r\n                                    Place of Birth:\r\n                                </h4>\r\n                                <p className=\"mobile-person-info-para\">\r\n                                    {peopleData.place_of_birth}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"mobile-person-info-div\">\r\n                                <h4 className=\"mobile-person-info-title\">\r\n                                    Known For:\r\n                                </h4>\r\n                                <p className=\"mobile-person-info-para\">\r\n                                    {peopleData.known_for_department}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mobile-person-biography\">\r\n                            <h3>Biography</h3>\r\n                            <p className=\"mobile-person-bio-content\">\r\n                                {peopleData.biography}\r\n                            </p>\r\n                            <button\r\n                                className=\"mobile-person-expand-btn\"\r\n                                onClick={() => {\r\n                                    setExpandBiography(!expandBiography);\r\n                                    setModalContent(peopleData.biography);\r\n                                }}\r\n                            >\r\n                                <AiOutlineExpandAlt\r\n                                    className=\"expand-icon\"\r\n                                    aria-hidden={true}\r\n                                    focusable={false}\r\n                                />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case \"movie\":\r\n                return (\r\n                    <div className=\"mobile-fullscreen-cast\">\r\n                        {peopleCreditData.cast !== undefined ? (\r\n                            peopleCreditData.cast.map((cast, index) => {\r\n                                return (\r\n                                    <div\r\n                                        key={index}\r\n                                        className=\"mobile-cast-credit\"\r\n                                    >\r\n                                        {cast.poster_path === null ? (\r\n                                            <div className=\"mobile-cast-btn-icon-container\">\r\n                                                <AiOutlineFileImage\r\n                                                    className=\"cast-btn-icon\"\r\n                                                    aria-hidden={true}\r\n                                                    focusable={false}\r\n                                                />\r\n                                            </div>\r\n                                        ) : (\r\n                                            <img\r\n                                                className=\"mobile-cast-img\"\r\n                                                src={`https://image.tmdb.org/t/p/w500/${cast.poster_path}`}\r\n                                                alt=\"\"\r\n                                            />\r\n                                        )}\r\n                                        <Link\r\n                                            to={`/result/movie/${cast.id}`}\r\n                                            className=\"mobile-cast-role\"\r\n                                        >\r\n                                            <p className=\"mobile-cast-role\">\r\n                                                {cast.title}\r\n                                            </p>\r\n                                        </Link>\r\n                                        <p className=\"mobile-cast-name\">\r\n                                            {cast.character}\r\n                                        </p>\r\n                                    </div>\r\n                                );\r\n                            })\r\n                        ) : (\r\n                            <div></div>\r\n                        )}\r\n                    </div>\r\n                );\r\n            case \"image\":\r\n                return (\r\n                    <div className=\"mobile-person-fullscreen-images-container\">\r\n                        {peopleImageData.profiles !== null ? (\r\n                            peopleImageData.profiles.map((img, index) => {\r\n                                return (\r\n                                    <div\r\n                                        className=\"mobile-person-img-container\"\r\n                                        key={index}\r\n                                    >\r\n                                        <img\r\n                                            className=\"mobile-person-img\"\r\n                                            src={`https://image.tmdb.org/t/p/w500/${img.file_path}`}\r\n                                            alt=\"\"\r\n                                        />\r\n                                        <div\r\n                                            className=\"person-img-hover\"\r\n                                            onClick={() => {\r\n                                                setExpandImg(!expandImg);\r\n                                                setImgModal(\r\n                                                    <img\r\n                                                        key={index}\r\n                                                        className=\"model-person-img\"\r\n                                                        src={`https://image.tmdb.org/t/p/w500/${img.file_path}`}\r\n                                                        alt=\"\"\r\n                                                    />\r\n                                                );\r\n                                            }}\r\n                                        >\r\n                                            <GiExpand\r\n                                                className=\"person-expand-btn-icon\"\r\n                                                aria-hidden={true}\r\n                                                focusable={false}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })\r\n                        ) : (\r\n                            <div></div>\r\n                        )}\r\n                    </div>\r\n                );\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    if (windowDimensions.width <= 950) {\r\n        return (\r\n            <div className=\"mobile-fullscreen\">\r\n                <div className=\"mobile-fullscreen-card\">\r\n                    {peopleData.profile_path === null ? (\r\n                        <div className=\"mobile-fullscreen-img\">\r\n                            <AiOutlineFileImage\r\n                                className=\"cast-btn-icon\"\r\n                                aria-hidden={true}\r\n                                focusable={false}\r\n                            />\r\n                        </div>\r\n                    ) : (\r\n                        <img\r\n                            className=\"mobile-fullscreen-img\"\r\n                            src={`https://image.tmdb.org/t/p/w500/${peopleData.profile_path}`}\r\n                            alt=\"\"\r\n                        />\r\n                    )}\r\n                    <div className=\"mobile-fullscreen-section-container\">\r\n                        <h1 className=\"mobile-fullscreen-title\">\r\n                            {peopleData.name}\r\n                        </h1>\r\n                        <nav className=\"mobile-fullscreen-header-container\">\r\n                            <ul className=\"mobile-fullscreen-header\">\r\n                                <li\r\n                                    className={`mobile-toggle-btn mobile-overview-btn ${\r\n                                        mobilePersonToggle.category ===\r\n                                        \"biography\"\r\n                                            ? \"active\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() =>\r\n                                        setMobilePersonToggle({\r\n                                            category: \"biography\",\r\n                                        })\r\n                                    }\r\n                                    disabled={\r\n                                        mobilePersonToggle.category ===\r\n                                        \"biography\"\r\n                                    }\r\n                                >\r\n                                    Biography\r\n                                </li>\r\n                                <li\r\n                                    className={`mobile-toggle-btn mobile-cast-btn ${\r\n                                        mobilePersonToggle.category === \"movie\"\r\n                                            ? \"active\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() =>\r\n                                        setMobilePersonToggle({\r\n                                            category: \"movie\",\r\n                                        })\r\n                                    }\r\n                                    disabled={\r\n                                        mobilePersonToggle.category === \"movie\"\r\n                                    }\r\n                                >\r\n                                    Movie\r\n                                </li>\r\n                                <li\r\n                                    className={`mobile-toggle-btn mobile-review-btn ${\r\n                                        mobilePersonToggle.category === \"image\"\r\n                                            ? \"active\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                    onClick={() =>\r\n                                        setMobilePersonToggle({\r\n                                            category: \"image\",\r\n                                        })\r\n                                    }\r\n                                    disabled={\r\n                                        mobilePersonToggle.category === \"image\"\r\n                                    }\r\n                                >\r\n                                    Images\r\n                                </li>\r\n                            </ul>\r\n                        </nav>\r\n                        {personContentToggle()}\r\n                    </div>\r\n                    <div\r\n                        className={\r\n                            expandBiography\r\n                                ? \"modal-biography-active\"\r\n                                : \"modal-biography-hidden\"\r\n                        }\r\n                    >\r\n                        <button\r\n                            className=\"model-exit-btn\"\r\n                            onClick={() => setExpandBiography(false)}\r\n                        >\r\n                            <AiOutlineClose\r\n                                className=\"model-btn-icon\"\r\n                                aria-hidden={true}\r\n                                focusable={false}\r\n                            />\r\n                        </button>\r\n                        <p className=\"modal-biography\">{modalContent}</p>\r\n                    </div>\r\n                    <div\r\n                        className={\r\n                            expandImg ? \"modal-img-active\" : \"modal-img-hidden\"\r\n                        }\r\n                    >\r\n                        <button\r\n                            className=\"model-img-exit-btn\"\r\n                            onClick={() => setExpandImg(!expandImg)}\r\n                        >\r\n                            <AiOutlineClose\r\n                                className=\"model-btn-icon\"\r\n                                aria-hidden={true}\r\n                                focusable={false}\r\n                            />\r\n                        </button>\r\n                        <div className=\"modal-img\">{imgModal}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"fullscreen\">\r\n            <div className=\"fullscreen-card\">\r\n                {peopleData.profile_path === null ? (\r\n                    <div className=\"fullscreen-img\">\r\n                        <AiOutlineFileImage\r\n                            className=\"cast-btn-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <img\r\n                        className=\"fullscreen-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${peopleData.profile_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n                <section className=\"person-fullscreen-section\">\r\n                    <section className=\"fullscreen-info\">\r\n                        <h1 className=\"fullscreen-title\">{peopleData.name}</h1>\r\n                        <div className=\"person-info\">\r\n                            <div className=\"person-info-div\">\r\n                                <h4 className=\"person-info-title\">\r\n                                    Birthdate:\r\n                                </h4>\r\n                                <p className=\"person-info-para\">\r\n                                    {convertDate(peopleData.birthday)}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"person-info-div\">\r\n                                <h4 className=\"person-info-title\">\r\n                                    Place of Birth:\r\n                                </h4>\r\n                                <p className=\"person-info-para\">\r\n                                    {peopleData.place_of_birth}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"person-info-div\">\r\n                                <h4 className=\"person-info-title\">\r\n                                    Known For:\r\n                                </h4>\r\n                                <p className=\"person-info-para\">\r\n                                    {peopleData.known_for_department}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"person-biography\">\r\n                            <h3>Biography</h3>\r\n                            <p className=\"person-bio-content\">\r\n                                {peopleData.biography}\r\n                            </p>\r\n                            <button\r\n                                className=\"person-bio-expand-btn\"\r\n                                onClick={() => {\r\n                                    setExpandBiography(!expandBiography);\r\n                                    setModalContent(peopleData.biography);\r\n                                }}\r\n                            >\r\n                                <AiOutlineExpandAlt\r\n                                    className=\"expand-icon\"\r\n                                    aria-hidden={true}\r\n                                    focusable={false}\r\n                                />\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    <section className=\"review-cast-btn-container\">\r\n                        <div className=\"review-cast-toggle-button\">\r\n                            <button\r\n                                id=\"cast-btn\"\r\n                                className={`fullscreen-toggle-btn cast-btn ${\r\n                                    toggle.category === \"credit\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() =>\r\n                                    setToggle({ category: \"credit\" })\r\n                                }\r\n                            >\r\n                                Movie\r\n                            </button>\r\n                            <button\r\n                                id=\"review-btn\"\r\n                                className={`fullscreen-toggle-btn review-btn ${\r\n                                    toggle.category === \"image\"\r\n                                        ? \"review-cast-active\"\r\n                                        : \"\"\r\n                                }`}\r\n                                onClick={() => setToggle({ category: \"image\" })}\r\n                            >\r\n                                Images\r\n                            </button>\r\n                        </div>\r\n                    </section>\r\n                    {toggle.category === \"credit\" ? (\r\n                        <div className=\"person-fullscreen-cast\">\r\n                            {peopleCreditData.cast !== undefined ? (\r\n                                peopleCreditData.cast.map((cast, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            key={index}\r\n                                            className=\"person-credit\"\r\n                                        >\r\n                                            {cast.poster_path === null ? (\r\n                                                <div className=\"cast-btn-icon-container\">\r\n                                                    <AiOutlineFileImage\r\n                                                        className=\"cast-btn-icon\"\r\n                                                        aria-hidden={true}\r\n                                                        focusable={false}\r\n                                                    />\r\n                                                </div>\r\n                                            ) : (\r\n                                                <img\r\n                                                    className=\"person-credit-img\"\r\n                                                    src={`https://image.tmdb.org/t/p/w500/${cast.poster_path}`}\r\n                                                    alt=\"\"\r\n                                                />\r\n                                            )}\r\n                                            <Link\r\n                                                to={`/result/movie/${cast.id}`}\r\n                                                className=\"cast-name\"\r\n                                            >\r\n                                                <p className=\"cast-name\">\r\n                                                    {cast.title}\r\n                                                </p>\r\n                                            </Link>\r\n                                            <p className=\"person-cast-role\">\r\n                                                {cast.character}\r\n                                            </p>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <div></div>\r\n                            )}\r\n                        </div>\r\n                    ) : toggle.category === \"image\" ? (\r\n                        <div className=\"person-fullscreen-images-container\">\r\n                            {peopleImageData.profiles !== null ? (\r\n                                peopleImageData.profiles.map((img, index) => {\r\n                                    return (\r\n                                        <div className=\"person-img-container\">\r\n                                            <img\r\n                                                key={index}\r\n                                                className=\"person-img\"\r\n                                                src={`https://image.tmdb.org/t/p/w500/${img.file_path}`}\r\n                                                alt=\"\"\r\n                                            />\r\n                                            <div\r\n                                                className=\"person-img-hover\"\r\n                                                onClick={() => {\r\n                                                    setExpandImg(!expandImg);\r\n                                                    setImgModal(\r\n                                                        <img\r\n                                                            key={index}\r\n                                                            className=\"model-person-img\"\r\n                                                            src={`https://image.tmdb.org/t/p/w500/${img.file_path}`}\r\n                                                            alt=\"\"\r\n                                                        />\r\n                                                    );\r\n                                                }}\r\n                                            >\r\n                                                <GiExpand\r\n                                                    className=\"person-expand-btn-icon\"\r\n                                                    aria-hidden={true}\r\n                                                    focusable={false}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            ) : (\r\n                                <div></div>\r\n                            )}\r\n                        </div>\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </section>\r\n            </div>\r\n            <div\r\n                className={\r\n                    expandBiography\r\n                        ? \"modal-biography-active\"\r\n                        : \"modal-biography-hidden\"\r\n                }\r\n            >\r\n                <button\r\n                    className=\"model-exit-btn\"\r\n                    onClick={() => setExpandBiography(false)}\r\n                >\r\n                    <AiOutlineClose\r\n                        className=\"model-btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n                <p className=\"modal-biography\">{modalContent}</p>\r\n            </div>\r\n            <div\r\n                className={expandImg ? \"modal-img-active\" : \"modal-img-hidden\"}\r\n            >\r\n                <button\r\n                    className=\"model-img-exit-btn\"\r\n                    onClick={() => setExpandImg(!expandImg)}\r\n                >\r\n                    <AiOutlineClose\r\n                        className=\"model-btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                </button>\r\n                <div className=\"modal-img\">{imgModal}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PeopleFullScreenResult;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar } from \"react-icons/ai\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst WatchlistCard = ({\r\n    found,\r\n    imgSrc,\r\n    linkTo,\r\n    title,\r\n    overview,\r\n    vote,\r\n    removeCat,\r\n    removeID,\r\n    addCat,\r\n    addID,\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList } = useGlobalContext();\r\n\r\n    return (\r\n        <div className=\"card-active\">\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${imgSrc}`}\r\n                alt=\"\"\r\n                className=\"watchlist-card-img\"\r\n            />\r\n            <div className=\"watchlist-card-info\">\r\n                <Link to={linkTo} className=\"watchlist-card-link\">\r\n                    <h3>{title}</h3>\r\n                </Link>\r\n                <div className=\"watchlist-card-overview-vote-container\">\r\n                    <p className=\"watchlist-card-vote\">\r\n                        <AiFillStar className=\"watchlist-card-icon\" />\r\n                        {vote}\r\n                    </p>\r\n                    <p className=\"watchlist-card-overview\">{overview}</p>\r\n                </div>\r\n            </div>\r\n            <button\r\n                className=\"remove-from-wishlist\"\r\n                onClick={() => {\r\n                    found\r\n                        ? removeFromWatchList(removeCat, removeID)\r\n                        : addToWatchList(addCat, addID);\r\n                }}\r\n            >\r\n                {found ? (\r\n                    <IoMdRemoveCircleOutline\r\n                        className=\"remove-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <IoMdAddCircleOutline\r\n                        className=\"add-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WatchlistCard;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { AiFillStar } from \"react-icons/ai\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst WatchlistList = ({\r\n    found,\r\n    imgSrc,\r\n    linkTo,\r\n    title,\r\n    overview,\r\n    vote,\r\n    removeCat,\r\n    removeID,\r\n    addCat,\r\n    addID,\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList } = useGlobalContext();\r\n\r\n    return (\r\n        <div className=\"list-active\">\r\n            <Link to={linkTo} className=\"watchlist-list-img-link\">\r\n                <img\r\n                    src={`https://image.tmdb.org/t/p/w500/${imgSrc}`}\r\n                    alt=\"\"\r\n                    className=\"watchlist-list-img\"\r\n                />\r\n            </Link>\r\n            <div className=\"watchlist-list-info\">\r\n                <Link to={linkTo} className=\"watchlist-list-link\">\r\n                    <h3>{title}</h3>\r\n                </Link>\r\n                <div className=\"watchlist-list-overview-vote-container\">\r\n                    <p className=\"watchlist-list-vote\">\r\n                        <AiFillStar className=\"watchlist-list-icon\" />\r\n                        {vote}\r\n                    </p>\r\n                    <p className=\"watchlist-list-overview\">{overview}</p>\r\n                </div>\r\n            </div>\r\n            <button\r\n                className=\"remove-from-wishlist\"\r\n                onClick={() => {\r\n                    found\r\n                        ? removeFromWatchList(removeCat, removeID)\r\n                        : addToWatchList(addCat, addID);\r\n                }}\r\n            >\r\n                {found ? (\r\n                    <IoMdRemoveCircleOutline\r\n                        className=\"remove-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <IoMdAddCircleOutline\r\n                        className=\"add-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WatchlistList;\r\n","import React, { useState, useRef, useLayoutEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport { HiViewGrid, HiViewList } from \"react-icons/hi\";\r\nimport { BiDownArrow, BiRightArrow } from \"react-icons/bi\";\r\nimport WatchlistCard from \"./WatchlistCard/watchlistcard\";\r\nimport WatchlistList from \"./WatchlistCard/watchlistList\";\r\n\r\nconst Watchlist = () => {\r\n    const {\r\n        watchList,\r\n        isMovieInWatchlist,\r\n        isTvShowInWatchlist,\r\n        movieCount,\r\n        tvCount,\r\n    } = useGlobalContext();\r\n\r\n    const [movieWatchlist, setMovieWatchlist] = useState(watchList.movie);\r\n    const [tvWatchlist, setTvWatchlist] = useState(watchList.tv);\r\n    const [valueSelect, setValueSelect] = useState({\r\n        ascending: \"\",\r\n        descending: \"\",\r\n    });\r\n    const [watchlistView, setWatchlistView] = useState(\"card\");\r\n    const [isMovieShown, setIsMovieShown] = useState(true);\r\n    const [isTVShown, setIsTVShown] = useState(true);\r\n\r\n    const sortingTypeRef = useRef();\r\n    const sortingDirectionRef = useRef();\r\n    const movieWatchlistRef = useRef();\r\n    const tvWatchlistRef = useRef();\r\n\r\n    const adjustMovieWatchlistHeight = () => {\r\n        if (isMovieShown) {\r\n            movieWatchlistRef.current.style.display = \"none\";\r\n            setIsMovieShown(!isMovieShown);\r\n        } else {\r\n            movieWatchlistRef.current.style.display = \"flex\";\r\n            setIsMovieShown(!isMovieShown);\r\n        }\r\n    };\r\n    const adjustTVWatchlistHeight = () => {\r\n        if (isTVShown) {\r\n            tvWatchlistRef.current.style.display = \"none\";\r\n            setIsTVShown(!isTVShown);\r\n        } else {\r\n            tvWatchlistRef.current.style.display = \"flex\";\r\n            setIsTVShown(!isTVShown);\r\n        }\r\n    };\r\n\r\n    const sortWatchlist = (a, b) => {\r\n        const sortedMovieWatchlist = [...a];\r\n        const sortedTvWatchlist = [...b];\r\n        if (sortingTypeRef.current.value === \"alphabetical\") {\r\n            setValueSelect({ ascending: \"A-Z\", descending: \"Z-A\" });\r\n            sortedMovieWatchlist.sort(compareMovieName);\r\n            sortedTvWatchlist.sort(compareTvName);\r\n        }\r\n        if (sortingTypeRef.current.value === \"rating\") {\r\n            setValueSelect({ ascending: \"Low-High\", descending: \"High-Low\" });\r\n            sortedMovieWatchlist.sort(compareRating);\r\n            sortedTvWatchlist.sort(compareRating);\r\n        }\r\n        if (sortingTypeRef.current.value === \"date-added\") {\r\n            setValueSelect({ ascending: \"New-Old\", descending: \"Old-New\" });\r\n            sortedMovieWatchlist.sort(compareDate);\r\n            sortedTvWatchlist.sort(compareDate);\r\n        }\r\n        if (sortingDirectionRef.current.value === \"descending\") {\r\n            sortedMovieWatchlist.reverse();\r\n            sortedTvWatchlist.reverse();\r\n        }\r\n        setMovieWatchlist(sortedMovieWatchlist);\r\n        setTvWatchlist(sortedTvWatchlist);\r\n    };\r\n    const compareMovieName = (a, b) => {\r\n        const nameA = a.title.toUpperCase();\r\n        const nameB = b.title.toUpperCase();\r\n        if (nameA > nameB) {\r\n            return 1;\r\n        }\r\n        if (nameA < nameB) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    };\r\n    const compareTvName = (a, b) => {\r\n        const nameA = a.name.toUpperCase();\r\n        const nameB = b.name.toUpperCase();\r\n        if (nameA > nameB) {\r\n            return 1;\r\n        }\r\n        if (nameA < nameB) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    };\r\n    const compareRating = (a, b) => {\r\n        return a.vote_average - b.vote_average;\r\n    };\r\n    const compareDate = (a, b) => {\r\n        return b.date_added - a.date_added;\r\n    };\r\n\r\n    useLayoutEffect(() => {\r\n        sortWatchlist(watchList.movie, watchList.tv);\r\n    }, [watchList]);\r\n\r\n    return (\r\n        <div id=\"fullscreen-watchlist-root-container\">\r\n            <div className=\"sorting-selection\">\r\n                <nav className=\"sorting-options-grid\">\r\n                    <div className=\"date-rating-alpha-sorting\">\r\n                        <select\r\n                            name=\"type\"\r\n                            ref={sortingTypeRef}\r\n                            onChange={() =>\r\n                                sortWatchlist(watchList.movie, watchList.tv)\r\n                            }\r\n                            className=\"date-rating-alpha-selection\"\r\n                            id=\"date-rating-alpha\"\r\n                        >\r\n                            <option value=\"alphabetical\">Alphabetical</option>\r\n                            <option value=\"date-added\">Date Added</option>\r\n                            <option value=\"rating\">Rating</option>\r\n                        </select>\r\n                        <select\r\n                            name=\"direction\"\r\n                            ref={sortingDirectionRef}\r\n                            onChange={() =>\r\n                                sortWatchlist(watchList.movie, watchList.tv)\r\n                            }\r\n                            className=\"date-rating-alpha-selection\"\r\n                            id=\"ascending-descending\"\r\n                        >\r\n                            <option value=\"ascending\">\r\n                                {valueSelect.ascending}\r\n                            </option>\r\n                            <option value=\"descending\">\r\n                                {valueSelect.descending}\r\n                            </option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"view-selection\">\r\n                        <p>View:</p>\r\n                        <div className=\"view-btn-container\">\r\n                            <button\r\n                                className=\"view-btn\"\r\n                                onClick={() => setWatchlistView(\"card\")}\r\n                            >\r\n                                <HiViewGrid className=\"view-btn-icon\" />\r\n                            </button>\r\n                            <button\r\n                                className=\"view-btn\"\r\n                                onClick={() => setWatchlistView(\"list\")}\r\n                            >\r\n                                <HiViewList className=\"view-btn-icon\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n            <div id=\"fullscreen-watchlist-flex-container\">\r\n                <div className=\"watchlist-title-container\">\r\n                    <h2 className=\"section-title\">Your Watchlist</h2>\r\n                </div>\r\n                <div id=\"fullscreen-watchlist\">\r\n                    <section\r\n                        className=\"fullscreen-watchlist-container\"\r\n                        id=\"movie-watchlist-fullscreen\"\r\n                    >\r\n                        <div\r\n                            className=\"fullscreen-watchlist-head\"\r\n                            onClick={() => adjustMovieWatchlistHeight()}\r\n                        >\r\n                            <h3>Movie Watchlist</h3>\r\n                            <p>Total Added - {movieCount}</p>\r\n                            {isMovieShown ? <BiDownArrow /> : <BiRightArrow />}\r\n                        </div>\r\n                        <div\r\n                            // className=\"fullscreen-watchlist-map\"\r\n                            className={\r\n                                watchlistView === \"card\"\r\n                                    ? \"fullscreen-watchlist-map card-map\"\r\n                                    : \"fullscreen-watchlist-map list-map\"\r\n                            }\r\n                            ref={movieWatchlistRef}\r\n                        >\r\n                            {movieWatchlist.length === 0 ? (\r\n                                <div className=\"empty-watchlist\">\r\n                                    <h1>Your Watchlist is Empty...</h1>\r\n                                </div>\r\n                            ) : (\r\n                                movieWatchlist.map((item) => {\r\n                                    if (watchlistView === \"card\") {\r\n                                        return (\r\n                                            <WatchlistCard\r\n                                                key={item.id}\r\n                                                id={item.id}\r\n                                                found={isMovieInWatchlist(\r\n                                                    item.id\r\n                                                )}\r\n                                                imgSrc={item.poster_path}\r\n                                                linkTo={`/result/movie/${item.id}`}\r\n                                                title={item.title}\r\n                                                overview={item.overview}\r\n                                                vote={item.vote_average}\r\n                                                removeCat={\"movie\"}\r\n                                                removeID={item.id}\r\n                                                addCat={\"movie\"}\r\n                                                addID={item}\r\n                                            />\r\n                                        );\r\n                                    } else {\r\n                                        return (\r\n                                            <WatchlistList\r\n                                                key={item.id}\r\n                                                id={item.id}\r\n                                                found={isMovieInWatchlist(\r\n                                                    item.id\r\n                                                )}\r\n                                                imgSrc={item.poster_path}\r\n                                                linkTo={`/result/movie/${item.id}`}\r\n                                                title={item.title}\r\n                                                overview={item.overview}\r\n                                                vote={item.vote_average}\r\n                                                removeCat={\"movie\"}\r\n                                                removeID={item.id}\r\n                                                addCat={\"movie\"}\r\n                                                addID={item}\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                })\r\n                            )}\r\n                        </div>\r\n                    </section>\r\n                    <section\r\n                        className=\"fullscreen-watchlist-container\"\r\n                        id=\"tv-watchlist-fullscreen\"\r\n                    >\r\n                        <div\r\n                            className=\"fullscreen-watchlist-head\"\r\n                            onClick={() => adjustTVWatchlistHeight()}\r\n                        >\r\n                            <h3>TV Show Watchlist</h3>\r\n                            <p>Total Added - {tvCount}</p>\r\n                            {isTVShown ? <BiDownArrow /> : <BiRightArrow />}\r\n                        </div>\r\n                        <div\r\n                            className={\r\n                                watchlistView === \"card\"\r\n                                    ? \"fullscreen-watchlist-map card-map\"\r\n                                    : \"fullscreen-watchlist-map list-map\"\r\n                            }\r\n                            ref={tvWatchlistRef}\r\n                        >\r\n                            {tvWatchlist.length === 0 ? (\r\n                                <div className=\"empty-watchlist\">\r\n                                    <h1>Your Watchlist is Empty...</h1>\r\n                                </div>\r\n                            ) : (\r\n                                tvWatchlist.map((item) => {\r\n                                    if (watchlistView === \"card\") {\r\n                                        return (\r\n                                            <WatchlistCard\r\n                                                key={item.id}\r\n                                                id={item.id}\r\n                                                found={isTvShowInWatchlist(\r\n                                                    item.id\r\n                                                )}\r\n                                                imgSrc={item.poster_path}\r\n                                                linkTo={`/result/tv/${item.id}`}\r\n                                                title={item.name}\r\n                                                overview={item.overview}\r\n                                                vote={item.vote_average}\r\n                                                removeCat={\"tv\"}\r\n                                                removeID={item.id}\r\n                                                addCat={\"tv\"}\r\n                                                addID={item}\r\n                                            />\r\n                                        );\r\n                                    } else {\r\n                                        return (\r\n                                            <WatchlistList\r\n                                                key={item.id}\r\n                                                id={item.id}\r\n                                                found={isTvShowInWatchlist(\r\n                                                    item.id\r\n                                                )}\r\n                                                imgSrc={item.poster_path}\r\n                                                linkTo={`/result/tv/${item.id}`}\r\n                                                title={item.name}\r\n                                                overview={item.overview}\r\n                                                vote={item.vote_average}\r\n                                                removeCat={\"tv\"}\r\n                                                removeID={item.id}\r\n                                                addCat={\"tv\"}\r\n                                                addID={item}\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                })\r\n                            )}\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Watchlist;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../../context\";\r\nimport { GoSearch } from \"react-icons/go\";\r\n\r\nconst Searchbar = () => {\r\n    const [searchTitle, setSearchTitle] = useState(\"\");\r\n    const [category, setCategory] = useState(\"movie\");\r\n\r\n    const {\r\n        search,\r\n        trendingData,\r\n        setTrendingData,\r\n        setSearchResults,\r\n        searchResults,\r\n    } = useGlobalContext();\r\n\r\n    const placeHolderSearchText = () => {\r\n        switch (category) {\r\n            case \"movie\":\r\n                return \"Search for a Movie\";\r\n            case \"tv\":\r\n                return \"Search for a TV Show\";\r\n            case \"people\":\r\n                return \"Search for a Person\";\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setTrendingData({ ...trendingData, type: category });\r\n    }, [category]);\r\n\r\n    return (\r\n        <form id=\"title-searchbar\">\r\n            <div className=\"title-bar\">\r\n                <div className=\"search-input-container\">\r\n                    <input\r\n                        id=\"title-input\"\r\n                        type=\"text\"\r\n                        value={searchTitle}\r\n                        placeholder={placeHolderSearchText()}\r\n                        onChange={(e) => {\r\n                            setSearchTitle(e.target.value);\r\n                        }}\r\n                    />\r\n                    <button\r\n                        id=\"search-btn\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => {\r\n                            if (searchTitle === \"\") {\r\n                                switch (category) {\r\n                                    case \"movie\":\r\n                                        return alert(\r\n                                            \"Please Enter Movie Title\"\r\n                                        );\r\n                                    case \"tv\":\r\n                                        return alert(\r\n                                            \"Please Enter TV Show Title\"\r\n                                        );\r\n                                    case \"people\":\r\n                                        return alert(\r\n                                            \"Please Enter Person Name\"\r\n                                        );\r\n                                    default:\r\n                                        break;\r\n                                }\r\n                            } else {\r\n                                e.preventDefault();\r\n                                search(category, searchTitle);\r\n                                setSearchTitle(\"\");\r\n                            }\r\n                        }}\r\n                    >\r\n                        <GoSearch className=\"search-btn-icon\" />\r\n                    </button>\r\n                </div>\r\n                <div className=\"category-btn-container\">\r\n                    <button\r\n                        id=\"category-movie-btn\"\r\n                        className={`category-btn category-movie-btn ${\r\n                            category === \"movie\" ? \"category-active\" : \"\"\r\n                        }`}\r\n                        onClick={() => {\r\n                            setCategory(\"movie\");\r\n                            setSearchResults({\r\n                                ...searchResults,\r\n                                category: \"movie\",\r\n                            });\r\n                        }}\r\n                    >\r\n                        Movie\r\n                    </button>\r\n                    <button\r\n                        id=\"category-tv-btn\"\r\n                        className={`category-btn category-tv-btn ${\r\n                            category === \"tv\" ? \"category-active\" : \"\"\r\n                        }`}\r\n                        onClick={() => {\r\n                            setCategory(\"tv\");\r\n                            setSearchResults({\r\n                                ...searchResults,\r\n                                category: \"tv\",\r\n                            });\r\n                        }}\r\n                    >\r\n                        TV\r\n                    </button>\r\n                    <button\r\n                        id=\"category-people-btn\"\r\n                        className={`category-btn category-people-btn ${\r\n                            category === \"people\" ? \"category-active\" : \"\"\r\n                        }`}\r\n                        onClick={() => {\r\n                            setCategory(\"people\");\r\n                            setSearchResults({\r\n                                ...searchResults,\r\n                                category: \"people\",\r\n                            });\r\n                        }}\r\n                    >\r\n                        Person\r\n                    </button>\r\n                </div>\r\n                <button\r\n                    id=\"clear-search-btn\"\r\n                    onClick={() => {\r\n                        setSearchResults({\r\n                            category: \"movie\",\r\n                            movie: [],\r\n                            tv: [],\r\n                            people: [],\r\n                            query: {},\r\n                        });\r\n                    }}\r\n                >\r\n                    Clear\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Searchbar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AiOutlineFileImage } from \"react-icons/ai\";\r\nimport { IoMdRemoveCircleOutline, IoMdAddCircleOutline } from \"react-icons/io\";\r\nimport { useGlobalContext } from \"../../../../context\";\r\n\r\nconst MovieTVResultData = ({\r\n    id,\r\n    linkTo,\r\n    img,\r\n    title,\r\n    release,\r\n    overview,\r\n    type,\r\n    found,\r\n    vote,\r\n}) => {\r\n    const { addToWatchList, removeFromWatchList, convertDate } =\r\n        useGlobalContext();\r\n\r\n    const obj = {\r\n        id: id,\r\n        title: title,\r\n        poster_path: img,\r\n        vote_average: vote,\r\n        date_added: Date.now(),\r\n        overview: overview,\r\n    };\r\n\r\n    return (\r\n        <div className=\"search-results\">\r\n            <Link to={linkTo} className=\"image-link-container\">\r\n                {img === null ? (\r\n                    <div className=\"search-img\">\r\n                        <AiOutlineFileImage\r\n                            className=\"btn-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <img\r\n                        className=\"search-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${img}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n            </Link>\r\n            <div className=\"search-info\">\r\n                <Link to={linkTo} className=\"search-title\">\r\n                    {title}\r\n                </Link>\r\n                <div className=\"search-release-overview-container\">\r\n                    <p className=\"search-release-date\">\r\n                        {convertDate(release)}\r\n                    </p>\r\n                    <p className=\"search-overview\">{overview}</p>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button\r\n                    className=\"remove-from-wishlist\"\r\n                    onClick={() => {\r\n                        found\r\n                            ? removeFromWatchList(type, id)\r\n                            : addToWatchList(type, obj);\r\n                    }}\r\n                >\r\n                    {found ? (\r\n                        <IoMdRemoveCircleOutline\r\n                            className=\"remove-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    ) : (\r\n                        <IoMdAddCircleOutline\r\n                            className=\"add-icon\"\r\n                            aria-hidden={true}\r\n                            focusable={false}\r\n                        />\r\n                    )}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieTVResultData;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AiOutlineFileImage } from \"react-icons/ai\";\r\n\r\nconst PeopleResultData = ({ person }) => {\r\n    return (\r\n        <div className=\"person-search-results-card\">\r\n            <Link\r\n                to={`/result/people/${person.id}`}\r\n                className=\"person-image-container\"\r\n            >\r\n                {person.profile_path === null ? (\r\n                    <AiOutlineFileImage\r\n                        className=\"btn-icon\"\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                ) : (\r\n                    <img\r\n                        className=\"person-search-img\"\r\n                        src={`https://image.tmdb.org/t/p/w500/${person.profile_path}`}\r\n                        alt=\"\"\r\n                    />\r\n                )}\r\n            </Link>\r\n            <div className=\"person-search-info\">\r\n                <Link\r\n                    to={`/result/people/${person.id}`}\r\n                    className=\"person-name\"\r\n                >\r\n                    {person.name}\r\n                </Link>\r\n                <div className=\"person-known-role-container\">\r\n                    <p className=\"person-known-for\">\r\n                        Known for: {person.known_for_department}\r\n                    </p>\r\n                    {person.known_for.map((role) => {\r\n                        return (\r\n                            <div key={role.id} className=\"known-for-role\">\r\n                                <p className=\"known-for-title\">{role.title}</p>\r\n                                <p className=\"known-for-date\">\r\n                                    {role.release_date}\r\n                                </p>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PeopleResultData;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst TrendingData = ({ title, img, id, link }) => {\r\n    return (\r\n        <div className=\"trending-tile\">\r\n            <img\r\n                src={`https://image.tmdb.org/t/p/w500/${img}`}\r\n                alt=\"\"\r\n                className=\"trending-img\"\r\n            />\r\n            <Link to={`/result/${link}/${id}`} className=\"trending-link\">\r\n                <h3 className=\"trending-title\">{title}</h3>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TrendingData;\r\n","import React, { useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../../context\";\r\nimport MovieTVResultData from \"./SearchResultsCard/movietvresultdata\";\r\nimport PeopleResultData from \"./SearchResultsCard/peopleresultdata\";\r\nimport useHorizontalScroll from \"../../../hooks/useHorizontalScroll\";\r\nimport TrendingData from \"./SearchTrending/trendingdata\";\r\nimport useWindowDimensions from \"../../../hooks/useWindowDimensions\";\r\nimport Carousel from \"../../Carousel/Carousel\";\r\n\r\nconst SearchResults = () => {\r\n    const {\r\n        searchResults,\r\n        trendingData,\r\n        setTrendingData,\r\n        isMovieInWatchlist,\r\n        isTvShowInWatchlist,\r\n    } = useGlobalContext();\r\n\r\n    const movieTrendingRef = useHorizontalScroll(false);\r\n    const tvTrendingRef = useHorizontalScroll(false);\r\n    const peopleTrendingRef = useHorizontalScroll(false);\r\n\r\n    const [windowDimensions] = useWindowDimensions();\r\n\r\n    const getTrendingMovieData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/movie/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n    const getTrendingTVData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/tv/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n    const getTrendingPeopleData = async () => {\r\n        const response = await fetch(\r\n            `https://api.themoviedb.org/3/trending/person/day?api_key=9ddeebbe780fac8f3f13322ce56a87af`\r\n        );\r\n        const data = await response.json();\r\n        return data.results;\r\n    };\r\n\r\n    const getAllTrending = async () => {\r\n        const obj = {\r\n            type: \"movie\",\r\n            movie: await getTrendingMovieData(),\r\n            tv: await getTrendingTVData(),\r\n            person: await getTrendingPeopleData(),\r\n        };\r\n        setTrendingData(obj);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllTrending();\r\n    }, []);\r\n\r\n    if (windowDimensions.width <= 450) {\r\n        switch (trendingData.type) {\r\n            case \"movie\":\r\n                if (searchResults.movie.length === 0) {\r\n                    return (\r\n                        <div className=\"trending-carousel-container\">\r\n                            <div className=\"search-trending-title-container\">\r\n                                <h2 className=\"search-trending-title\">\r\n                                    Trending Movies\r\n                                </h2>\r\n                            </div>\r\n                            <Carousel>\r\n                                {trendingData.movie.map((film) => {\r\n                                    return (\r\n                                        <TrendingData\r\n                                            key={film.id}\r\n                                            id={film.id}\r\n                                            title={film.title}\r\n                                            img={film.poster_path}\r\n                                            link={\"movie\"}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </Carousel>\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <div className=\"search-results-container\">\r\n                            <h3 className=\"showing-results-for\">\r\n                                Showing results for \"\r\n                                {searchResults.query.movie.toUpperCase()}\"\r\n                            </h3>\r\n\r\n                            {searchResults.movie.map((movie) => {\r\n                                return (\r\n                                    <MovieTVResultData\r\n                                        key={movie.id}\r\n                                        id={movie.id}\r\n                                        found={isMovieInWatchlist(movie.id)}\r\n                                        linkTo={`/result/movie/${movie.id}`}\r\n                                        img={movie.poster_path}\r\n                                        title={movie.title}\r\n                                        release={movie.release_date}\r\n                                        overview={movie.overview}\r\n                                        type={\"movie\"}\r\n                                        vote={movie.vote_average}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    );\r\n                }\r\n            case \"tv\":\r\n                if (searchResults.tv.length === 0) {\r\n                    return (\r\n                        <div className=\"trending-carousel-container\">\r\n                            <div className=\"search-trending-title-container\">\r\n                                <h2 className=\"search-trending-title\">\r\n                                    Trending TV Shows\r\n                                </h2>\r\n                            </div>\r\n                            <Carousel>\r\n                                {trendingData.tv.map((show) => {\r\n                                    return (\r\n                                        <TrendingData\r\n                                            key={show.id}\r\n                                            id={show.id}\r\n                                            title={show.name}\r\n                                            img={show.poster_path}\r\n                                            link={\"tv\"}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </Carousel>\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <div className=\"search-results-container\">\r\n                            <h3 className=\"showing-results-for\">\r\n                                Showing results for \"\r\n                                {searchResults.query.tv.toUpperCase()}\"\r\n                            </h3>\r\n                            {searchResults.tv.map((tvshow) => {\r\n                                return (\r\n                                    <MovieTVResultData\r\n                                        key={tvshow.id}\r\n                                        id={tvshow.id}\r\n                                        found={isTvShowInWatchlist(tvshow.id)}\r\n                                        linkTo={`/result/tv/${tvshow.id}`}\r\n                                        img={tvshow.poster_path}\r\n                                        title={tvshow.name}\r\n                                        release={tvshow.first_air_date}\r\n                                        overview={tvshow.overview}\r\n                                        type={\"tv\"}\r\n                                        vote={tvshow.vote_average}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    );\r\n                }\r\n            case \"people\":\r\n                if (searchResults.people.length === 0) {\r\n                    return (\r\n                        <div className=\"trending-carousel-container\">\r\n                            <div className=\"search-trending-title-container\">\r\n                                <h2 className=\"search-trending-title\">\r\n                                    Trending People\r\n                                </h2>\r\n                            </div>\r\n                            <Carousel>\r\n                                {trendingData.person.map((peep) => {\r\n                                    return (\r\n                                        <TrendingData\r\n                                            key={peep.id}\r\n                                            id={peep.id}\r\n                                            title={peep.name}\r\n                                            img={peep.profile_path}\r\n                                            link={\"people\"}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </Carousel>\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <div className=\"people-search-results-container\">\r\n                            <h3 className=\"showing-results-for\">\r\n                                Showing results for \"\r\n                                {searchResults.query.person.toUpperCase()}\"\r\n                            </h3>\r\n                            <div className=\"people-search-results\">\r\n                                {searchResults.people.map((item, index) => {\r\n                                    return (\r\n                                        <PeopleResultData\r\n                                            key={item.id}\r\n                                            index={index}\r\n                                            person={item}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    switch (trendingData.type) {\r\n        case \"movie\":\r\n            if (searchResults.movie.length === 0) {\r\n                return (\r\n                    <div className=\"trending-movie-container\">\r\n                        <div className=\"search-trending-title-container\">\r\n                            <h2 className=\"search-trending-title\">\r\n                                Trending Movies\r\n                            </h2>\r\n                        </div>\r\n                        <div\r\n                            className=\"trending-data-container\"\r\n                            ref={movieTrendingRef}\r\n                        >\r\n                            {trendingData.movie.map((film) => {\r\n                                return (\r\n                                    <TrendingData\r\n                                        key={film.id}\r\n                                        id={film.id}\r\n                                        title={film.title}\r\n                                        img={film.poster_path}\r\n                                        link={\"movie\"}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"search-results-container\">\r\n                        <h3 className=\"showing-results-for\">\r\n                            Showing results for \"\r\n                            {searchResults.query.movie.toUpperCase()}\"\r\n                        </h3>\r\n                        {searchResults.movie.map((movie) => {\r\n                            return (\r\n                                <MovieTVResultData\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    found={isMovieInWatchlist(movie.id)}\r\n                                    linkTo={`/result/movie/${movie.id}`}\r\n                                    img={movie.poster_path}\r\n                                    title={movie.title}\r\n                                    release={movie.release_date}\r\n                                    overview={movie.overview}\r\n                                    type={\"movie\"}\r\n                                    vote={movie.vote_average}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                );\r\n            }\r\n        case \"tv\":\r\n            if (searchResults.tv.length === 0) {\r\n                return (\r\n                    <div className=\"trending-movie-container\">\r\n                        <div className=\"search-trending-title-container\">\r\n                            <h2 className=\"search-trending-title\">\r\n                                Trending TV Shows\r\n                            </h2>\r\n                        </div>\r\n                        <div\r\n                            className=\"trending-data-container\"\r\n                            ref={tvTrendingRef}\r\n                        >\r\n                            {trendingData.tv.map((show) => {\r\n                                return (\r\n                                    <TrendingData\r\n                                        key={show.id}\r\n                                        id={show.id}\r\n                                        title={show.name}\r\n                                        img={show.poster_path}\r\n                                        link={\"tv\"}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"search-results-container\">\r\n                        <h3 className=\"showing-results-for\">\r\n                            Showing results for \"\r\n                            {searchResults.query.tv.toUpperCase()}\"\r\n                        </h3>\r\n                        {searchResults.tv.map((tvshow) => {\r\n                            return (\r\n                                <MovieTVResultData\r\n                                    key={tvshow.id}\r\n                                    id={tvshow.id}\r\n                                    found={isTvShowInWatchlist(tvshow.id)}\r\n                                    linkTo={`/result/tv/${tvshow.id}`}\r\n                                    img={tvshow.poster_path}\r\n                                    title={tvshow.name}\r\n                                    release={tvshow.first_air_date}\r\n                                    overview={tvshow.overview}\r\n                                    type={\"tv\"}\r\n                                    vote={tvshow.vote_average}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                );\r\n            }\r\n        case \"people\":\r\n            if (searchResults.people.length === 0) {\r\n                return (\r\n                    <div className=\"trending-movie-container\">\r\n                        <div className=\"search-trending-title-container\">\r\n                            <h2 className=\"search-trending-title\">\r\n                                Trending People\r\n                            </h2>\r\n                        </div>\r\n                        <div\r\n                            className=\"trending-data-container\"\r\n                            ref={peopleTrendingRef}\r\n                        >\r\n                            {trendingData.person.map((peep) => {\r\n                                return (\r\n                                    <TrendingData\r\n                                        key={peep.id}\r\n                                        id={peep.id}\r\n                                        title={peep.name}\r\n                                        img={peep.profile_path}\r\n                                        link={\"people\"}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"people-search-results-container\">\r\n                        <h3 className=\"showing-results-for\">\r\n                            Showing results for \"\r\n                            {searchResults.query.person.toUpperCase()}\"\r\n                        </h3>\r\n                        <div className=\"people-search-results\">\r\n                            {searchResults.people.map((item, index) => {\r\n                                return (\r\n                                    <PeopleResultData\r\n                                        key={item.id}\r\n                                        index={index}\r\n                                        person={item}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n};\r\n\r\nexport default SearchResults;\r\n","import React, { useRef } from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport Searchbar from \"./Searchbar/searchbar\";\r\nimport SearchResults from \"./SearchResults/searchresults\";\r\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\";\r\n\r\nconst Search = () => {\r\n    const { setIsScroll, returnToTop } = useGlobalContext();\r\n    const scrollRef = useRef();\r\n\r\n    const [windowDimensions] = useWindowDimensions();\r\n\r\n    return (\r\n        <div\r\n            ref={scrollRef}\r\n            className={windowDimensions.width < 926 ? \"mobile-scroll\" : \"\"}\r\n            id=\"search-container\"\r\n            onScroll={() => {\r\n                if (scrollRef.current.scrollTop <= 0) {\r\n                    setIsScroll(false);\r\n                } else {\r\n                    setIsScroll(true);\r\n                }\r\n            }}\r\n        >\r\n            <Searchbar />\r\n            <SearchResults />\r\n            {windowDimensions.width < 926 ? returnToTop(scrollRef) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst Addremovewatchlist = () => {\r\n    const { watchListAlert } = useGlobalContext();\r\n    return (\r\n        <div\r\n            id=\"watchlist-alert\"\r\n            className={\r\n                watchListAlert.isAdded\r\n                    ? \"added\"\r\n                    : watchListAlert.isRemoved\r\n                    ? \"removed\"\r\n                    : \"\"\r\n            }\r\n        >\r\n            {watchListAlert.isAdded ? (\r\n                <p>Added to Watchlist - {watchListAlert.title}</p>\r\n            ) : watchListAlert.isRemoved ? (\r\n                <p>Removed from Watchlist - {watchListAlert.title}</p>\r\n            ) : (\r\n                <p></p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Addremovewatchlist;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GoSearch } from \"react-icons/go\";\r\nimport { useGlobalContext } from \"../../../context\";\r\n\r\nconst Navbar = () => {\r\n    const {\r\n        setSearchResults,\r\n        setExpandBiography,\r\n        setModalContent,\r\n        isScroll,\r\n        setIsScroll,\r\n    } = useGlobalContext();\r\n\r\n    const [isHover, setIsHover] = useState(false);\r\n    const toggleHover = () => setIsHover(!isHover);\r\n\r\n    return (\r\n        <nav\r\n            className={isScroll ? \"navbar hidden-navbar\" : \"navbar\"}\r\n            onMouseEnter={toggleHover}\r\n            onMouseLeave={toggleHover}\r\n        >\r\n            <ul id=\"navbar-list\">\r\n                <li>\r\n                    <Link\r\n                        // className=\"nav-link\"\r\n                        className={\r\n                            isScroll ? \"nav-link hidden-link\" : \"nav-link\"\r\n                        }\r\n                        id={isHover ? \"visible-link\" : \"\"}\r\n                        to=\"/\"\r\n                        onClick={() => {\r\n                            setSearchResults({\r\n                                category: \"movie\",\r\n                                movie: [],\r\n                                tv: [],\r\n                                people: [],\r\n                            });\r\n                            setExpandBiography(false);\r\n                            setModalContent(\"\");\r\n                            setIsScroll(false);\r\n                        }}\r\n                    >\r\n                        Home\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link\r\n                        // className=\"nav-link\"\r\n                        className={\r\n                            isScroll ? \"nav-link hidden-link\" : \"nav-link\"\r\n                        }\r\n                        id={isHover ? \"visible-link\" : \"\"}\r\n                        to=\"/watchlist\"\r\n                        onClick={() => {\r\n                            setExpandBiography(false);\r\n                            setModalContent(\"\");\r\n                            setIsScroll(false);\r\n                        }}\r\n                    >\r\n                        Watchlist\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link\r\n                        // className=\"nav-link search-icon-link\"\r\n                        className={\r\n                            isScroll\r\n                                ? \"nav-link search-icon-link hidden-link\"\r\n                                : \"nav-link search-icon-link\"\r\n                        }\r\n                        id={isHover ? \"visible-link\" : \"\"}\r\n                        to=\"/search\"\r\n                        onClick={() => {\r\n                            setExpandBiography(false);\r\n                            setModalContent(\"\");\r\n                            setIsScroll(false);\r\n                        }}\r\n                    >\r\n                        <GoSearch className=\"link-icon\" />\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../../context\";\r\nimport Addremovewatchlist from \"./Navbar/addremovewatchlist\";\r\nimport Navbar from \"./Navbar/navbar\";\r\n\r\nconst NavbarContainer = () => {\r\n    const { showHideAlert } = useGlobalContext();\r\n\r\n    const showOrHideAlert = () => {\r\n        if (showHideAlert) {\r\n            return <Addremovewatchlist />;\r\n        } else {\r\n            return <Navbar />;\r\n        }\r\n    };\r\n\r\n    return <div id=\"navbar-watchlist-container\">{showOrHideAlert()}</div>;\r\n};\r\n\r\nexport default NavbarContainer;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Homepage from \"./components/Homepage/homepage\";\r\nimport MovieFullScreenResult from \"./components/FullScreenResult/moviefullscreenresult\";\r\nimport TvFullScreenResult from \"./components/FullScreenResult/tvfullscreenresult\";\r\nimport PeopleFullScreenResult from \"./components/FullScreenResult/peoplefullscreenresults\";\r\nimport Watchlist from \"./components/Watchlist/watchlist\";\r\nimport Search from \"./components/Search/Search\";\r\nimport NavbarContainer from \"./components/NavbarContainer/NavbarContainer\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <Router>\r\n            <div id=\"app-container\">\r\n                <NavbarContainer />\r\n                <Switch>\r\n                    <Route path=\"/search\">\r\n                        <Search />\r\n                    </Route>\r\n                    <Route path=\"/result/movie/:id\">\r\n                        <MovieFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/result/tv/:id\">\r\n                        <TvFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/result/people/:id\">\r\n                        <PeopleFullScreenResult />\r\n                    </Route>\r\n                    <Route path=\"/watchlist\">\r\n                        <Watchlist />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Homepage />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"./components/NavbarContainer/Navbar/navbar.css\";\r\nimport \"./components/Homepage/homepage.css\";\r\nimport \"./components/Search/Searchbar/searchbar.css\";\r\nimport \"./components/Search/SearchResults/searchresults.css\";\r\nimport \"./components/FullScreenResult/fullscreenresults.css\";\r\nimport \"./components/Watchlist/watchlist.css\";\r\nimport App from \"./App\";\r\nimport { AppProvider } from \"./context\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <AppProvider>\r\n            <App />\r\n        </AppProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}